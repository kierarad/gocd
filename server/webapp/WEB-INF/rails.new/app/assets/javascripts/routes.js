/*
File generated by js-routes 1.1.0
Based on Rails routes of Go::Application
*/


(function() {
  var NodeTypes, ParameterMissing, Utils, createGlobalJsRoutesObject, defaults, root,
    __hasProp = {}.hasOwnProperty;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  ParameterMissing = function(message) {
    this.message = message;
  };

  ParameterMissing.prototype = new Error();

  defaults = {
    prefix: "/go",
    default_url_options: {}
  };

  NodeTypes = {"GROUP":1,"CAT":2,"SYMBOL":3,"OR":4,"STAR":5,"LITERAL":6,"SLASH":7,"DOT":8};

  Utils = {
    default_serializer: function(object, prefix) {
      var element, i, key, prop, s, _i, _len;

      if (prefix == null) {
        prefix = null;
      }
      if (!object) {
        return "";
      }
      if (!prefix && !(this.get_object_type(object) === "object")) {
        throw new Error("Url parameters should be a javascript hash");
      }
      s = [];
      switch (this.get_object_type(object)) {
        case "array":
          for (i = _i = 0, _len = object.length; _i < _len; i = ++_i) {
            element = object[i];
            s.push(this.default_serializer(element, prefix + "[]"));
          }
          break;
        case "object":
          for (key in object) {
            if (!__hasProp.call(object, key)) continue;
            prop = object[key];
            if (!(prop != null)) {
              continue;
            }
            if (prefix != null) {
              key = "" + prefix + "[" + key + "]";
            }
            s.push(this.default_serializer(prop, key));
          }
          break;
        default:
          if (object) {
            s.push("" + (encodeURIComponent(prefix.toString())) + "=" + (encodeURIComponent(object.toString())));
          }
      }
      if (!s.length) {
        return "";
      }
      return s.join("&");
    },
    serialize: function(object) {
      var custom_serializer;

      custom_serializer = null;
      if (custom_serializer) {
        return custom_serializer(object);
      } else {
        return this.default_serializer(object);
      }
    },
    clean_path: function(path) {
      var last_index;

      path = path.split("://");
      last_index = path.length - 1;
      path[last_index] = path[last_index].replace(/\/+/g, "/");
      return path.join("://");
    },
    set_default_url_options: function(optional_parts, options) {
      var i, part, _i, _len, _results;

      _results = [];
      for (i = _i = 0, _len = optional_parts.length; _i < _len; i = ++_i) {
        part = optional_parts[i];
        if (!options.hasOwnProperty(part) && defaults.default_url_options.hasOwnProperty(part)) {
          _results.push(options[part] = defaults.default_url_options[part]);
        }
      }
      return _results;
    },
    extract_anchor: function(options) {
      var anchor;

      anchor = "";
      if (options.hasOwnProperty("anchor")) {
        anchor = "#" + options.anchor;
        delete options.anchor;
      }
      return anchor;
    },
    extract_trailing_slash: function(options) {
      var trailing_slash;

      trailing_slash = false;
      if (defaults.default_url_options.hasOwnProperty("trailing_slash")) {
        trailing_slash = defaults.default_url_options.trailing_slash;
      }
      if (options.hasOwnProperty("trailing_slash")) {
        trailing_slash = options.trailing_slash;
        delete options.trailing_slash;
      }
      return trailing_slash;
    },
    extract_options: function(number_of_params, args) {
      var last_el;

      last_el = args[args.length - 1];
      if (args.length > number_of_params || ((last_el != null) && "object" === this.get_object_type(last_el) && !this.look_like_serialized_model(last_el))) {
        return args.pop();
      } else {
        return {};
      }
    },
    look_like_serialized_model: function(object) {
      return "id" in object || "to_param" in object;
    },
    path_identifier: function(object) {
      var property;

      if (object === 0) {
        return "0";
      }
      if (!object) {
        return "";
      }
      property = object;
      if (this.get_object_type(object) === "object") {
        if ("to_param" in object) {
          property = object.to_param;
        } else if ("id" in object) {
          property = object.id;
        } else {
          property = object;
        }
        if (this.get_object_type(property) === "function") {
          property = property.call(object);
        }
      }
      return property.toString();
    },
    clone: function(obj) {
      var attr, copy, key;

      if ((obj == null) || "object" !== this.get_object_type(obj)) {
        return obj;
      }
      copy = obj.constructor();
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        attr = obj[key];
        copy[key] = attr;
      }
      return copy;
    },
    prepare_parameters: function(required_parameters, actual_parameters, options) {
      var i, result, val, _i, _len;

      result = this.clone(options) || {};
      for (i = _i = 0, _len = required_parameters.length; _i < _len; i = ++_i) {
        val = required_parameters[i];
        if (i < actual_parameters.length) {
          result[val] = actual_parameters[i];
        }
      }
      return result;
    },
    build_path: function(required_parameters, optional_parts, route, args) {
      var anchor, opts, parameters, result, trailing_slash, url, url_params;

      args = Array.prototype.slice.call(args);
      opts = this.extract_options(required_parameters.length, args);
      if (args.length > required_parameters.length) {
        throw new Error("Too many parameters provided for path");
      }
      parameters = this.prepare_parameters(required_parameters, args, opts);
      this.set_default_url_options(optional_parts, parameters);
      anchor = this.extract_anchor(parameters);
      trailing_slash = this.extract_trailing_slash(parameters);
      result = "" + (this.get_prefix()) + (this.visit(route, parameters));
      url = Utils.clean_path("" + result);
      if (trailing_slash === true) {
        url = url.replace(/(.*?)[\/]?$/, "$1/");
      }
      if ((url_params = this.serialize(parameters)).length) {
        url += "?" + url_params;
      }
      url += anchor;
      return url;
    },
    visit: function(route, parameters, optional) {
      var left, left_part, right, right_part, type, value;

      if (optional == null) {
        optional = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return this.visit(left, parameters, true);
        case NodeTypes.STAR:
          return this.visit_globbing(left, parameters, true);
        case NodeTypes.LITERAL:
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
          return left;
        case NodeTypes.CAT:
          left_part = this.visit(left, parameters, optional);
          right_part = this.visit(right, parameters, optional);
          if (optional && !(left_part && right_part)) {
            return "";
          }
          return "" + left_part + right_part;
        case NodeTypes.SYMBOL:
          value = parameters[left];
          if (value != null) {
            delete parameters[left];
            return this.path_identifier(value);
          }
          if (optional) {
            return "";
          } else {
            throw new ParameterMissing("Route parameter missing: " + left);
          }
          break;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    build_path_spec: function(route, wildcard) {
      var left, right, type;

      if (wildcard == null) {
        wildcard = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return "(" + (this.build_path_spec(left)) + ")";
        case NodeTypes.CAT:
          return "" + (this.build_path_spec(left)) + (this.build_path_spec(right));
        case NodeTypes.STAR:
          return this.build_path_spec(left, true);
        case NodeTypes.SYMBOL:
          if (wildcard === true) {
            return "" + (left[0] === '*' ? '' : '*') + left;
          } else {
            return ":" + left;
          }
          break;
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
        case NodeTypes.LITERAL:
          return left;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    visit_globbing: function(route, parameters, optional) {
      var left, right, type, value;

      type = route[0], left = route[1], right = route[2];
      if (left.replace(/^\*/i, "") !== left) {
        route[1] = left = left.replace(/^\*/i, "");
      }
      value = parameters[left];
      if (value == null) {
        return this.visit(route, parameters, optional);
      }
      parameters[left] = (function() {
        switch (this.get_object_type(value)) {
          case "array":
            return value.join("/");
          default:
            return value;
        }
      }).call(this);
      return this.visit(route, parameters, optional);
    },
    get_prefix: function() {
      var prefix;

      prefix = defaults.prefix;
      if (prefix !== "") {
        prefix = (prefix.match("/$") ? prefix : "" + prefix + "/");
      }
      return prefix;
    },
    route: function(required_parts, optional_parts, route_spec) {
      var path_fn;

      path_fn = function() {
        return Utils.build_path(required_parts, optional_parts, route_spec, arguments);
      };
      path_fn.required_params = required_parts;
      path_fn.toString = function() {
        return Utils.build_path_spec(route_spec);
      };
      return path_fn;
    },
    _classToTypeCache: null,
    _classToType: function() {
      var name, _i, _len, _ref;

      if (this._classToTypeCache != null) {
        return this._classToTypeCache;
      }
      this._classToTypeCache = {};
      _ref = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        this._classToTypeCache["[object " + name + "]"] = name.toLowerCase();
      }
      return this._classToTypeCache;
    },
    get_object_type: function(obj) {
      if (root.jQuery && (root.jQuery.type != null)) {
        return root.jQuery.type(obj);
      }
      if (obj == null) {
        return "" + obj;
      }
      if (typeof obj === "object" || typeof obj === "function") {
        return this._classToType()[Object.prototype.toString.call(obj)] || "object";
      } else {
        return typeof obj;
      }
    }
  };

  createGlobalJsRoutesObject = function() {
    var namespace;

    namespace = function(mainRoot, namespaceString) {
      var current, parts;

      parts = (namespaceString ? namespaceString.split(".") : []);
      if (!parts.length) {
        return;
      }
      current = parts.shift();
      mainRoot[current] = mainRoot[current] || {};
      return namespace(mainRoot[current], parts.join("."));
    };
    namespace(root, "Routes");
    root.Routes = {
// admin_elastic_profiles => /admin/elastic_profiles(.:format)
  // function(options)
  adminElasticProfilesPath: Utils.route([], ["format"], [2,[2,[2,[2,[7,"/",false],[6,"admin",false]],[7,"/",false]],[6,"elastic_profiles",false]],[1,[2,[8,".",false],[3,"format",false]],false]], arguments),
// admin_status_report => /admin/status_reports/:plugin_id
  // function(plugin_id, options)
  adminStatusReportPath: Utils.route(["plugin_id"], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"admin",false]],[7,"/",false]],[6,"status_reports",false]],[7,"/",false]],[3,"plugin_id",false]], arguments),
// analytics => /analytics(.:format)
  // function(options)
  analyticsPath: Utils.route([], ["format"], [2,[2,[7,"/",false],[6,"analytics",false]],[1,[2,[8,".",false],[3,"format",false]],false]], arguments),
// api_internal_pluggable_task_validation => /api/config/internal/pluggable_task/:plugin_id(.:format)
  // function(plugin_id, options)
  apiInternalPluggableTaskValidationPath: Utils.route(["plugin_id"], ["format"], [2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"config",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"pluggable_task",false]],[7,"/",false]],[3,"plugin_id",false]],[1,[2,[8,".",false],[3,"format",false]],false]], arguments),
// apiv1 => /api/*url
  // function(url, options)
  apiv1Path: Utils.route(["url"], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[5,[3,"*url",false],false]], arguments),
// apiv1_admin_config_repo => /api/admin/config_repos/:id
  // function(id, options)
  apiv1AdminConfigRepoPath: Utils.route(["id"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"config_repos",false]],[7,"/",false]],[3,"id",false]], arguments),
// apiv1_admin_config_repos => /api/admin/config_repos
  // function(options)
  apiv1AdminConfigReposPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"config_repos",false]], arguments),
// apiv1_admin_encrypt => /api/admin/encrypt
  // function(options)
  apiv1AdminEncryptPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"encrypt",false]], arguments),
// apiv1_admin_internal => /api/admin/internal/[%7B:action=%3E:repository_check_connection%7D]
  // function(action, repository_check_connection, options)
  apiv1AdminInternalPath: Utils.route(["action","repository_check_connection"], [], [2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"[",false]],[6,"%7B",false]],[3,"action",false]],[6,"=",false]],[6,"%3E",false]],[3,"repository_check_connection",false]],[6,"%7D",false]],[6,"]",false]], arguments),
// apiv1_admin_internal_command_snippets => /api/admin/internal/command_snippets
  // function(options)
  apiv1AdminInternalCommandSnippetsPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"command_snippets",false]], arguments),
// apiv1_admin_internal_environments => /api/admin/internal/environments
  // function(options)
  apiv1AdminInternalEnvironmentsPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"environments",false]], arguments),
// apiv1_admin_internal_material_test => /api/admin/internal/material_test
  // function(options)
  apiv1AdminInternalMaterialTestPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"material_test",false]], arguments),
// apiv1_admin_internal_package_check_connection => /api/admin/internal/package_check_connection
  // function(options)
  apiv1AdminInternalPackageCheckConnectionPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"package_check_connection",false]], arguments),
// apiv1_admin_internal_pipelines => /api/admin/internal/pipelines
  // function(options)
  apiv1AdminInternalPipelinesPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"pipelines",false]], arguments),
// apiv1_admin_internal_repository_check_connection => /api/admin/internal/repository_check_connection
  // function(options)
  apiv1AdminInternalRepositoryCheckConnectionPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"repository_check_connection",false]], arguments),
// apiv1_admin_internal_resources => /api/admin/internal/resources
  // function(options)
  apiv1AdminInternalResourcesPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"resources",false]], arguments),
// apiv1_admin_internal_verify_connection => /api/admin/internal/security/auth_configs/verify_connection
  // function(options)
  apiv1AdminInternalVerifyConnectionPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"internal",false]],[7,"/",false]],[6,"security",false]],[7,"/",false]],[6,"auth_configs",false]],[7,"/",false]],[6,"verify_connection",false]], arguments),
// apiv1_admin_merged_environment_index => /api/admin/environments/merged
  // function(options)
  apiv1AdminMergedEnvironmentIndexPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"environments",false]],[7,"/",false]],[6,"merged",false]], arguments),
// apiv1_admin_merged_environment_show => /api/admin/environments/:environment_name/merged
  // function(environment_name, options)
  apiv1AdminMergedEnvironmentShowPath: Utils.route(["environment_name"], [], [2,[2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"environments",false]],[7,"/",false]],[3,"environment_name",false]],[7,"/",false]],[6,"merged",false]], arguments),
// apiv1_admin_package => /api/admin/packages/:package_id
  // function(package_id, options)
  apiv1AdminPackagePath: Utils.route(["package_id"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"packages",false]],[7,"/",false]],[3,"package_id",false]], arguments),
// apiv1_admin_packages => /api/admin/packages
  // function(options)
  apiv1AdminPackagesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"packages",false]], arguments),
// apiv1_admin_plugin_setting => /api/admin/plugin_settings/:plugin_id
  // function(plugin_id, options)
  apiv1AdminPluginSettingPath: Utils.route(["plugin_id"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"plugin_settings",false]],[7,"/",false]],[3,"plugin_id",false]], arguments),
// apiv1_admin_plugin_settings => /api/admin/plugin_settings
  // function(options)
  apiv1AdminPluginSettingsPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"plugin_settings",false]], arguments),
// apiv1_admin_repositories => /api/admin/repositories
  // function(options)
  apiv1AdminRepositoriesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"repositories",false]], arguments),
// apiv1_admin_repository => /api/admin/repositories/:repo_id
  // function(repo_id, options)
  apiv1AdminRepositoryPath: Utils.route(["repo_id"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"repositories",false]],[7,"/",false]],[3,"repo_id",false]], arguments),
// apiv1_admin_scm => /api/admin/scms/:material_name
  // function(material_name, options)
  apiv1AdminScmPath: Utils.route(["material_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"scms",false]],[7,"/",false]],[3,"material_name",false]], arguments),
// apiv1_admin_scms => /api/admin/scms
  // function(options)
  apiv1AdminScmsPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"scms",false]], arguments),
// apiv1_admin_security_auth_config => /api/admin/security/auth_configs/:auth_config_id
  // function(auth_config_id, options)
  apiv1AdminSecurityAuthConfigPath: Utils.route(["auth_config_id"], [], [2,[2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"security",false]],[7,"/",false]],[6,"auth_configs",false]],[7,"/",false]],[3,"auth_config_id",false]], arguments),
// apiv1_admin_security_auth_configs => /api/admin/security/auth_configs
  // function(options)
  apiv1AdminSecurityAuthConfigsPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"security",false]],[7,"/",false]],[6,"auth_configs",false]], arguments),
// apiv1_admin_security_role => /api/admin/security/roles/:role_name
  // function(role_name, options)
  apiv1AdminSecurityRolePath: Utils.route(["role_name"], [], [2,[2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"security",false]],[7,"/",false]],[6,"roles",false]],[7,"/",false]],[3,"role_name",false]], arguments),
// apiv1_admin_security_roles => /api/admin/security/roles
  // function(options)
  apiv1AdminSecurityRolesPath: Utils.route([], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"security",false]],[7,"/",false]],[6,"roles",false]], arguments),
// apiv1_admin_template => /api/admin/templates/:template_name
  // function(template_name, options)
  apiv1AdminTemplatePath: Utils.route(["template_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"templates",false]],[7,"/",false]],[3,"template_name",false]], arguments),
// apiv1_admin_templates => /api/admin/templates
  // function(options)
  apiv1AdminTemplatesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"templates",false]], arguments),
// apiv1_backups => /api/backups
  // function(options)
  apiv1BackupsPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"backups",false]], arguments),
// apiv1_current_user => /api/current_user
  // function(options)
  apiv1CurrentUserPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"current_user",false]], arguments),
// apiv1_elastic_profile => /api/elastic/profiles/:profile_id
  // function(profile_id, options)
  apiv1ElasticProfilePath: Utils.route(["profile_id"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"elastic",false]],[7,"/",false]],[6,"profiles",false]],[7,"/",false]],[3,"profile_id",false]], arguments),
// apiv1_elastic_profiles => /api/elastic/profiles
  // function(options)
  apiv1ElasticProfilesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"elastic",false]],[7,"/",false]],[6,"profiles",false]], arguments),
// apiv1_notification_filter => /api/notification_filters/:id
  // function(id, options)
  apiv1NotificationFilterPath: Utils.route(["id"], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"notification_filters",false]],[7,"/",false]],[3,"id",false]], arguments),
// apiv1_notification_filters => /api/notification_filters
  // function(options)
  apiv1NotificationFiltersPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"notification_filters",false]], arguments),
// apiv1_show_dashboard => /api/dashboard
  // function(options)
  apiv1ShowDashboardPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"dashboard",false]], arguments),
// apiv1_stage_history_api => /api/stages/:pipeline_name/:stage_name
  // function(pipeline_name, stage_name, options)
  apiv1StageHistoryApiPath: Utils.route(["pipeline_name","stage_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"stages",false]],[7,"/",false]],[3,"pipeline_name",false]],[7,"/",false]],[3,"stage_name",false]], arguments),
// apiv1_stage_instance_by_counter_api => /api/stages/:pipeline_name/:pipeline_counter/:stage_name/:stage_counter
  // function(pipeline_name, pipeline_counter, stage_name, stage_counter, options)
  apiv1StageInstanceByCounterApiPath: Utils.route(["pipeline_name","pipeline_counter","stage_name","stage_counter"], [], [2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"stages",false]],[7,"/",false]],[3,"pipeline_name",false]],[7,"/",false]],[3,"pipeline_counter",false]],[7,"/",false]],[3,"stage_name",false]],[7,"/",false]],[3,"stage_counter",false]], arguments),
// apiv1_stale_version_info => /api/version_infos/stale
  // function(options)
  apiv1StaleVersionInfoPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"version_infos",false]],[7,"/",false]],[6,"stale",false]], arguments),
// apiv1_update_server_version_info => /api/version_infos/go_server
  // function(options)
  apiv1UpdateServerVersionInfoPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"version_infos",false]],[7,"/",false]],[6,"go_server",false]], arguments),
// apiv1_user => /api/users/:login_name
  // function(login_name, options)
  apiv1UserPath: Utils.route(["login_name"], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"users",false]],[7,"/",false]],[3,"login_name",false]], arguments),
// apiv1_users => /api/users
  // function(options)
  apiv1UsersPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"users",false]], arguments),
// apiv1_v1_health => /api/v1/health
  // function(options)
  apiv1V1HealthPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"v1",false]],[7,"/",false]],[6,"health",false]], arguments),
// apiv1_version => /api/version
  // function(options)
  apiv1VersionPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"version",false]], arguments),
// apiv2 => /api/*url
  // function(url, options)
  apiv2Path: Utils.route(["url"], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[5,[3,"*url",false],false]], arguments),
// apiv2_admin_environment => /api/admin/environments/:name
  // function(name, options)
  apiv2AdminEnvironmentPath: Utils.route(["name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"environments",false]],[7,"/",false]],[3,"name",false]], arguments),
// apiv2_admin_environments => /api/admin/environments
  // function(options)
  apiv2AdminEnvironmentsPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"environments",false]], arguments),
// apiv2_show_dashboard => /api/dashboard
  // function(options)
  apiv2ShowDashboardPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"dashboard",false]], arguments),
// apiv2_user => /api/users/:login_name
  // function(login_name, options)
  apiv2UserPath: Utils.route(["login_name"], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"users",false]],[7,"/",false]],[3,"login_name",false]], arguments),
// apiv2_users => /api/users
  // function(options)
  apiv2UsersPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"users",false]], arguments),
// apiv3 => /api/*url
  // function(url, options)
  apiv3Path: Utils.route(["url"], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[5,[3,"*url",false],false]], arguments),
// apiv3_admin_pipeline => /api/admin/pipelines/:pipeline_name
  // function(pipeline_name, options)
  apiv3AdminPipelinePath: Utils.route(["pipeline_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"pipelines",false]],[7,"/",false]],[3,"pipeline_name",false]], arguments),
// apiv3_admin_pipelines => /api/admin/pipelines
  // function(options)
  apiv3AdminPipelinesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"pipelines",false]], arguments),
// apiv3_admin_plugin_info => /api/admin/plugin_info/:id
  // function(id, options)
  apiv3AdminPluginInfoPath: Utils.route(["id"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"plugin_info",false]],[7,"/",false]],[3,"id",false]], arguments),
// apiv3_admin_plugin_info_index => /api/admin/plugin_info
  // function(options)
  apiv3AdminPluginInfoIndexPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"plugin_info",false]], arguments),
// apiv3_admin_template => /api/admin/templates/:template_name
  // function(template_name, options)
  apiv3AdminTemplatePath: Utils.route(["template_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"templates",false]],[7,"/",false]],[3,"template_name",false]], arguments),
// apiv3_admin_templates => /api/admin/templates
  // function(options)
  apiv3AdminTemplatesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"templates",false]], arguments),
// apiv4 => /api/*url
  // function(url, options)
  apiv4Path: Utils.route(["url"], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[5,[3,"*url",false],false]], arguments),
// apiv4_admin_pipeline => /api/admin/pipelines/:pipeline_name
  // function(pipeline_name, options)
  apiv4AdminPipelinePath: Utils.route(["pipeline_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"pipelines",false]],[7,"/",false]],[3,"pipeline_name",false]], arguments),
// apiv4_admin_pipelines => /api/admin/pipelines
  // function(options)
  apiv4AdminPipelinesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"pipelines",false]], arguments),
// apiv4_admin_plugin_info => /api/admin/plugin_info/:id
  // function(id, options)
  apiv4AdminPluginInfoPath: Utils.route(["id"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"plugin_info",false]],[7,"/",false]],[3,"id",false]], arguments),
// apiv4_admin_plugin_info_index => /api/admin/plugin_info
  // function(options)
  apiv4AdminPluginInfoIndexPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"plugin_info",false]], arguments),
// apiv4_admin_template => /api/admin/templates/:template_name
  // function(template_name, options)
  apiv4AdminTemplatePath: Utils.route(["template_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"templates",false]],[7,"/",false]],[3,"template_name",false]], arguments),
// apiv4_admin_templates => /api/admin/templates
  // function(options)
  apiv4AdminTemplatesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"templates",false]], arguments),
// apiv4_agent => /api/agents/:uuid
  // function(uuid, options)
  apiv4AgentPath: Utils.route(["uuid"], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"agents",false]],[7,"/",false]],[3,"uuid",false]], arguments),
// apiv4_agents => /api/agents
  // function(options)
  apiv4AgentsPath: Utils.route([], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"agents",false]], arguments),
// apiv5 => /api/*url
  // function(url, options)
  apiv5Path: Utils.route(["url"], [], [2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[5,[3,"*url",false],false]], arguments),
// apiv5_admin_pipeline => /api/admin/pipelines/:pipeline_name
  // function(pipeline_name, options)
  apiv5AdminPipelinePath: Utils.route(["pipeline_name"], [], [2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"pipelines",false]],[7,"/",false]],[3,"pipeline_name",false]], arguments),
// apiv5_admin_pipelines => /api/admin/pipelines
  // function(options)
  apiv5AdminPipelinesPath: Utils.route([], [], [2,[2,[2,[2,[2,[7,"/",false],[6,"api",false]],[7,"/",false]],[6,"admin",false]],[7,"/",false]],[6,"pipelines",false]], arguments),
// dashboard_analytics => /analytics/:plugin_id/dashboard/:metric(.:format)
  // function(plugin_id, metric, options)
  dashboardAnalyticsPath: Utils.route(["plugin_id","metric"], ["format"], [2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"analytics",false]],[7,"/",false]],[3,"plugin_id",false]],[7,"/",false]],[6,"dashboard",false]],[7,"/",false]],[3,"metric",false]],[1,[2,[8,".",false],[3,"format",false]],false]], arguments),
// pipeline_analytics => /analytics/:plugin_id/pipelines/:pipeline_name(.:format)
  // function(plugin_id, pipeline_name, options)
  pipelineAnalyticsPath: Utils.route(["plugin_id","pipeline_name"], ["format"], [2,[2,[2,[2,[2,[2,[2,[2,[7,"/",false],[6,"analytics",false]],[7,"/",false]],[3,"plugin_id",false]],[7,"/",false]],[6,"pipelines",false]],[7,"/",false]],[3,"pipeline_name",false]],[1,[2,[8,".",false],[3,"format",false]],false]], arguments)}
;
    root.Routes.options = defaults;
    root.Routes.default_serializer = function(object, prefix) {
      return Utils.default_serializer(object, prefix);
    };
    return root.Routes;
  };

  if (typeof define === "function" && define.amd) {
    define([], function() {
      return createGlobalJsRoutesObject();
    });
  } else {
    createGlobalJsRoutesObject();
  }

}).call(this);
