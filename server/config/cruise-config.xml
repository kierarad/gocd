<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="111">
  <server artifactsdir="artifacts" agentAutoRegisterKey="323040d4-f2e4-4b8a-8394-7a2d122054d1" webhookSecret="3d5cd2f5-7fe7-43c0-ba34-7e01678ba8b6" commandRepositoryLocation="default" serverId="60f5f682-5248-4ba9-bb35-72c92841bd75" tokenGenerationKey="8c3c8dc9-08bf-4cd7-ac80-cecb3e7ae86c">
    <security>
      <authConfigs>
        <authConfig id="file-auth-config" pluginId="cd.go.authentication.passwordfile">
          <property>
            <key>PasswordFilePath</key>
            <value>../manual-testing/ant_hg/password.properties</value>
          </property>
        </authConfig>
        <authConfig id="GitHub" pluginId="cd.go.authorization.github">
          <property>
            <key>ClientId</key>
            <value>krnX/aDLjvrBe+BfhHgQxr6RQHUIRCA0</value>
          </property>
          <property>
            <key>ClientSecret</key>
            <value>ccrlEVHk7fSRA5lhZvHcU7YGCE70nel4e13wKnOFv134cd0IXP9R9Gqgbs0ai+lT</value>
          </property>
          <property>
            <key>PersonalAccessToken</key>
            <value>J+CLNADHvcA8dr79Ir/ceD0hPVYBeOY7s2kg43yK6N9mrEXk+jrBELy1PWi/tvJO</value>
          </property>
          <property>
            <key>AuthenticateWith</key>
            <value>GitHub</value>
          </property>
          <property>
            <key>GitHubEnterpriseUrl</key>
            <value />
          </property>
          <property>
            <key>AllowedOrganizations</key>
            <value>gocd,gocd-private</value>
          </property>
          <property>
            <key>AuthorizeUsing</key>
            <value>PersonalAccessToken</value>
          </property>
        </authConfig>
        <authConfig id="guest-user" pluginId="cd.go.contrib.authorization.guest">
          <property>
            <key>go_server_url</key>
            <value>https://build.gocd.org/go</value>
          </property>
          <property>
            <key>guest_username</key>
            <value>view</value>
          </property>
          <property>
            <key>guest_user_display_name</key>
            <value>Guest</value>
          </property>
        </authConfig>
      </authConfigs>
      <roles>
        <role name="view">
          <users>
            <user>tomzo</user>
            <user>view</user>
            <user>tinozza</user>
            <user>eeluke</user>
            <user>loudaTW</user>
            <user>jenmarley</user>
            <user>Huimin</user>
            <user>streisguth</user>
            <user>sheroy</user>
          </users>
        </role>
        <role name="go-committers">
          <users>
            <user>ankitsri11</user>
            <user>arvind</user>
            <user>bdpiparva</user>
            <user>eeluke</user>
            <user>jyotisingh</user>
            <user>ketan</user>
            <user>naveenbhaskar</user>
            <user>nyuday</user>
            <user>rajiesh</user>
            <user>rajieshn</user>
            <user>rupeshbk</user>
            <user>zabil</user>
            <user>anishvenkat</user>
          </users>
        </role>
        <role name="website-team">
          <users>
            <user>Huimin</user>
            <user>jemarley</user>
            <user>jenmarley</user>
            <user>loudaTW</user>
            <user>streisguth</user>
          </users>
        </role>
        <role name="snap-team">
          <users>
            <user>eeluke</user>
            <user>ibnc</user>
            <user>kierarad</user>
            <user>marques-work</user>
          </users>
        </role>
        <role name="enterprise-plugin">
          <users>
            <user>script-view-user</user>
          </users>
        </role>
        <role name="golang_goagent_demo">
          <users>
            <user>tomzo</user>
          </users>
        </role>
        <pluginRole name="super-admins" authConfigId="GitHub">
          <property>
            <key>Organizations</key>
            <value />
          </property>
          <property>
            <key>Teams</key>
            <value>gocd: superadmins, committers, godev</value>
          </property>
          <property>
            <key>Users</key>
            <value>barrowkwan</value>
          </property>
        </pluginRole>
        <pluginRole name="web-team" authConfigId="GitHub">
          <property>
            <key>Organizations</key>
            <value />
          </property>
          <property>
            <key>Teams</key>
            <value>gocd:Web Team</value>
          </property>
          <property>
            <key>Users</key>
            <value />
          </property>
        </pluginRole>
      </roles>
      <admins>
        <role>super-admins</role>
        <user>backup-admin</user>
        <user>admin</user>
        <user>kpadegao</user>
        <role>snap-team</role>
      </admins>
    </security>
    <mailhost hostname="aspmx.l.google.com" port="25" tls="false" from="go-in@thoughtworks.com" admin="go-in@thoughtworks.com" />
  </server>
  <elastic jobStarvationTimeout="3">
    <profiles>
      <profile id="docker-gocd-dev-build" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.27</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>4GB</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org
10.38.1.5 fmtsd01.thoughtworks.com</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="docker-gocd-regression-tests" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.9</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>6GB</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org
10.38.1.5 fmtsd01.thoughtworks.com</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="openstack-analytics-staging" pluginId="cd.go.contrib.elastic-agent.openstack">
        <property>
          <key>openstack_image_id</key>
          <value>242aabbf-044e-46fc-8e67-faa325e399c5</value>
        </property>
        <property>
          <key>openstack_flavor_id</key>
          <value>b385489f-e813-4e13-b378-8d3ef3c7b1ce</value>
        </property>
        <property>
          <key>openstack_network_id</key>
          <value>06271f6f-b77f-4e38-9c82-72aab97340af</value>
        </property>
        <property>
          <key>openstack_userdata</key>
          <value>#!/bin/bash
              echo "$(/sbin/ifconfig | /bin/grep -A 1 'eth0' | /usr/bin/tail -1 | /bin/awk {' print $2'}) $HOSTNAME.thoughtworks.com" $HOSTNAME &gt;&gt; /etc/hosts
              echo "172.16.38.136 build.go.cd build.gocd.org" &gt;&gt; /etc/hosts
              hostname "$HOSTNAME.thoughtworks.com"
              echo "10.38.19.97    studiosgit.thoughtworks.com studiosgit" &gt;&gt; /etc/hosts
              /bin/mkdir /var/lib/go/.ssh
              /bin/chmod 700 /var/lib/go/.ssh
              /bin/cat &lt;&lt;EOF &gt; /var/lib/go/.ssh/id_rsa
              -----BEGIN RSA PRIVATE KEY-----
              MIIEpQIBAAKCAQEA49hJ7EPLhLelUPqcak1BHOibvHoCBEkkIHe8HsDGJjQ4ridP
              5fQtMFcHdMda9N2Eihm9I+uWAtHEucy5ZZQL9AwULp2l2Xz8fiNDDc9kFlKaelH2
              0dSVL4uNcH4n5p1b2JsUsD1Lrf/RolVL9wf/AkgYQ5CPlOlNQByhV1lpLQlxhHby
              GnY1MmME3vuGHKcV3kx1dYMaL0pgoGrk9KOWz/gTkTElsdYlUn1nTNPtX0QtSa/b
              /6ehuDJITu+7EayoN9/DOiUGjKxIF01LEUusvL0wC1k2APBMjm0cciwGtDo8aG3C
              hzYcYRd2WRxr7QYV6ebV8dP4oS80H5jwb6exCwIDAQABAoIBAQDBxVhZDu8u1+BI
              llogLcOKimioSjsc2fdXhXz/yoK6Sv9JXTWeI6Oq0NkOf9zjEuF9cZZhziGuFChy
              u6GQue/QhdVEL960sI8r12FXhWFheq7WCI8YtOqLnOuVGDVm870A4iMeH4MVX9Mx
              c8k/NhWyIw4/p9n0ktWYCMFOQEQqf5q3qBpAB5eAX3QcNojCJVFLAD1dGwKOeAai
              p0XujJbtnOpeH6TzUk9+1IRZYstsZRCyoWM51J9wKBaNlSV5EWUuo2FTn41wenJp
              hUI/WwkmWTztXBB08KC35L9qcqYxUk2zEhptLVcCqqSD8FsQ69HnJ16JfCPS1Q89
              A1+e+9cBAoGBAPGjAAZ4PU2sneT4hXLkXpAWinBVcqseP/AEZWxODO7BPi7sBJvM
              g7bM7BI/lGnjgJnjttvXw8nS3X9nr25WD846fX12ye+dNq95CsMP1DTN23Qn34TZ
              sPE7RF4VvBCnH9AEgFkB5W5hjsdARglCUORgnTbLITNkxsBurtgIZJ6bAoGBAPFj
              atwEP6F8xbqKqTNnsVbbHYM1Vm8YtWOpvJqc4FdRxHnHHeZxI4hZFpcqPlo5Efcp
              VZtjH4LF9BQqxVaNSGub0wFZYVTQMK/JLd0MZG60MIlCyVPkCVpUkSzRt4ACVbJw
              DdUcxxalnLasRXgVRbvnKhGR8ZRVY+w9omwF+6ZRAoGBAKm5lV31/RFfCvT2vz2J
              PQa2Xn0y971MHRro65icZicZ4ySwMTiB+Y5f9/2FXSjXXNA7C4j10BcmHuDLooS8
              vJNdsCF9W7AL3Ip6Wd3Tc3m3ksrO6wh0o/19ZLM1TwjfatABKWnblBzpN5GrCsac
              JxeS6TrAiUyBH72wwO0LUCm7AoGBAMeEbfnHBTUcJW7HV40movzwhVdDCdsv6BWl
              YT/GdOOXsTcarosfbsgvIq31e64lR8UsBBc4ef4kUlcs9wlQI9DV7jVKRFnO7r8N
              IPx5VrXt98QsUK4naNeh2JDcErkatOyVE8nXTHNalcqjX5QeuRHTwwDcyXnajong
              c9SnqVXRAoGARmEaoV1AljKq3EhbbxrvKtxKoxqJYIDjpouQVKVCzpulSA04ATg1
              1DHO/HX21IOKCZcKu1PtXXau0d20Pd49TwMlFP3p6mHEhBRGvsibGFKbBJt0B4Ow
              GUkjyvujk31543wj3JUrRY0XQW6erlAoS2f+RVjo5LjDkyw2vpn+o5g=
              -----END RSA PRIVATE KEY-----
              EOF
              /bin/chmod 400 /var/lib/go/.ssh/id_rsa
              /bin/cat &lt;&lt;EOF &gt; /var/lib/go/.ssh/known_hosts
              studiosgit.thoughtworks.com,10.38.19.97 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBR6cpPvE+P7hP1IhVE6JlN+D557Ggq4+rAK/c39ifmRHKbaIguIvB4vmSQfvNIPhznuOd32+6YO1U7fn/33Xcg=
              EOF
              /bin/chown -R go:go /var/lib/go/.ssh
              # comment</value>
        </property>
        <property>
          <key>openstack_security_group</key>
          <value>studios_techops</value>
        </property>
        <property>
          <key>openstack_keypair</key>
          <value>gocd-analytics</value>
        </property>
      </profile>
      <profile id="gocd-private-plugin" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-7-v2.0.27</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>2GB</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="docker-gocd-plugin-builds" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.27</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>2G</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>1G</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="centos-7-docker" pluginId="cd.go.contrib.elastic-agent.openstack">
        <property>
          <key>openstack_image_id</key>
          <value>gocd_elastic_docker_centos_7</value>
        </property>
        <property>
          <key>openstack_flavor_id</key>
          <value>831f72e8-6622-4ec5-b8d3-530d57528a2a</value>
        </property>
        <property>
          <key>openstack_network_id</key>
          <value>06271f6f-b77f-4e38-9c82-72aab97340af</value>
        </property>
        <property>
          <key>openstack_security_group</key>
          <value />
        </property>
        <property>
          <key>openstack_keypair</key>
          <value />
        </property>
        <property>
          <key>openstack_userdata</key>
          <value>#!/bin/bash

              echo "$(/sbin/ifconfig | /bin/grep -A 1 'eth0' | /usr/bin/tail -1 | /bin/awk {' print $2'}) $HOSTNAME-os.thoughtworks.com" $HOSTNAME-os &gt;&gt; /etc/hosts

              echo "172.16.38.136 build.go.cd build.gocd.org" &gt;&gt; /etc/hosts
              echo "172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org" &gt;&gt; /etc/hosts

              hostname "$HOSTNAME-os.thoughtworks.com"

              # setup gradle mirrors
              mkdir -p /var/go/.gradle
              wget https://raw.githubusercontent.com/gocd-contrib/gocd-oss-cookbooks/master/custom-cookbooks/go-user/files/default/init.gradle -O - &gt; /var/go/.gradle/init.gradle

              chown -R go:go /var/lib/go-agent /var/go

              echo "go ALL=(ALL) NOPASSWD: /usr/bin/docker" &gt;&gt; /etc/sudoers.d/go_docker
              echo "go ALL=(ALL) NOPASSWD: /bin/chown" &gt;&gt; /etc/sudoers.d/go_user
              echo "go ALL=(ALL) NOPASSWD: /bin/rm" &gt;&gt; /etc/sudoers.d/go_user
              echo "Defaults !requiretty" &gt;&gt; /etc/sudoers.d/go_user

              yum install -y epel-release
              yum install -y awscli
              yum install -y jq 
              yum install -y rubygem-rake rubygem-bundler ruby-devel gcc-c++

              # Use the ruby gems proxy
              mkdir -p /var/go/.bundle
              echo "BUNDLE_MIRROR__HTTPS://RUBYGEMS__ORG/: "https://maven-mirrors.gocd.org/repository/rubygems.org-proxy/" &gt;&gt; /var/go/.bundle/config
              chown -R go:go /var/go/.bundle

              # disable live-restore to enable swarm support
              echo '{"live-restore": false}' &gt; /etc/docker/daemon.json
              service docker restart

              # comment</value>
        </property>
      </profile>
      <profile id="private-backup" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.27</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>2GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>2GB</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific
              META=empty-comment-to-ensure-that-this-is-only-used-for-backups</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-gocd-dev-build" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.27</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
        <property>
          <key>CPU</key>
          <value>1600</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-enterprise-addon-high-memory" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-7-v2.0.27</value>
        </property>
        <property>
          <key>Command</key>
          <value>bash
-lc
 /usr/pgsql-9.6/bin/initdb /go/.pg-data;/usr/pgsql-9.6/bin/pg_ctl start -l /go/.pg-data/log -D /go/.pg-data -w -t 60;exec /bootstrap.sh</value>
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>5g</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>4g</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
        <property>
          <key>CPU</key>
          <value>0</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-enterprise-postgres-build" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-7-v2.0.27</value>
        </property>
        <property>
          <key>Command</key>
          <value>bash
-lc
 /usr/pgsql-9.6/bin/initdb ~/.pg-data;/usr/pgsql-9.6/bin/pg_ctl start -l ~/.pg-data/log -D ~/.pg-data -w -t 60;exec /bootstrap.sh</value>
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>4096m</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>4096m</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
        <property>
          <key>CPU</key>
          <value>0</value>
        </property>
      </profile>
      <profile id="docker-gocd-dev-build-windows" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build-windows:v2.0.12</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="k8s-gocd-dev-build" pluginId="cd.go.contrib.elasticagent.kubernetes">
        <property>
          <key>Image</key>
          <value>us.gcr.io/studios-gcp-gocd/gocd-docs-build:v0.1.0</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value />
        </property>
        <property>
          <key>MaxCPU</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value />
        </property>
        <property>
          <key>PodConfiguration</key>
          <value>apiVersion: v1
kind: Pod
metadata:
  name: pod-name-prefix-{{ POD_POSTFIX }}
  labels:
    app: web
spec:
  containers:
    - name: gocd-agent-container-{{ CONTAINER_POSTFIX }}
      image: {{ GOCD_AGENT_IMAGE }}:{{ LATEST_VERSION }}</value>
        </property>
        <property>
          <key>SpecifiedUsingPodConfiguration</key>
          <value>false</value>
        </property>
      </profile>
      <profile id="docker-gocd-OOM-tests-centos7" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/bdpiprava/gocd-dev-build</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>8GB</value>
        </property>
        <property>
          <key>Command</key>
          <value>bash
-lc
 /usr/pgsql-9.6/bin/initdb /go/.pg-data;/usr/pgsql-9.6/bin/pg_ctl start -l /go/.pg-data/log -D /go/.pg-data -w -t 60;exec /bootstrap.sh</value>
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific
PATH=/opt/local/firefox/firefox-56.0.2:/opt/rh/rh-ruby23/root/usr/local/bin:/opt/rh/rh-ruby23/root/usr/bin:/opt/rh/devtoolset-6/root/usr/bin:/usr/lib64/qt-3.3/bin:/usr/local/maven-3.5.0/bin:/opt/local/awscli/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/pgsql-9.6/bin:/opt/rh/devtoolset-6/root/usr/bin:/opt/rh/rh-ruby23/root/usr/local/bin</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="open_stack_6a0861e6-d43b-445d-bf7c-09530250df54" pluginId="cd.go.contrib.elastic-agent.openstack">
        <property>
          <key>openstack_image_id</key>
          <value>ab87a9e2-7760-4e53-b82d-a13365452824</value>
        </property>
        <property>
          <key>openstack_flavor_id</key>
          <value>8e346b74-da79-43ae-a1f9-84da3f51fbed</value>
        </property>
        <property>
          <key>openstack_network_id</key>
          <value>43e504e6-1ba1-46f6-8d8d-5a39c7d5c3aa</value>
        </property>
        <property>
          <key>openstack_security_group</key>
          <value>e080c383-c0b2-4835-af71-d80de30089d5</value>
        </property>
        <property>
          <key>openstack_keypair</key>
          <value>luau-elasticagent</value>
        </property>
        <property>
          <key>openstack_userdata</key>
          <value>#!/bin/bash
echo "$(ifconfig | grep -A 1 'eth0' |tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1) fmtstdgorestoretest01.thoughtworks.com fmtstdgorestoretest01" $HOSTNAME &gt;&gt; /etc/hosts
echo "172.16.38.103 mirrors.gocd.org" &gt;&gt; /etc/hosts
echo "nameserver 8.8.8.8" &gt;&gt; /etc/resolv.conf
echo "go ALL=(ALL) NOPASSWD: ALL" &gt;&gt; /etc/sudoers
sed -i "s/^.*requiretty/#Defaults requiretty/" /etc/sudoers
hostname "fmtstdgorestoretest01.thoughtworks.com"
rpm -Uvh http://yum.postgresql.org/9.4/redhat/rhel-6-x86_64/pgdg-centos94-9.4-2.noarch.rpm
yum update --assumeyes
yum install --assumeyes postgresql94-server postgresql94-contrib
sudo -H -u postgres bash -c '/usr/pgsql-9.4/bin/initdb -D /var/lib/pgsql/9.4/data'
sudo -H -u postgres bash -c '/usr/pgsql-9.4/bin/pg_ctl -D /var/lib/pgsql/9.4/data start'
sudo -H -u postgres bash -c 'sed -i 's/peer/md5/g' /var/lib/pgsql/9.4/data/pg_hba.conf'
sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
sudo -H -u postgres bash -c '/usr/pgsql-9.4/bin/pg_ctl -D /var/lib/pgsql/9.4/data restart'</value>
        </property>
      </profile>
      <profile id="backup-encryption" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocdcontrib/backup-encryption-agent-centos7:latest</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=PST</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>4GB</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org
10.38.1.5 fmtsd01.thoughtworks.com
192.168.206.33 go05.thoughtworks.com</value>
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="docker-gocd-OOM-tests-centos7-ff-old" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-7-v2.0.27</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>4GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="docker-gocd-signing-secret" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.27</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>3GB</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org
10.38.1.5 fmtsd01.thoughtworks.com</value>
        </property>
        <property>
          <key>Secrets</key>
          <value>src=nexus-and-codesign-gradle-properties, target=/go/.gradle/gradle.properties, uid=500, gid=500, mode=0640
src=gpg-signing-key-8816C449, target=/go/.gnupg/secring.gpg, uid=500, gid=500, mode=0640</value>
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-docker-in-docker" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/bdpiprava/gocd-agent-dind:0.0.1</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>3g</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>3g</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
        <property>
          <key>CPU</key>
          <value>1600</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value>true</value>
        </property>
      </profile>
      <profile id="ecs-gocd-dev-build-highmem" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.27</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>13g</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>13g</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
        <property>
          <key>CPU</key>
          <value>8190</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value />
        </property>
      </profile>
      <profile id="docker-enterprise-regression-tests-oldff" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.9</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>6GB</value>
        </property>
        <property>
          <key>Command</key>
          <value>bash
-lc
 /usr/pgsql-9.6/bin/initdb /go/.pg-data;/usr/pgsql-9.6/bin/pg_ctl start -l /go/.pg-data/log -D /go/.pg-data -w -t 60;exec /bootstrap.sh</value>
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-gocd-dev-build-5gb-mem" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.27</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
        <property>
          <key>CPU</key>
          <value>1600</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-gocd-regression-tests" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.9</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>6G</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5G</value>
        </property>
        <property>
          <key>CPU</key>
          <value>0</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value />
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-gocd-OOM-tests-centos7" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/bdpiprava/gocd-dev-build</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific
PATH=/opt/local/firefox/firefox-56.0.2:/opt/rh/rh-ruby23/root/usr/local/bin:/opt/rh/rh-ruby23/root/usr/bin:/opt/rh/devtoolset-6/root/usr/bin:/usr/lib64/qt-3.3/bin:/usr/local/maven-3.5.0/bin:/opt/local/awscli/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/pgsql-9.6/bin:/opt/rh/devtoolset-6/root/usr/bin:/opt/rh/rh-ruby23/root/usr/local/bin</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>8G</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5G</value>
        </property>
        <property>
          <key>CPU</key>
          <value>0</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value />
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-enterprise-regression-tests-oldff" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:centos-6-v2.0.9</value>
        </property>
        <property>
          <key>Command</key>
          <value>bash
-lc
 /usr/pgsql-9.6/bin/initdb ~/.pg-data;/usr/pgsql-9.6/bin/pg_ctl start -l ~/.pg-data/log -D ~/.pg-data -w -t 60;exec /bootstrap.sh</value>
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>6G</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5G</value>
        </property>
        <property>
          <key>CPU</key>
          <value>0</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value />
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
      </profile>
      <profile id="ecs-dind-gocd-agent" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocd/gocd-agent-docker-dind:v18.2.0</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>3G</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>3G</value>
        </property>
        <property>
          <key>CPU</key>
          <value>1600</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value>true</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
      </profile>
      <profile id="extenstions-app" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/gocddev/gocd-dev-build:dind-awscli-v2.0.29</value>
        </property>
        <property>
          <key>Command</key>
          <value />
        </property>
        <property>
          <key>Environment</key>
          <value />
        </property>
        <property>
          <key>MaxMemory</key>
          <value>1G</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>1G</value>
        </property>
        <property>
          <key>CPU</key>
          <value>1600</value>
        </property>
        <property>
          <key>MountDockerSocket</key>
          <value />
        </property>
        <property>
          <key>Privileged</key>
          <value>true</value>
        </property>
        <property>
          <key>AMI</key>
          <value />
        </property>
        <property>
          <key>InstanceType</key>
          <value />
        </property>
        <property>
          <key>SubnetIds</key>
          <value />
        </property>
        <property>
          <key>SecurityGroupIds</key>
          <value />
        </property>
        <property>
          <key>IAMInstanceProfile</key>
          <value />
        </property>
      </profile>
      <profile id="docker-enterprise-regression-tests-latestff" pluginId="cd.go.contrib.elastic-agent.docker-swarm">
        <property>
          <key>Image</key>
          <value>docker.gocd.org/bdpiprava/gocd-dev-build</value>
        </property>
        <property>
          <key>ReservedMemory</key>
          <value>5GB</value>
        </property>
        <property>
          <key>MaxMemory</key>
          <value>8GB</value>
        </property>
        <property>
          <key>Command</key>
          <value>bash
-lc
 /usr/pgsql-9.6/bin/initdb /go/.pg-data;/usr/pgsql-9.6/bin/pg_ctl start -l /go/.pg-data/log -D /go/.pg-data -w -t 60;exec /bootstrap.sh</value>
        </property>
        <property>
          <key>Environment</key>
          <value>TZ=US/Pacific
PATH=/opt/local/firefox/firefox-56.0.2:/opt/rh/rh-ruby23/root/usr/local/bin:/opt/rh/rh-ruby23/root/usr/bin:/opt/rh/devtoolset-6/root/usr/bin:/usr/lib64/qt-3.3/bin:/usr/local/maven-3.5.0/bin:/opt/local/awscli/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/pgsql-9.6/bin:/opt/rh/devtoolset-6/root/usr/bin:/opt/rh/rh-ruby23/root/usr/local/bin</value>
        </property>
        <property>
          <key>Hosts</key>
          <value>172.16.38.103 mirrors.gocd.org old-download.gocd.org maven-mirrors.gocd.org
172.16.38.136 build.gocd.org</value>
        </property>
        <property>
          <key>Secrets</key>
          <value />
        </property>
        <property>
          <key>Networks</key>
          <value />
        </property>
        <property>
          <key>Mounts</key>
          <value />
        </property>
        <property>
          <key>Constraints</key>
          <value />
        </property>
      </profile>
    </profiles>
  </elastic>
  <scms>
    <scm id="c0758880-10f7-4f38-a0b0-f3dc31e5d907" name="gocd">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/gocd</value>
        </property>
      </configuration>
    </scm>
    <scm id="d205fef6-e2e9-4d63-a891-9e2fa316695d" name="cookbook">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/go-cookbook</value>
        </property>
      </configuration>
    </scm>
    <scm id="3b2d3937-07f2-42b6-833d-d80529c5c7dc" name="gocd-analytics-plugin">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-private/gocd-analytics-plugin</value>
        </property>
        <property>
          <key>username</key>
          <value>gocd</value>
        </property>
        <property>
          <key>password</key>
          <value>avLB3QtIrCn0NQWMcSfXGQ==</value>
        </property>
      </configuration>
    </scm>
    <scm id="74d369df-897a-41e0-b7d6-a3189eab1b09" name="ldap-authorization-plugin">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-private/ldap-authorization-plugin</value>
        </property>
        <property>
          <key>username</key>
          <value>gocd</value>
        </property>
        <property>
          <key>password</key>
          <value>avLB3QtIrCn0NQWMcSfXGQ==</value>
        </property>
      </configuration>
    </scm>
    <scm id="6d69706f-756b-4b17-81b6-b8e3bb095f8f" name="mirrors-api.go.cd">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/api.go.cd</value>
        </property>
      </configuration>
    </scm>
    <scm id="4c49e8f9-ff7b-4623-a9f9-231fb4fc6944" name="mirror.plugin-api.go.cd">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/plugin-api.go.cd</value>
        </property>
      </configuration>
    </scm>
    <scm id="df6b888d-ffd0-4180-a2bd-c4360e3d8728" name="mirror.developer.go.cd">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/developer.go.cd</value>
        </property>
        <property>
          <key>username</key>
          <value />
        </property>
        <property>
          <key>password</key>
          <value />
        </property>
        <property>
          <key>defaultBranch</key>
          <value />
        </property>
      </configuration>
    </scm>
    <scm id="4b2cfb9e-95ed-4b39-9ac0-cf007f6c7c41" name="mirror.docs.go.cd">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/docs.go.cd</value>
        </property>
        <property>
          <key>username</key>
          <value />
        </property>
        <property>
          <key>password</key>
          <value />
        </property>
        <property>
          <key>defaultBranch</key>
          <value />
        </property>
      </configuration>
    </scm>
    <scm id="fdd93f34-1d1d-4898-843a-b99ba4d10f4d" name="mirror.www.go.cd">
      <pluginConfiguration id="github.pr" version="1.3.3" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/www.go.cd</value>
        </property>
      </configuration>
    </scm>
    <scm id="76c7fc5b-a59d-435b-bb88-decb1e2b269f" name="docker-elastic-agents">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-contrib/docker-elastic-agents</value>
        </property>
        <property>
          <key>username</key>
          <value>gocd</value>
        </property>
        <property>
          <key>password</key>
          <value>bIIxDbfxfPG1KJ2QjtcHcw==</value>
        </property>
      </configuration>
    </scm>
    <scm id="0fd48290-a8f3-43b7-b878-a038fc99cf36" name="gocd-ldap-authentication-plugin">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/gocd-ldap-authentication-plugin</value>
        </property>
        <property>
          <key>username</key>
          <value>gocd</value>
        </property>
        <property>
          <key>password</key>
          <value>bIIxDbfxfPG1KJ2QjtcHcw==</value>
        </property>
      </configuration>
    </scm>
    <scm id="0ba12c0f-a8f8-4c1a-a5eb-0bbdde988d38" name="filebased-authentication-plugin">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd/gocd-filebased-authentication-plugin</value>
        </property>
      </configuration>
    </scm>
    <scm id="5f77a507-d0e8-4a04-a64a-4ba298f445e3" name="google-oauth-authorization-plugin">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-contrib/google-oauth-authorization-plugin</value>
        </property>
      </configuration>
    </scm>
    <scm id="def0f5bf-362d-472a-a8d4-8afea01522dc" name="docker-swarm-elastic-agents">
      <pluginConfiguration id="github.pr" version="" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-contrib/docker-swarm-elastic-agents</value>
        </property>
        <property>
          <key>username</key>
          <value>gocd</value>
        </property>
        <property>
          <key>password</key>
          <value>bIIxDbfxfPG1KJ2QjtcHcw==</value>
        </property>
      </configuration>
    </scm>
    <scm id="3c50f1cd-83f4-4b84-80e9-f9751bafb57c" name="gitlab-oauth-authorization-plugin">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-contrib/gitlab-oauth-authorization-plugin</value>
        </property>
      </configuration>
    </scm>
    <scm id="1c265067-d271-4cfe-81ae-dd2cf2eb3b2d" name="github-oauth-authorization-plugin">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-contrib/github-oauth-authorization-plugin</value>
        </property>
      </configuration>
    </scm>
    <scm id="a47f0660-78c4-4141-8da4-5b8c5c54ada5" name="www.go.cd">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/gocd/www.go.cd</value>
        </property>
      </configuration>
    </scm>
    <scm id="3c50f1cd-83f4-4b84-80e9-f9751bafb59d" name="kubernetes-elastic-agents">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/gocd/kubernetes-elastic-agents</value>
        </property>
      </configuration>
    </scm>
    <scm id="d20198b9-a63b-4951-b096-ea9e94f39e4f" name="ecs-elastic-agent-plugin">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://mirrors.gocd.org/git/gocd-private/ecs-elastic-agent-plugin</value>
        </property>
        <property>
          <key>username</key>
          <value>gocd</value>
        </property>
        <property>
          <key>password</key>
          <value>avLB3QtIrCn0NQWMcSfXGQ==</value>
        </property>
      </configuration>
    </scm>
  </scms>
  <pipelines group="go-cd">
    <authorization>
      <view>
        <user>tomzo</user>
        <user>view</user>
        <user>ibnc</user>
        <role>go-committers</role>
        <role>snap-team</role>
        <role>view</role>
      </view>
      <operate>
        <user>tomzo</user>
        <role>go-committers</role>
        <role>snap-team</role>
      </operate>
      <admins>
        <user>ibnc</user>
      </admins>
    </authorization>
    <pipeline name="build-linux" lockBehavior="none" template="build-gradle-linux">
      <params>
        <param name="OS">linux</param>
        <param name="BROWSER">firefox</param>
      </params>
      <trackingtool link="https://github.com/gocd/gocd/issues/${ID}" regex="##(\d+)" />
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="build-windows" lockBehavior="none" template="build-gradle-windows">
      <params>
        <param name="OS">windows</param>
        <param name="BROWSER">ie9</param>
      </params>
      <trackingtool link="https://github.com/gocd/gocd/issues/${ID}" regex="##(\d+)" />
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugins" lockBehavior="none" template="plugins-gradle">
      <trackingtool link="https://github.com/gocd/gocd/issues/${ID}" regex="##(\d+)" />
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/go-plugins" shallowClone="true" dest="go-plugins" materialName="go-plugins" />
        <git url="https://mirrors.gocd.org/git/gocd/gocd" dest="gocd" materialName="gocd">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="build-linux" stageName="build-server" materialName="linux" />
        <pipeline pipelineName="build-windows" stageName="build-server" materialName="windows" />
      </materials>
    </pipeline>
    <pipeline name="installers" lockBehavior="none" template="installers-gradle">
      <params>
        <param name="plugins-pipeline-name">plugins</param>
      </params>
      <trackingtool link="https://github.com/gocd/gocd/issues/${ID}" regex="##(\d+)" />
      <environmentvariables>
        <variable name="UPDATE_GOCD_BUILD_MAP">
          <value>Y</value>
        </variable>
        <variable name="BUILD_MAP_USER">
          <value>gocd-ci-user</value>
        </variable>
        <variable name="WINDOWS_64BIT_JRE_URL">
          <value>https://maven-mirrors.gocd.org/repository/s3-mirrors/local/jre/windows/jre-8u102-windows-x64.tar.gz</value>
        </variable>
        <variable name="WINDOWS_32BIT_JRE_URL">
          <value>https://maven-mirrors.gocd.org/repository/s3-mirrors/local/jre/windows/jre-8u102-windows-i586.tar.gz</value>
        </variable>
        <variable name="BUMP_COMMAND_REPO_VERSION">
          <value />
        </variable>
        <variable name="COMMAND_REPO_USER" secure="true">
          <encryptedValue>AES:CSi1ZL5l0kRjSQzxsE9SnA==:mrTzMR8hB8R3542ItFdC6jJN+gGZ6jppSwD7oeFf53A=</encryptedValue>
        </variable>
        <variable name="COMMAND_REPO_PASSWORD" secure="true">
          <encryptedValue>AES:a62RTmsIyYaB+EfkGNO2fQ==:TP4mWfB5/G8poEFT1/P+2BJq9IHll+5+s4cOaKc/v0hqWPVJns/pawYHILMmJyeXYZvyJrkgMrcoDSO6vayr7jOISLXjSKnwDfR8+rzte5M=</encryptedValue>
        </variable>
        <variable name="BUILD_MAP_PASSWORD" secure="true">
          <encryptedValue>AES:uirnsVnOQu+kjCF8jeZ1cQ==:b5DZ6g4BT6V+gbRB/TMirdNt8MXMyEzoKTmz4+K+iE1vZ0/aKzJMGpdf3P92f/D99wO7A5cRDv1x7ViOd/oTgOdx74RwNSFmuS2vZ2cNlq4=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd" materialName="gocd" />
        <pipeline pipelineName="plugins" stageName="build" materialName="go-plugins" />
      </materials>
    </pipeline>
    <pipeline name="smoke" template="smoke-gradle">
      <params>
        <param name="installers-pipeline-name">installers</param>
        <param name="plugins-pipeline-name">plugins/installers</param>
        <param name="sahi-working-dir">sahi-tests</param>
        <param name="selenium-working-dir">selenium-tests</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true" dest="#{sahi-working-dir}">
          <filter>
            <ignore pattern="*.md" />
          </filter>
        </git>
        <pipeline pipelineName="installers" stageName="dist" materialName="installers" />
        <git url="https://mirrors.gocd.org/git/gocd/ruby-functional-tests" dest="#{selenium-working-dir}" materialName="ruby-functional-tests">
          <filter>
            <ignore pattern="*.md" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="acceptance-linux" template="acceptance-linux-gradle">
      <params>
        <param name="installers-pipeline-name">installers</param>
        <param name="plugins-pipeline-name">plugins/installers</param>
        <param name="tags">!windows,!server_restart_needed,!flaky_fanin_test,!stage1,!plugins-tests,!enterprise,!SPA,!pipeline_config,!smoke</param>
        <param name="priority_tags">!manual,!windows,!server_restart_needed,!flaky_fanin_test,stage1,!enterprise,!SPA,!pipeline_config,!OOM,!vulnerability_tests</param>
        <param name="plugin_tags">!manual,!windows,!server_restart_needed,!flaky_fanin_test,!stage1,plugins-tests,!enterprise,!SPA,!pipeline_config</param>
        <param name="OOM_tags">!manual,stage1,OOM</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true">
          <filter>
            <ignore pattern="*.md" />
          </filter>
        </git>
        <pipeline pipelineName="installers" stageName="dist" materialName="installers" />
      </materials>
    </pipeline>
    <pipeline name="regression" template="regression-gradle">
      <params>
        <param name="plugins-pipeline-name">plugins/installers/acceptance-linux</param>
        <param name="installers-pipeline-name">installers/acceptance-linux</param>
        <param name="tags">!manual,!tfs,!ldap,!windows,!server_restart_needed,!flaky_fanin_test,!stage1,!plugins-tests,!enterprise,!SPA,!pipeline_config,!vulnerability_tests,!fanin,!long_running,!OOM,!smoke,!ignore,!oAuth</param>
        <param name="fanin">!manual,!long_running,!OOM,!plugins-tests,fanin</param>
        <param name="long_running">!manual,!fanin,!OOM,long_running</param>
        <param name="OOM_tags">!manual,!fanin,!long_running,!stage1,OOM</param>
        <param name="API-tags">!manual,pipeline_config</param>
        <param name="server-restart-tags">server_restart_needed</param>
        <param name="fanin-with-rpm-package">!manual,!long_running,!OOM,fanin,plugins-tests</param>
        <param name="build-command-tags">buildcommand,!manual</param>
        <param name="oAuth-tags">!manual,!windows,oAuth</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true" />
        <pipeline pipelineName="smoke" stageName="Smoke" materialName="smoke" />
        <pipeline pipelineName="acceptance-linux" stageName="RunAcceptanceSpecs-plugins" materialName="acceptance-linux" />
      </materials>
    </pipeline>
    <pipeline name="regression-SPAs" template="regression-ruby-webdriver">
      <params>
        <param name="installers-pipeline-name">installers/acceptance-linux</param>
        <param name="plugins-pipeline-name">plugins/installers/acceptance-linux</param>
        <param name="spa_tags">SPA</param>
        <param name="regression_tags">!SPA,!smoke,!agent_manual_registration,!bundled-auth-plugins,!analytics,!pipeline_selector</param>
        <param name="bundled_auth_plugins">bundled-auth-plugins</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="browser">
          <value>firefox</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgo.security.reauthentication.enabled=true -Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/ruby-functional-tests" shallowClone="true" />
        <pipeline pipelineName="smoke" stageName="Smoke" materialName="Smoke" />
        <pipeline pipelineName="acceptance-linux" stageName="RunAcceptanceSpecs-plugins" materialName="acceptance" />
      </materials>
    </pipeline>
    <pipeline name="UploadInstallers">
      <params>
        <param name="SSH_OR_ECHO_COMMAND">ssh</param>
      </params>
      <trackingtool link="https://github.com/gocd/gocd/issues/${ID}" regex="##(\d+)" />
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd" shallowClone="true" />
        <pipeline pipelineName="installers" stageName="dist" materialName="installers" />
        <pipeline pipelineName="regression" stageName="regression-linux" materialName="regression" />
        <pipeline pipelineName="regression-SPAs" stageName="Firefox" materialName="regression-SPAs" />
      </materials>
      <stage name="UploadInstallers">
        <jobs>
          <job name="UploadInstallers">
            <environmentvariables>
              <variable name="ARTIFACT_SUFFIX">
                <value>-experimental</value>
              </variable>
              <variable name="AUTO_RELEASE_TO_CENTRAL">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export INSTALLER_JOB_IDENTIFIER=${GO_DEPENDENCY_LOCATOR_INSTALLERS}/dist; #{SSH_OR_ECHO_COMMAND} -oSendEnv=INSTALLER_JOB_IDENTIFIER uploader@192.168.184.31 create-signed-binaries</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>#{SSH_OR_ECHO_COMMAND} uploader@192.168.184.31 create-repositories</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export INSTALLER_JOB_IDENTIFIER=${GO_DEPENDENCY_LOCATOR_INSTALLERS}/dist; #{SSH_OR_ECHO_COMMAND} -oSendEnv=INSTALLER_JOB_IDENTIFIER -oSendEnv=ARTIFACT_SUFFIX -oSendEnv=AUTO_RELEASE_TO_CENTRAL uploader@192.168.184.31 upload-to-maven</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dist-all</resource>
              <resource>upload-agent</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="installer-tests">
      <trackingtool link="https://github.com/gocd/gocd/issues/${ID}" regex="##(\d+)" />
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/installer-testing" shallowClone="true">
          <filter>
            <ignore pattern="*.md" />
          </filter>
        </git>
        <pipeline pipelineName="installers" stageName="dist" materialName="installers" />
        <pipeline pipelineName="UploadInstallers" stageName="UploadInstallers" materialName="UploadInstallers" />
      </materials>
      <stage name="install-tests">
        <jobs>
          <job name="fresh-install" runInstanceCount="6">
            <tasks>
              <exec command="rake">
                <arg>test_installers</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>installer-tests</resource>
            </resources>
          </job>
          <job name="upgrade" runInstanceCount="5">
            <environmentvariables>
              <variable name="UPGRADE_VERSIONS_LIST">
                <value>17.5.0-5095, 17.11.0-5520, 18.3.0-6540</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake">
                <arg>upgrade_tests</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>installer-tests-centos-7</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="performance" lockBehavior="lockOnFailure">
      <params>
        <param name="SERVER_INSTALL_DIR">/var/go/server</param>
        <param name="AGENTS_INSTALL_DIR">/var/go/agent</param>
        <param name="GIT_ROOT">/var/go/repos</param>
        <param name="DOWNLOAD_URL">https://download.gocd.org/experimental</param>
        <param name="PLUGIN_SRC_DIR">plugins/gocd-analytics-1.0.jar</param>
        <param name="NO_OF_PIPELINES">750</param>
        <param name="GIT_REPOSITORY_HOST">git://perf-test-repo-server.gocd.org</param>
        <param name="NO_OF_AGENTS">70</param>
        <param name="GO_SERVER_SYSTEM_PROPERTIES">-Ddatabase_url=http://172.16.38.88:8886/ -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=4711 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -XX:+HeapDumpOnOutOfMemoryError -XX:+UseSerialGC -Dgo.security.reauthentication.enabled=true -Dgo.security.reauthentication.interval=1800000 -Dgo.config.repo.gc.periodic=Y -Dgo.config.repo.gc.cron='0 0 0/3 1/1 * ?' -Dgo.database.provider=com.thoughtworks.go.postgresql.PostgresqlDatabase -XX:+PrintGCDetails -XX:+PrintGCApplicationStoppedTime -Xloggc:gc.log</param>
        <param name="GOCD_HOST">172.16.38.211</param>
        <param name="CONFIG_SAVE_INTERVAL">900</param>
        <param name="NO_OF_THREAD_GROUPS">2</param>
        <param name="LOAD_TEST_DURATION">43200</param>
        <param name="GIT_COMMIT_INTERVAL">120</param>
        <param name="THROUGHPUT_PER_MINUTE">120</param>
        <param name="THREAD_COUNT">25</param>
        <param name="PG_DB_HOST">172.16.38.212</param>
        <param name="INFLUXDB_HOST">10.38.28.58</param>
        <param name="GO_VERSION">18.4.0</param>
        <param name="THREAD_DUMP_INTERVAL">1800</param>
        <param name="NO_OF_PIPELINES_ECS_EA">250</param>
        <param name="PERCENT_MULTISTAGE_PIPELINES">10</param>
        <param name="SERVER_MEM">8g</param>
        <param name="SERVER_MAX_MEM">10g</param>
        <param name="INCLUDE_ECS_EA_PLUGINS">Y</param>
        <param name="INCLUDE_ADDONS">Y</param>
        <param name="INCLUDE_k8S_EA_PLUGINS">N</param>
        <param name="GIT_MATERIAL_RATIO">100</param>
        <param name="TFS_MATERIAL_RATIO">0</param>
        <param name="RELEASES_JSON_URL">https://download.gocd.org/experimental/releases.json</param>
        <param name="K8S_EA_PLUGIN_DOWNLOAD_URL">https://github.com/gocd/kubernetes-elastic-agents/releases/download/v1.0.0/kubernetes-elastic-agent-1.0.0-94.jar</param>
        <param name="NO_OF_PIPELINES_K8S_EA">100</param>
        <param name="INCLUDE_ANALYTICS_PLUGIN">Y</param>
      </params>
      <environmentvariables>
        <variable name="GIT_MATERIAL_RATIO">
          <value>#{GIT_MATERIAL_RATIO}</value>
        </variable>
        <variable name="TFS_MATERIAL_RATIO">
          <value>#{TFS_MATERIAL_RATIO}</value>
        </variable>
        <variable name="INCLUDE_PLUGINS">
          <value>N</value>
        </variable>
        <variable name="NO_OF_PIPELINES">
          <value>#{NO_OF_PIPELINES}</value>
        </variable>
        <variable name="NO_OF_AGENTS">
          <value>#{NO_OF_AGENTS}</value>
        </variable>
        <variable name="NO_OF_THREAD_GROUPS">
          <value>#{NO_OF_THREAD_GROUPS}</value>
        </variable>
        <variable name="LOAD_TEST_DURATION">
          <value>#{LOAD_TEST_DURATION}</value>
        </variable>
        <variable name="THROUGHPUT_PER_MINUTE">
          <value>#{THROUGHPUT_PER_MINUTE}</value>
        </variable>
        <variable name="SERVER_INSTALL_DIR">
          <value>#{SERVER_INSTALL_DIR}</value>
        </variable>
        <variable name="INFLUXDB_HOST">
          <value>#{INFLUXDB_HOST}</value>
        </variable>
        <variable name="GO_VERSION">
          <value>#{GO_VERSION}</value>
        </variable>
        <variable name="RELEASES_JSON_URL">
          <value>#{RELEASES_JSON_URL}</value>
        </variable>
        <variable name="INCLUDE_k8S_EA_PLUGINS">
          <value>#{INCLUDE_k8S_EA_PLUGINS}</value>
        </variable>
        <variable name="K8S_EA_PLUGIN_DOWNLOAD_URL">
          <value>#{K8S_EA_PLUGIN_DOWNLOAD_URL}</value>
        </variable>
        <variable name="NO_OF_PIPELINES_ECS_EA">
          <value>#{NO_OF_PIPELINES_ECS_EA}</value>
        </variable>
        <variable name="TFS_PWD" secure="true">
          <encryptedValue>AES:eTcYf7cjCHkZDRjQNy93Ow==:JIC8+WI14rMeIQsoSX75LBH7uydWqf/G6JZCzLbfLLdCk4ZNRQBz3DKAwCks7MIC5xHOurBm8xJ/28fufjEWSWDU9aHbHuvVOpL+MscHOME=</encryptedValue>
        </variable>
        <variable name="LDAP_SERVER_IP" secure="true">
          <encryptedValue>AES:1XR40CWX1PnWcMYbBrMgbQ==:at1/CQTI4MmlCW2Up5fSKssxcG8mZm3kY6YCBBqTOk4=</encryptedValue>
        </variable>
        <variable name="FILE_BASED_USER_PWD" secure="true">
          <encryptedValue>AES:miqog9xvau8OD7nzsEwOlg==:vdK5TE/FdGLx2CFdn3OB6w==</encryptedValue>
        </variable>
        <variable name="LDAP_USER_PWD" secure="true">
          <encryptedValue>AES:BPsE9tBErILPKKixIWGmVw==:7upVW0sPZZhhqjZyCeBTH0QvEt3DY0BW4BeBKvWnw2M=</encryptedValue>
        </variable>
        <variable name="PERCENT_MULTISTAGE_PIPELINES">
          <value>#{PERCENT_MULTISTAGE_PIPELINES}</value>
        </variable>
        <variable name="SERVER_MEM">
          <value>#{SERVER_MEM}</value>
        </variable>
        <variable name="SERVER_MAX_MEM">
          <value>#{SERVER_MAX_MEM}</value>
        </variable>
        <variable name="INCLUDE_ECS_EA_PLUGINS">
          <value>#{INCLUDE_ECS_EA_PLUGINS}</value>
        </variable>
        <variable name="NO_OF_PIPELINES_K8S_EA">
          <value>#{NO_OF_PIPELINES_K8S_EA}</value>
        </variable>
        <variable name="INCLUDE_ANALYTICS_PLUGIN">
          <value>#{INCLUDE_ANALYTICS_PLUGIN}</value>
        </variable>
        <variable name="PG_DB_HOST">
          <value>#{PG_DB_HOST}</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/performance" />
        <pipeline pipelineName="UploadInstallers" stageName="UploadInstallers" materialName="uploadinstallers" />
      </materials>
      <stage name="rspec_for_performance_scripts">
        <environmentvariables>
          <variable name="test" secure="true">
            <encryptedValue>AES:lBNIdOYuNRITKfawZyluaQ==:FPtsDc1fEG5GYEtOrXsPyA==</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="rspec" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rspec</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="prepare">
        <jobs>
          <job name="server">
            <environmentvariables>
              <variable name="INCLUDE_ECS_EA_PLUGINS">
                <value>#{INCLUDE_ECS_EA_PLUGINS}</value>
              </variable>
              <variable name="INCLUDE_ADDONS">
                <value>#{INCLUDE_ADDONS}</value>
              </variable>
              <variable name="PG_DB_HOST">
                <value>#{PG_DB_HOST}</value>
              </variable>
              <variable name="EA_PLUGIN_DOWNLOAD_URL" secure="true">
                <encryptedValue>AES:D1Gi7sq1DeTiusmBITse8w==:DD8YYNpbOCtyzEiNL03WKgla18+LdAtQj/oHk4Rokzr/M2nyZqUJnOqqxz4w/CIn6Cm5W/bCXJ8xRcTJXr/64rnP9roAmcoJ7TCaHvp9UVqOWMG032IzOJA4nxCS+DxDGsNNPgPgdWosk3TMOnmUfi2/gUpSuM3rk0FzS9Js0ZA=</encryptedValue>
              </variable>
              <variable name="EXTENSIONS_USER" secure="true">
                <encryptedValue>AES:FvFcy4TBNEAXI0lW2KDO8Q==:ao8SZNtud/2QXx7XuCBUvjcZdLz9AeTDOunXeW0SwgGx54bGysWxMh6yyXaOULXM7FjtgOVORshqaB4Rhvb37Q==</encryptedValue>
              </variable>
              <variable name="EXTENSIONS_PASSWORD" secure="true">
                <encryptedValue>AES:7XJpuMtJgLtX8Te6mB6gxw==:xjWv/d39wiILCpLZQMIaTkqnuQqmZsB3Kf44MPhwZGzNJ4h+8OAe7qktO57GkyRi</encryptedValue>
              </variable>
              <variable name="PG_ADDON_DOWNLOAD_URL" secure="true">
                <encryptedValue>AES:TUsmL5VBcDSlrX7MK9zcDw==:TK7udOsuqXTYdvSJYrX2/PU047gmhB5WIZTZvSkBOYFJgSBJf/D8OEI8VCX7kYzxOq5ffe1Og97+nSVWjJIZdBm+wJKqYlBxiEe1h+l3oXjqb70sC1qSeIt6IbXsrRC2WmRonfkrCKGqybNofg4vMn+wVtqFMPERW0SMjt/y5DgTLvYZs1L+4GnXNzHUfAwj</encryptedValue>
              </variable>
              <variable name="ANALYTICS_PLUGIN_DOWNLOAD_URL" secure="true">
                <encryptedValue>AES:GlKGMMpbFgkFzfp3DYzwMg==:qTGE9a8awJn1CvOruzWwy9NXZNvV6Ltzaazx4XQ6fkm/LEKVE7PhoFWIFV9TLVXBZCv5zpRairR1UiKOzXAIeSa81yEQWJ1CMdMq5TeXkTz1pVK/i65iUVFptCbposMSnNZUyXgvu47GyLIa57YQ0B5Ixs4fvAEWffUuWuRFL6EpZEc6qvCX20fnOFf2JXJ4</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>server:prepare</arg>
                <arg>SERVER_INSTALL_DIR=#{SERVER_INSTALL_DIR}</arg>
                <arg>DOWNLOAD_URL=#{DOWNLOAD_URL}</arg>
                <arg>PLUGIN_SRC_DIR=#{PLUGIN_SRC_DIR}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>server</resource>
            </resources>
          </job>
          <job name="git-repo-setup">
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>git:daemon:start</arg>
                <arg>GIT_ROOT=#{GIT_ROOT}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>repos</resource>
            </resources>
          </job>
          <job name="jmeter-agent-setup">
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>echo "This job no longer used, keeping it around in case need to bring it back"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>server</resource>
            </resources>
          </job>
          <job name="postgres">
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>postgres:setup_db</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>repos</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="start-server">
        <jobs>
          <job name="server">
            <environmentvariables>
              <variable name="GO_SERVER_SYSTEM_PROPERTIES">
                <value>#{GO_SERVER_SYSTEM_PROPERTIES}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>server:start</arg>
                <arg>SERVER_INSTALL_DIR=#{SERVER_INSTALL_DIR}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>server</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="start-agents">
        <jobs>
          <job name="agents">
            <environmentvariables>
              <variable name="PRODUCTION_MODE">
                <value>N</value>
              </variable>
              <variable name="GO_SERVER_URL">
                <value>https://#{GOCD_HOST}:8154/go</value>
              </variable>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="ENABLE_AGENT_DEBUG_LOGS">
                <value>Y</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>agents:prepare</arg>
                <arg>AGENTS_INSTALL_DIR=#{AGENTS_INSTALL_DIR}</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>agents:start</arg>
                <arg>AGENTS_INSTALL_DIR=#{AGENTS_INSTALL_DIR}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>agent</resource>
              <resource>performance</resource>
              <resource>large-instance</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="configure">
        <jobs>
          <job name="pipelines">
            <environmentvariables>
              <variable name="GIT_REPOSITORY_HOST" secure="true">
                <encryptedValue>AES:oEOnB7DlyXYjhChw2/ubsw==:Ej9LyKlH1Y78qYFMUYfh1pXrbbERj+sg6qQxXmJKIpd89kfq8u5ltJ74ZZ4WFsnkZ5tVBtNIR5nJf6pPEm4ObA==</encryptedValue>
              </variable>
              <variable name="AWS_SECRET_KEY" secure="true">
                <encryptedValue>AES:4xpaPGTDYJCl/7gtwGdZZA==:da/cvrojhnL207DhIV9GK21LUhR69W9WwfgpcXnRQCch4umd5GQRu9NM3RAPEHZwjXO1XoiyxnXiGK1nZ2W6ogcrxHC68RSqyBwAwQz8Tkc=</encryptedValue>
              </variable>
              <variable name="AWS_ACCESS_KEY_ID" secure="true">
                <encryptedValue>AES:mg6jCOHt8S+O271qYKPjLQ==:SsHwYlqB/FdIMMYqR4By+oEIeXk5Hja2XfPPFID0hTVq4WBP5C1sBnFMvtBAb5fx</encryptedValue>
              </variable>
              <variable name="AWS_IAM_PROFILE" secure="true">
                <encryptedValue>AES:2NoRhK7jL8h7w17B6JBgGA==:ZFoEM9nmJnQfU0Z8C/qNkp2cpA+G+9wgwH/fE/fEueuZazXEOSWsFriqYkPrEl60Wwzzo6dl1Efzsw8hEYw7h/qepQbEDFeBxxrKxvLt77g=</encryptedValue>
              </variable>
              <variable name="K8s_TOKEN" secure="true">
                <encryptedValue>AES:ef+x1Ob8e4hayhXoaRzmvA==:NGyggj81W/aJsQJ0LN9V4gWFLaGuK6DziZfHYaEJPXwDdpGIPdEI9KVmei0uaNGFA5v7byDKKveqRYNZbtLqLMjq6OCV6YNAto7mLUYdOPcFdw4UbQ8Tcb5P5Ihql6FDMufCxiGTklvHLfzoZhwhhgnIDXRoYJ9Gr4s4GfGQ2GLM8dm/AwJgGVNgdzBR94x8bpNXHaJHTKR5HEwLaUnlttOSw9nPV+wY54AqncYZWNb9UrMzBc7zigLYGHUtdYDiRgmufftGcwkkclttmjkkdcQIFuAf70lZR9N5AKqLOCgFzSsqyq5y7JxEkzRgqm2Z4AtCqze4VzkbuM6jgodzH9ron8aUdRvnGCjtV76GYKbLZ/mbmthJhhnJXKTljrP2UTOGBUOJLzyvlXGgwZaEaJmOjcM+wjHAWi7QXEq823ki1SEcRFLCdUUUUGj6MT9zjp7VdLGAmvud5Wf/PBGMlw7FPK8b1LoxLNzbfGX9Jx0/7xy+wOL+oqYRGBGVW3xjmQwbdLTHl/hVTCwxYGZARqSjmjkmJE9/FQlIIZZ00mVXG2ddXxpconKOwg69Bs2fDAqOpowGp+vQQWSgsGK46NC8JQ31PTYPfr5EOoggtUjBgLxUyoEPdYqtfDZc2ri8MbmPmJdIGL22yHyCF660spk1++07kx4HbsAW5yH3nsTqoK+cbX5hdJWx6TrLcMIBCtGPPkPoC9LsHMsfebyecPAvqcvhi9QqvQcahNjM7/zrE30mBLbMfysFEwgV94DbyczH3wt02APD9nZbad9vEBHRH+Z1bPQyKvRpAmZYwFM7d6Sbxjuk6OWQxxXmCXPFd/cb8C9/2yNPZ8b3VdnCOIEH8YYCwGwVF0kKDlat8+EBXe8+YiBa828I2Jf1dXvupHwfM/jfkLnazYPjyShyZKxFrrLbU/mfe2KT9tkTtEXTaoC1n1fWsulqEiw/SjhMG8F1qW7bVhqb+IIzg2qaRL3B36s8lQmqPLddzKlTbMOVvW2abhtBp7y6eyKJAcpX6nh6M/tPjIEINouOAAVH5vmtCZGaKLsm71Wawo1I8PO5TPslvNUxCYcjaK/o+SSumQbEkxDA9iYR2jKAVx5M742kBs7ob3qJY2lnApGyJ5cjA2O7hI1pTC3yHAmnQlkNvmBXzSl3QTxAUDCVu/YeraanZ1ygvH+StYvpaXmqX9t70vMF7ctBsbr8PGbHgZGbEBrJRmOXdW7hUqmjDAJiwiGjUGKWr8cu8F/27NA9692AM7BSzE1jKKgei0I/QotRz3ofAo6Uw6hRuIAQZIhzvTfN7aV/ppk6X9jPeCrW4d2r1gVmTmraOdFnmKsY/+SoFTDqTJGXcfPXjZXU2RWvO50ULonpk3AEJnFny2cJbcQvfA1sJl2kHmO6lwmU1Tz++DuI1JGuThMpE1+UIT46PQD0+eWXcvINxKRGDnwDw9eGkaLG8cOh5zCwK51RfPFwqtmRsKg9a67Pv29/hAI788MiVJlsaphUBLXQ24JPu5w=</encryptedValue>
              </variable>
              <variable name="K8s_CA_CERT" secure="true">
                <encryptedValue>AES:BZNeysKzT8r8EZ87QNPIcg==:fulNDef2PYRdLnQu9A3ZGStnNOqak+OuCThhfGQdqPDJEGZaOWUsjB3EhtunChtDz9XOrwfyAiw8FO1M0SRjKvpMxE03oHcoadjvUbfB+zN/eAVz0nxth2AZZaGPTbFJzylNqFbrIWlm4/M1fKnXdnUgniRRvuLg0ze3LkJBFcq4xjKizEK3XkUZu5fqFmzX9WdDD1LZdUCcWwCSWhCtct5je6/1kRik3smgw9wbZUMjpB7L+MPh9Q80ZZHkeKnErPZT86TM5EH43+UZQcPLRjr5apQFVSTE2RBFHkpvlD//YGeRSH2+8/yFtfsRB5zIAAuKk44Xnsv15WHp5Y6q8qgHW0xOh70vJJD08pgL0qTbIz/BquCcWlVr1rAjKqjpAEjg0IeFybcWI6Qq6GefVgjq+qrWW5n94mUsjA35VsUNFfNhkEZ2uhGG1+OxqLZ1DhqyBws9nvUk8zifNYxrjDKY1gEQhF8iOs2Gp/S4jI837nDCsPKj8EZZzZvQE51Lwev5XCrZqP0i6eWAqu6bBBpWlVmdaWmq0IglQpCgcj93g1xG5ztD35uf7k9Oykao2DK4sbqNRJDhkq1CNFddFBBt3fgmGgqZz396oOyesJ96G+zyIgZBlKO+GJOZ5DU58vxFt7xJoicYkVTyLLXo8Fl9VKYCNaKKnZUrHlUUISe6V0VDvEX+xwWtSkmRJGekbMHyBE7iMDeFaNDx0cmmlpMX6vHVx33jIBVKWAGJkOAIjDGgJbrHhbHa8BZi9Ixj5edcpsi6R2f4hMjofxQqzl6hT1beFwtIZBFSPu7NYLT1SCR3D8FpEqSt24jye+c2mF74auJtAnb1jWx2qaX1zMNPu2KV4d4qM7jcCocqBuIcoPN8owqyZmfkHnvRhYrPh3GBjdHBmewGByuVvek9soqd2gmaKQ9EViB18RaBd/sH9ZMmvm8HxDoLG2V/wFVp3KnAV81qnL8HUvn5iGcs8/nGltRrf3GhZUH9nsaB6w/8D/QnpQMhz2zv89fYSUlMvLWTgt+eKSPDxjfOGaFwXmRVpIkxmZcL1mPzxWWmefoVZdO/BsR9ZImema8UQVGW5mgjF/m5471HGGt4hblMV14gbeW56TSzSkxagg50wtYTSLlBLeW6MQXNkwe/ZC+oNo+WKe7PIX7sbsP9rnMHUjeZhRGFjDBaZNDXV02aNswQXpGz2y7bHpr1ruj9lyQFfi+cRRwReL13XMrm2yNkG7reTIVguDiGhoy/0YTipHYAGP2Kwmzro8rRAAio3zIqJLbIPIHsQwmJ21SrmBLBKY/yOJuumQn3fQT1KTOY4pzLjs0qOgAa1RmQeOzdn/8tQoXaQwMOwUEl6D1Q6GM/3eg+AIAPkION6fI36RkCmbzbvxa/P+unCdtGKTYDsyndMqC+kmi86aldwEIkRFPveRRJigAmFRAWRe50oaI8xlCQNt059ZdYz1PLPWRh1UMAcUjtNROF7mPqQx/WNq+APJc89+bEMr/4v2fDPheNufSTq2sGOLQ5LzH9Xsn69dBn+7yVbZriYMJletPCOJQsGFlrZzkb/fSWiekAHfI1pgj+xjKLkQq0GlDR4/Cedk+fGfxBBVd6Bl3MHHKrjyjXpK7clKWR+GAsTAEcQdMcHEl9vUr/f0WB73oqWvdwxWrk8jCYH/Aa/jHw4F5Byxpd6dRDZhYA6yiJeOm0sNGmB42W3bOJVG3ih2Ac0I8rXeb48PQeycoz7ileKLRob+oc6d5+/hTLXW6uTjdgtINyCjvbKZpyTtQIuXl4BAIJBZBM+AFsdQpWMRtLRSvtjZqOAmtl/KrnKENmRPDeRmJy/kklp7k76H+K20yH+30jUqC9oXKderqiRbYsoy9KX79pWQsH6yGRxoQiVLTSOI4IBgo7+l63Ccenm2/J7R7bAten</encryptedValue>
              </variable>
              <variable name="PERF_SERVER_SSH_URL" secure="true">
                <encryptedValue>AES:Nj7H15HXmqf3F60vcA02dg==:A6Nl8cFxNYg4AA9EQilOOnhR9p2flllbew2ctz9A68hG6fHn02KYO4ZCSSATPwf7</encryptedValue>
              </variable>
              <variable name="K8s_CLUSTER_URL" secure="true">
                <encryptedValue>AES:vzeX93ER7+fqqRunQjG4bA==:PRRFwzgOrb/3IJKl1T5mLOd81AQWU6aQBxoaSDklQf5QOl1mDpi8Hdob8iPDdWvg</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git">
                <arg>pull</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>server:setup_auth</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>pipeline:create</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>plugins:setup_analytics_plugin</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>plugins:setup_ecs_ea</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>plugins:setup_ecs_ea_profile</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>pipeline:create_pipelines_to_run_on_ecs_elastic_agents[test-ecs]</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>plugins:setup_k8s_ea</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>plugins:setup_k8s_ea_profile</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>pipeline:create_pipelines_to_run_on_k8s_elastic_agents[test-k8s]</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>server</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="warmup">
        <jobs>
          <job name="wait" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="sleep">
                <arg>1200</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="git_commit_loop" timeout="0">
            <environmentvariables>
              <variable name="GIT_COMMIT_INTERVAL">
                <value>300</value>
              </variable>
              <variable name="LOAD_TEST_DURATION">
                <value>1200</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:git:update</arg>
                <arg>GIT_ROOT=#{GIT_ROOT}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>repos</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="benchmark">
        <environmentvariables>
          <variable name="THREAD_COUNT">
            <value>#{THREAD_COUNT}</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="job_details_page" runInstanceCount="2" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xmx1g</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:dashboard_to_job_instance</arg>
                <arg>NO_OF_AGENTS=#{NO_OF_AGENTS}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/dashboard_to_job_instance/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="agents_to_jobs_history" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xmx1g</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>1</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>5</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:agents_to_jobs_history</arg>
                <arg>NO_OF_AGENTS=#{NO_OF_AGENTS}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/agents_to_jobs_history/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="plugin_status_report_page" runInstanceCount="2" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xmx1g</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>5</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>10</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:plugin_status_report</arg>
                <arg>NO_OF_AGENTS=#{NO_OF_AGENTS}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/plugin_status_report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="performance_monitor" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>echo "Disabling it since we have grafana dashboard, if needed can bring this back"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="pipeline_history" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:pipeline_history</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Reports" path="reports/pipeline_history/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="git_commit_loop" timeout="0">
            <environmentvariables>
              <variable name="GIT_COMMIT_INTERVAL">
                <value>#{GIT_COMMIT_INTERVAL}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:git:update</arg>
                <arg>GIT_ROOT=#{GIT_ROOT}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>repos</resource>
            </resources>
          </job>
          <job name="tfs_commit_loop" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:tfs:update</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="config_update_loop" timeout="0">
            <environmentvariables>
              <variable name="CONFIG_SAVE_INTERVAL">
                <value>#{CONFIG_SAVE_INTERVAL}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:config:update</arg>
                <arg>GOCD_HOST=#{GOCD_HOST}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>agent</resource>
              <resource>performance</resource>
            </resources>
          </job>
          <job name="compare_page" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xmx1g</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>1</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>3</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:dashboard_to_compare</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/dashboard_to_compare/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="global_analytics_page" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xms512m -Xmx4096m</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>30</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>30</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:global_analytics</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/global_analytics/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="build_time_analytics_page" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xms512m -Xmx4096m</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>30</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>30</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:build_time_analytics</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/build_time_analytics/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="new_dashboard_page" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xms512m -Xmx4096m</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>240</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>250</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:new_dashboard_page</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/new_pipeline_dashboard/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="vsm_page" runInstanceCount="2" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xmx1g</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:dashboard_to_vsm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/dashboard_to_vsm/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="pipeline_edit_page" runInstanceCount="2" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xmx1g</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:dashboard_to_pipeline_edit</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/dashboard_to_pipeline_edit/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="admin_pipelines" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xms512m -Xmx4096m</value>
              </variable>
              <variable name="NO_OF_THREAD_GROUPS">
                <value>1</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>10</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>25</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:admin_pipelines</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/admin_pages/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="CCTray" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xms512m -Xmx4096m</value>
              </variable>
              <variable name="NO_OF_THREAD_GROUPS">
                <value>3</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>60</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>50</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:CCTray</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/admin_pages/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="server_health_messages" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xms512m -Xmx4096m</value>
              </variable>
              <variable name="NO_OF_THREAD_GROUPS">
                <value>1</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>60</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>50</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:server_health_messages</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/admin_pages/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="user_summary" timeout="0" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
              <variable name="JVM_ARGS">
                <value>-Xms512m -Xmx4096m</value>
              </variable>
              <variable name="NO_OF_THREAD_GROUPS">
                <value>1</value>
              </variable>
              <variable name="THROUGHPUT_PER_MINUTE">
                <value>10</value>
              </variable>
              <variable name="THREAD_COUNT">
                <value>25</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:user_summary</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="reports/admin_pages/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" />
            </artifacts>
          </job>
          <job name="thread_gc_analysis" timeout="0">
            <environmentvariables>
              <variable name="FASTTHREAD_APIKEY" secure="true">
                <encryptedValue>AES:J4+1GUcabdfDY2HZLmuh7A==:lC7y3Pxe1wso//Yeqd42P/cXRXLh1sIPmM2Fj9yF3QUsFsaDIDJHpHXY/MkiLIAErVNlUQwFVwleHbyRA7x/ig==</encryptedValue>
              </variable>
              <variable name="THREAD_DUMP_INTERVAL">
                <value>#{THREAD_DUMP_INTERVAL}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:analyze_thread_dump</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>performance:analyze_gc</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="ThreadDump" path="ThreadDump_Analysis_report.html" />
              <tab name="GC" path="GC_Analysis_report.html" />
            </tabs>
            <resources>
              <resource>performance</resource>
              <resource>server</resource>
            </resources>
            <artifacts>
              <artifact type="build" src="thread_dumps" />
              <artifact type="build" src="ThreadDump_Analysis_report.html" />
              <artifact type="build" src="GC_Analysis_report.html" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="stop">
        <approval type="manual" />
        <jobs>
          <job name="server">
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>server:stop</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>server</resource>
            </resources>
          </job>
          <job name="agents">
            <environmentvariables>
              <variable name="GOCD_HOST">
                <value>#{GOCD_HOST}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path</arg>
                <arg>vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>agents:stop</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>performance</resource>
              <resource>agent</resource>
              <resource>large-instance</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="go-cd-PR">
    <authorization>
      <view>
        <user>view</user>
        <user>tomzo</user>
        <role>go-committers</role>
        <role>view</role>
        <role>snap-team</role>
      </view>
      <operate>
        <user>tomzo</user>
        <role>go-committers</role>
        <role>snap-team</role>
      </operate>
      <admins>
        <user>ibnc</user>
      </admins>
    </authorization>
    <pipeline name="trigger">
      <materials>
        <scm ref="c0758880-10f7-4f38-a0b0-f3dc31e5d907">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </scm>
      </materials>
      <stage name="do-nothing">
        <jobs>
          <job name="do-nothing" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="true">
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="build-linux-PR" lockBehavior="none" template="build-gradle-linux">
      <params>
        <param name="OS">linux</param>
        <param name="BROWSER">firefox</param>
      </params>
      <materials>
        <pipeline pipelineName="trigger" stageName="do-nothing" />
        <scm ref="c0758880-10f7-4f38-a0b0-f3dc31e5d907">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </scm>
      </materials>
    </pipeline>
    <pipeline name="build-windows-PR" lockBehavior="none" template="build-gradle-windows">
      <params>
        <param name="OS">windows</param>
        <param name="BROWSER">ie9</param>
      </params>
      <materials>
        <pipeline pipelineName="trigger" stageName="do-nothing" />
        <scm ref="c0758880-10f7-4f38-a0b0-f3dc31e5d907">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </scm>
      </materials>
    </pipeline>
    <pipeline name="plugins-PR" lockBehavior="none" template="plugins-gradle">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/go-plugins" shallowClone="true" dest="go-plugins" materialName="go-plugins" />
        <scm ref="c0758880-10f7-4f38-a0b0-f3dc31e5d907" dest="gocd">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </scm>
        <pipeline pipelineName="build-linux-PR" stageName="build-server" materialName="linux" />
        <pipeline pipelineName="build-windows-PR" stageName="build-server" materialName="windows" />
      </materials>
    </pipeline>
    <pipeline name="installers-PR" lockBehavior="none" template="installers-gradle">
      <params>
        <param name="plugins-pipeline-name">plugins-PR</param>
      </params>
      <environmentvariables>
        <variable name="UPDATE_GOCD_BUILD_MAP">
          <value>Y</value>
        </variable>
        <variable name="WINDOWS_JRE_URL">
          <value>https://maven-mirrors.gocd.org/repository/s3-mirrors/local/jre-7u79-windows-i586.tar.gz</value>
        </variable>
        <variable name="WINDOWS_64BIT_JRE_URL">
          <value>https://maven-mirrors.gocd.org/repository/s3-mirrors/local/jre/windows/jre-8u102-windows-x64.tar.gz</value>
        </variable>
        <variable name="WINDOWS_32BIT_JRE_URL">
          <value>https://maven-mirrors.gocd.org/repository/s3-mirrors/local/jre/windows/jre-8u102-windows-i586.tar.gz</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="c0758880-10f7-4f38-a0b0-f3dc31e5d907">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </scm>
        <pipeline pipelineName="plugins-PR" stageName="build" materialName="go-plugins" />
      </materials>
    </pipeline>
    <pipeline name="smoke-PR" template="smoke-gradle">
      <params>
        <param name="installers-pipeline-name">installers-PR</param>
        <param name="plugins-pipeline-name">plugins-PR/installers-PR</param>
        <param name="sahi-working-dir">sahi-tests</param>
        <param name="selenium-working-dir">selenium-tests</param>
      </params>
      <environmentvariables>
        <variable name="AGENT_MEM">
          <value>64m</value>
        </variable>
        <variable name="AGENT_MAX_MEM">
          <value>512m</value>
        </variable>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true" dest="#{sahi-working-dir}" />
        <pipeline pipelineName="installers-PR" stageName="dist" materialName="installers" />
        <git url="https://mirrors.gocd.org/git/gocd/ruby-functional-tests" shallowClone="true" dest="#{selenium-working-dir}" materialName="ruby-functional-tests" />
      </materials>
    </pipeline>
    <pipeline name="acceptance-linux-PR" template="acceptance-linux-gradle">
      <params>
        <param name="installers-pipeline-name">installers-PR</param>
        <param name="plugins-pipeline-name">plugins-PR/installers-PR</param>
        <param name="tags">!windows,!server_restart_needed,!flaky_fanin_test,!stage1,!plugins-tests,!enterprise,!SPA,!pipeline_config,!smoke</param>
        <param name="priority_tags">!manual,!windows,!server_restart_needed,!flaky_fanin_test,stage1,!enterprise,!SPA,!pipeline_config,!OOM,!vulnerability_tests</param>
        <param name="plugin_tags">!manual,!windows,!server_restart_needed,!flaky_fanin_test,!stage1,plugins-tests,!enterprise,!SPA,!pipeline_config,!7487</param>
        <param name="OOM_tags">!manual,stage1,OOM</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="AGENT_MEM">
          <value>64m</value>
        </variable>
        <variable name="AGENT_MAX_MEM">
          <value>512m</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true" />
        <pipeline pipelineName="installers-PR" stageName="dist" materialName="installers" />
      </materials>
    </pipeline>
    <pipeline name="regression-PR" template="regression-gradle">
      <params>
        <param name="plugins-pipeline-name">plugins-PR/installers-PR/acceptance-linux-PR</param>
        <param name="installers-pipeline-name">installers-PR/acceptance-linux-PR</param>
        <param name="tags">!manual,!ignore,!tfs,!ldap,!windows,!server_restart_needed,!flaky_fanin_test,!stage1,!plugins-tests,!enterprise,!SPA,!pipeline_config,!vulnerability_tests,!fanin,!long_running,!OOM,!smoke</param>
        <param name="server-restart-tags">server_restart_needed</param>
        <param name="fanin">!manual,!long_running,!OOM,!plugins-tests,fanin</param>
        <param name="long_running">!manual,!fanin,!OOM,long_running</param>
        <param name="API-tags">!manual,pipeline_config</param>
        <param name="OOM_tags">!manual,!fanin,!long_running,!stage1,OOM</param>
        <param name="fanin-with-rpm-package">!manual,!long_running,!OOM,fanin,plugins-tests</param>
        <param name="build-command-tags">buildcommand,!manual</param>
        <param name="oAuth-tags">!manual,!windows,oAuth</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="AGENT_MEM">
          <value>64m</value>
        </variable>
        <variable name="AGENT_MAX_MEM">
          <value>512m</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true" />
        <pipeline pipelineName="smoke-PR" stageName="Smoke" materialName="smoke-PR" />
        <pipeline pipelineName="acceptance-linux-PR" stageName="RunAcceptanceSpecs-plugins" materialName="acceptance-linux-PR" />
      </materials>
    </pipeline>
    <pipeline name="regression-SPAs-PR" template="regression-ruby-webdriver">
      <params>
        <param name="spa_tags">SPA</param>
        <param name="regression_tags">!SPA,!smoke,!agent_manual_registration,!pipeline_selector,!bundled-auth-plugins,!analytics</param>
        <param name="installers-pipeline-name">installers-PR/acceptance-linux-PR</param>
        <param name="plugins-pipeline-name">plugins-PR/installers-PR/acceptance-linux-PR</param>
        <param name="bundled_auth_plugins">bundled-auth-plugins</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="browser">
          <value>firefox</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/ruby-functional-tests" shallowClone="true" />
        <pipeline pipelineName="smoke-PR" stageName="Smoke" materialName="Smoke" />
        <pipeline pipelineName="acceptance-linux-PR" stageName="RunAcceptanceSpecs-plugins" materialName="acceptance" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="internal">
    <authorization>
      <view>
        <user>sheroy</user>
        <role>website-team</role>
      </view>
      <operate>
        <user>sheroy</user>
      </operate>
      <admins>
        <user>eeluke</user>
        <role>go-committers</role>
        <role>snap-team</role>
      </admins>
    </authorization>
    <pipeline name="gocd-nsis-rpm-master">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/nsis-rpm" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build_job" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:hfC962OwE+vec346ir3omQ==:8NruOH2ImuQzz4/Yskg7/2CUFshdPQsfV2Hz+SbyO6OBigkwyKnU6rxGfJhx4Jggb2XvJxDRVRxtFVr7a9HaZRrd1BM9PokpArTp+rAU+yQ=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add upstream 'https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/nsis-rpm'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo yum install -y rpm-build yum-utils epel-release repoview createrepo</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo yum groupinstall -y -q 'Development tools'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo yum-builddep -y -q mingw-nsis.spec</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>REMOTE_NAME=upstream rake publish</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="PublishStableRelease">
      <environmentvariables>
        <variable name="REALLY_REALLY_UPLOAD">
          <value />
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="UploadInstallers" stageName="UploadInstallers" />
        <pipeline pipelineName="installers" stageName="dist" />
      </materials>
      <stage name="PublishRelease">
        <approval type="manual" />
        <jobs>
          <job name="PublishRelease">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [ "${REALLY_REALLY_UPLOAD}" != 'YES_I_REALLY_REALLY_WANT_TO_UPLOAD' ]; then echo "REALLY_REALLY_UPLOAD environment variable should be overridden while triggering."; exit 1; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export INSTALLER_JOB_IDENTIFIER=${GO_DEPENDENCY_LOCATOR_INSTALLERS}/dist; ssh -oSendEnv=INSTALLER_JOB_IDENTIFIER uploader@192.168.184.31 promote-to-stable</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dist-all</resource>
              <resource>upload-agent</resource>
            </resources>
          </job>
          <job name="PublishMavenCentralRelease">
            <environmentvariables>
              <variable name="AUTO_RELEASE_TO_CENTRAL">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [ "${REALLY_REALLY_UPLOAD}" != 'YES_I_REALLY_REALLY_WANT_TO_UPLOAD' ]; then echo "REALLY_REALLY_UPLOAD environment variable should be overridden while triggering."; exit 1; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export INSTALLER_JOB_IDENTIFIER=${GO_DEPENDENCY_LOCATOR_INSTALLERS}/dist; export ARTIFACT_SUFFIX=''; ssh -oSendEnv=ARTIFACT_SUFFIX -oSendEnv=INSTALLER_JOB_IDENTIFIER -oSendEnv=AUTO_RELEASE_TO_CENTRAL uploader@192.168.184.31 upload-to-maven</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dist-all</resource>
              <resource>upload-agent</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="YankRelease">
        <approval type="manual" />
        <jobs>
          <job name="YankRelease">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>if [ "${REALLY_REALLY_UPLOAD}" != 'YES_I_REALLY_REALLY_WANT_TO_UPLOAD' ]; then echo "REALLY_REALLY_UPLOAD environment variable should be overridden while triggering."; exit 1; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>export INSTALLER_JOB_IDENTIFIER=${GO_DEPENDENCY_LOCATOR_INSTALLERS}/dist; ssh -oSendEnv=INSTALLER_JOB_IDENTIFIER uploader@192.168.184.31 demote-from-stable</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dist-all</resource>
              <resource>upload-agent</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="go-microsite-deploy">
      <environmentvariables>
        <variable name="S3_SYNC_FORCE">
          <value>N</value>
        </variable>
        <variable name="ASSET_HOST">
          <value>site.go.thoughtworks.com</value>
        </variable>
        <variable name="ROOT_URL">
          <value>https://www.thoughtworks.com/go</value>
        </variable>
        <variable name="S3_FORCE_CLEANUP">
          <value>N</value>
        </variable>
        <variable name="S3_BUCKET" secure="true">
          <encryptedValue>AES:lDSSaK81oTjH9bl45OnBIA==:l/Kx27drU9NwilUy0wxhR8D5LtUgIpvodpr88of40yA=</encryptedValue>
        </variable>
        <variable name="S3_ACCESS_KEY" secure="true">
          <encryptedValue>AES:BC79LzbLv/0WjjhdnKNvdw==:qyt9dd/fbSltSP4TDmDkfQUiWJvFkajN3jCUU9SUowXXsQQk0+4i/AitQpJK1oyW</encryptedValue>
        </variable>
        <variable name="S3_SECRET_KEY" secure="true">
          <encryptedValue>AES:ZrD0GE1/PumcX9wib5ds7g==:FO0VpJf7ER/9Ffl0gpOxuHbtcbZznf8Zw87s6f+gUzTmOtVNeAOddCtDzApVaTAR1bfJW+8qwHMO2YR45POenNSY6KxAWweqrIVtFb8NxlY=</encryptedValue>
        </variable>
        <variable name="CLOUDFRONT_DISTRIBUTION" secure="true">
          <encryptedValue>AES:+PewYouvt5hTFNcNeNsp4w==:7dvs1Tw48sq7mgIeYiyBpbZJRduCyF7lXsg0BZSBhDw=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/website.go" />
      </materials>
      <stage name="deployment">
        <jobs>
          <job name="deploy">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>docker run -e ASSET_HOST=${ASSET_HOST} -e S3_SECRET_KEY=${S3_SECRET_KEY} -e S3_ACCESS_KEY=${S3_ACCESS_KEY} -e S3_BUCKET=${S3_BUCKET} -e S3_SYNC_FORCE=${S3_SYNC_FORCE} -e S3_FORCE_CLEANUP=${S3_FORCE_CLEANUP} -e CLOUDFRONT_DISTRIBUTION=${CLOUDFRONT_DISTRIBUTION} -e ROOT_URL=${ROOT_URL} -v `pwd`:/site gocd/go-site-builder</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dist-all</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="javasysmon" lockBehavior="none">
      <materials>
        <git url="https://github.com/gocd/javasysmon" autoUpdate="false" materialName="git" />
      </materials>
      <stage name="test" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="testonjdk7">
            <tasks>
              <ant buildfile="build.xml" target="test">
                <runif status="passed" />
              </ant>
            </tasks>
            <resources>
              <resource>linux</resource>
              <resource>jdk7</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="target/reports" dest="reports" />
            </artifacts>
          </job>
          <job name="testonjdk8">
            <tasks>
              <ant target="test" />
            </tasks>
            <resources>
              <resource>jdk8</resource>
              <resource>linux</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="target/reports" dest="reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="package" cleanWorkingDir="true">
        <jobs>
          <job name="jar">
            <tasks>
              <ant target="package" />
            </tasks>
            <resources>
              <resource>linux</resource>
            </resources>
            <artifacts>
              <artifact type="build" src="target/javasysmon.jar" dest="javasysmon.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="publish-cloud-based-artifacts">
      <environmentvariables>
        <variable name="version">
          <value />
        </variable>
        <variable name="revision">
          <value />
        </variable>
        <variable name="GIT_USER" secure="true">
          <encryptedValue>AES:9exg72Cky4UPJ/hGB/j42Q==:Wzf28Q0XjoHUE7epxEi2tMdH9dwDbvn1JLhaa7US8YE=</encryptedValue>
        </variable>
        <variable name="GIT_PASSWORD" secure="true">
          <encryptedValue>AES:B8O7Ib460Z9b6xe6Geoo3A==:AAMTwztF50pZl6eD7IUOtn+KtGqG/JHcZNj3wycBI0gMQFCEArWvM8Jg1haUj0T/ZuDh2FHZAmpkuMl6eKndkG/0yU0fyoUxlyLjyiPzEQk=</encryptedValue>
        </variable>
        <variable name="AWS_ACCESS_KEY_ID" secure="true">
          <encryptedValue>AES:dkym0t82KN+n5lwgWceh8w==:MnAvl+u9TZXMCmpMgj+rHw3kx4mGnR1qo4E6XjXbl+QQ6s8euhC5R83q8eebGW8e</encryptedValue>
        </variable>
        <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
          <encryptedValue>AES:ke6LoTl1Y7zPkR4JiAM1Rw==:7aMSO8LCkYKpAZaliem+9lt3fVT7NEIYMxa/aCaKjTRBYjpAV8GJIc8dTQsZMNNxiiN1Z/5trAUTot6LBT9kakhtY9AMK9nCTPj9CrKcoWA=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docker-gocd-server" dest="docker-gocd-server" materialName="docker-gocd-server">
          <filter>
            <ignore pattern="Dockerfile" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/docker-gocd-agent" dest="docker-gocd-agent" materialName="docker-gocd-agent" />
        <git url="https://mirrors.gocd.org/git/gocd/gocd-cloud" dest="gocd-cloud" materialName="gocd-cloud" />
        <pipeline pipelineName="PublishStableRelease" stageName="PublishRelease" materialName="PublishStableRelease" />
        <git url="https://mirrors.gocd.org/git/gocd/gocd-chocolatey" shallowClone="true" dest="gocd-chocolatey" materialName="gocd-chocolatey" />
        <git url="https://mirrors.gocd.org/git/gocd/build_utilities" dest="build_utilities" materialName="build_utilities" />
      </materials>
      <stage name="publish" cleanWorkingDir="true">
        <approval type="manual" />
        <environmentvariables>
          <variable name="TOKEN" secure="true">
            <encryptedValue>AES:mV10/zVva36J3ezNqTP5wA==:XcRB0DMCoFGMG5dVoRyAmwRPtZFaT46iv+3hwmtdirNK0ietlmlLzf68JJdyL236Si5X0fYwDwMQ1i9v+HTjnV+MsPYds2ruKBQOaZICVChehm0bwE0RwoxfZwUqi3wO</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="publish-docker-server">
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p ~/.docker &amp;&amp; echo "{\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$TOKEN\"}}}" &gt; ~/.docker/config.json</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docker-gocd-server">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; export  GOCD_SERVER_DOWNLOAD_URL=https://download.gocd.org/binaries/$(jq -r '.go_full_version' ../version.json)/generic/go-server-$(jq -r '.go_full_version' ../version.json).zip &amp;&amp; export GOCD_FULL_VERSION=$(jq -r '.go_full_version' ../version.json) &amp;&amp; export GOCD_GIT_SHA=$(jq -r '.git_sha' ../version.json) &amp;&amp; rake  --trace docker_push_stable</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docker-gocd-server">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; export  GOCD_SERVER_DOWNLOAD_URL=https://download.gocd.org/binaries/$(jq -r '.go_full_version' ../version.json)/generic/go-server-$(jq -r '.go_full_version' ../version.json).zip &amp;&amp; export GOCD_FULL_VERSION=$(jq -r '.go_full_version' ../version.json) &amp;&amp; export GOCD_GIT_SHA=$(jq -r '.git_sha' ../version.json) &amp;&amp; rake  --trace publish</arg>
                <runif status="passed" />
              </exec>
              <exec command="docker">
                <arg>logout</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>centos7</resource>
              <resource>docker-build</resource>
            </resources>
          </job>
          <job name="publish-docker-agents">
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p ~/.docker &amp;&amp; echo "{\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$TOKEN\"}}}" &gt; ~/.docker/config.json</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docker-gocd-agent">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; export  GOCD_AGENT_DOWNLOAD_URL=https://download.gocd.org/binaries/$(jq -r '.go_full_version' ../version.json)/generic/go-agent-$(jq -r '.go_full_version' ../version.json).zip &amp;&amp; export GOCD_FULL_VERSION=$(jq -r '.go_full_version' ../version.json) &amp;&amp; export GOCD_GIT_SHA=$(jq -r '.git_sha' ../version.json) &amp;&amp; rake  --trace docker_push_stable</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docker-gocd-agent">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; export  GOCD_AGENT_DOWNLOAD_URL=https://download.gocd.org/binaries/$(jq -r '.go_full_version' ../version.json)/generic/go-agent-$(jq -r '.go_full_version' ../version.json).zip &amp;&amp; export GOCD_FULL_VERSION=$(jq -r '.go_full_version' ../version.json) &amp;&amp; export GOCD_GIT_SHA=$(jq -r '.git_sha' ../version.json) &amp;&amp; rake  --trace publish</arg>
                <runif status="passed" />
              </exec>
              <exec command="docker">
                <arg>logout</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>centos7</resource>
              <resource>docker-build</resource>
            </resources>
          </job>
          <job name="publish-server-amis" timeout="0" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash" workingdir="gocd-cloud">
                <arg>-c</arg>
                <arg>wget -q https://releases.hashicorp.com/packer/0.12.3/packer_0.12.3_linux_amd64.zip &amp;&amp; unzip packer_0.12.3_linux_amd64.zip</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="gocd-cloud">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; ./packer build -var gocd_version=${GOCD_VERSION} go-server-packer.json</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="publish-demo-ami" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash" workingdir="gocd-cloud">
                <arg>-c</arg>
                <arg>wget -q https://releases.hashicorp.com/packer/0.12.3/packer_0.12.3_linux_amd64.zip &amp;&amp; unzip packer_0.12.3_linux_amd64.zip</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="gocd-cloud">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; ./packer build -var gocd_version=${GOCD_VERSION} -only=amazon-ebs go-server-demo-packer.json</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="choco-server">
            <environmentvariables>
              <variable name="apiKey" secure="true">
                <encryptedValue>AES:W7JCi5e0X64e0TQbNaBZUg==:QD7a0mJl2EWCAoHAX93PzVrdKYCbXKI5mZG6U3EN2ZN4NSOrq6m2CkhX5gNeqWp1DpE+YWuKxDYQgbtWCxEjHQ==</encryptedValue>
              </variable>
              <variable name="version">
                <value>18.3.0</value>
              </variable>
              <variable name="revision">
                <value>6540</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" dest="gocd-chocolatey" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="powershell" workingdir="gocd-chocolatey">
                <arg>-ExecutionPolicy</arg>
                <arg>ByPass</arg>
                <arg>-File</arg>
                <arg>.\createPackage.ps1</arg>
                <arg>server</arg>
                <runif status="passed" />
              </exec>
              <exec command="powershell" workingdir="gocd-chocolatey">
                <arg>choco</arg>
                <arg>push</arg>
                <arg>gocd-server\gocdserver.$env:version.nupkg</arg>
                <arg>-k</arg>
                <arg>$env:apiKey</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>windows</resource>
            </resources>
          </job>
          <job name="choco-agent">
            <environmentvariables>
              <variable name="apiKey" secure="true">
                <encryptedValue>AES:TTT/a51zz99QyllNBq0Nvw==:tP9paZu16IcfXgC8/dr2tq0mc+xnW748EdaCZ48asVk/Izh8m3wVSo8x2crWlFrEW6btr6dqbtUik8xJLtzgTA==</encryptedValue>
              </variable>
              <variable name="version">
                <value>18.3.0</value>
              </variable>
              <variable name="revision">
                <value>6540</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" dest="gocd-chocolatey" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="powershell" workingdir="gocd-chocolatey">
                <arg>-ExecutionPolicy</arg>
                <arg>ByPass</arg>
                <arg>-File</arg>
                <arg>.\createPackage.ps1</arg>
                <arg>agent</arg>
                <runif status="passed" />
              </exec>
              <exec command="powershell" workingdir="gocd-chocolatey">
                <arg>choco</arg>
                <arg>push</arg>
                <arg>gocd-agent\gocdagent.$env:version.nupkg</arg>
                <arg>-k</arg>
                <arg>$env:apiKey</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>windows</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="post-publish">
        <approval type="manual" />
        <jobs>
          <job name="empty_exp_bucket" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="S3_BUCKET" secure="true">
                <encryptedValue>AES:VoqCLnO0j9P/x+5v2bn5Ow==:T01uJipzQd9JHCSWTFRfdKWojnu9fsFA5ChSDOKz+KCAU42NIptX9/L4iKpSTwRgtY3IQ40g0u257svKAfbZ8lSa64wkdBYaBWqOQrGIcoU=</encryptedValue>
              </variable>
              <variable name="AWS_ACCESS_KEY_ID" secure="true">
                <encryptedValue>AES:BM+OVs9bXCEBo9LK4YgRdg==:48PdJO9La/Ab+4JyyS6LLndZ3wh4JkZz11vDfCCk2GIX/TD3cnjfwtUmiUJPkl9y</encryptedValue>
              </variable>
              <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
                <encryptedValue>AES:Q4B2Cq1QawmrvaCf0HuI9A==:EqGGxo/bZN76i+L1bGMqFDmk+Q1/vvP7Miwrgo8JfZ4gCSjQveIvrpx0P4kfDJHBlfz65yjyBf1BAl3QgdluurhOF7etXx0GRDGyStDtWL0=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>bundle install &amp;&amp; bundle exec ruby empty_download_bucket.rb</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="update_amis" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="S3_BUCKET" secure="true">
                <encryptedValue>AES:lJj3y4i2ZeGffU9AlpD8uQ==:KkVBzAHofKC5++TUI3YcQ1/dZRg8q2EteOU6Wzz2kDG7WYhkvGEb92mWGXaLMkpXpYtYr0wsHeuiN8Gbc9hlCr17QW6bU62glbqUXlglnQc=</encryptedValue>
              </variable>
              <variable name="AWS_ACCESS_KEY_ID" secure="true">
                <encryptedValue>AES:G1BuN8PvueTJZw31fJVmWA==:QznNkrddp3pOqXOQQnke348oqmmavwHRQg3woVgGamnlsSHdN/LoQy1p0hnCY3/W</encryptedValue>
              </variable>
              <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
                <encryptedValue>AES:2WKBEZQtY3DvpTLhxojBcw==:x5UqQQAZ3jjNgT8/XjzZD+GHaIwKZrzGljaHxma1HQnYzpN5Anj8v51DAyMiYPIfCmVciBG2gDYvCb/xL6H8++Ukg6foa1mPh75nTWSvvy4=</encryptedValue>
              </variable>
              <variable name="S3_ACCESS_KEY_ID" secure="true">
                <encryptedValue>AES:yfmC7etNTYx3CDVedbJkEw==:JfEHrqjSsGbrebyISOEPWpddzYBuuCzFL5KlFDaeZ4FBOcBjnqTj33z/amMeWqgt</encryptedValue>
              </variable>
              <variable name="S3_SECRET_ACCESS_KEY" secure="true">
                <encryptedValue>AES:pXoxgoDP9jaesLAuQ4/56A==:zwn54KrHHyg07NHqGSBrK7ffrhn2GKrwlg1odB8JQwD81MwxIJCW8feL5Z1mG7BVteb5nTUc8JBUYVjIrvUNxQzW2jwLrJ/DbzP3Q041jDI=</encryptedValue>
              </variable>
              <variable name="DOCKERHUB_ORG">
                <value>gocd</value>
              </variable>
              <variable name="DOCKERHUB_USERNAME" secure="true">
                <encryptedValue>AES:cDSTz41z+HGFAEbmD+fv8g==:e+6YddU1X4RB9GRqKLq1fgqVnmlZD5u4B9aWWYLFCTE=</encryptedValue>
              </variable>
              <variable name="DOCKERHUB_PASSWORD" secure="true">
                <encryptedValue>AES:wBKSBV15JfzdCT0ZRUJKKA==:BMx6ySIZVFYG7N1pwZ14Wkj1/FnoWBzkl6+butieviizC1/OH8rpAs86QxcM+wlE</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>export VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; bundle install &amp;&amp; bundle exec ruby update_cloud_images.rb</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="docker_cleanup">
            <environmentvariables>
              <variable name="ORG">
                <value>gocdexperimental</value>
              </variable>
              <variable name="USERNAME" secure="true">
                <encryptedValue>AES:uwuzOgYFV2DBZjS+5g1EqQ==:XpO50KDFXaoeDNWprAQR8LteuNps9yVGIB28YngIxIk=</encryptedValue>
              </variable>
              <variable name="PASSWORD" secure="true">
                <encryptedValue>AES:xGgf8Ev/wY8lEdJyb9EyUA==:J4VNFw8WaIMWcICTiMVFrI9A3itcXC+EGjiAgiYe/XwbNB9hT1bUFGcZyezorIaH</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>bundle install &amp;&amp; bundle exec ruby docker-cleanup.rb</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>centos7</resource>
              <resource>docker-build</resource>
            </resources>
          </job>
          <job name="update_dockerhub_full_description" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="DOCKER_HUB_USERNAME" secure="true">
                <encryptedValue>AES:a4SDTvL/+Mdg5AVSshbSZw==:29cpQanBo9VzZ/K2APY7YnLKPwTPQL/WnUUsKElKoTLQDT0Zq/GobW+CS/HwExPj</encryptedValue>
              </variable>
              <variable name="DOCKER_HUB_PASSWORD" secure="true">
                <encryptedValue>AES:4LGWzdiJ1bbvkudpyYCxKg==:7M7mnBd05BaAjJgkDzMWnj1H8olr1ZtEzRH5lwFWbv6E358dcVfy5C1VdMzLCCQC</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="npm" workingdir="build_utilities">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>export GO_FULL_VERSION_TO_RELEASE=$(jq -r '.go_full_version' ../version.json) &amp;&amp; node update_dockerhub_full_description.js</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="extensions-app">
      <environmentvariables>
        <variable name="DOCKER_REGISTRY" secure="true">
          <encryptedValue>AES:463kMKccAS1UxpG35jr0sw==:qe/8oalI4r0nmcfBbtSD2c3HR6DHQ5lkczbe5DY9winp9anQ4j8yNI/oCfzjPq61kJzAUwy0IUXXl8oHaVSdKoTQa+mLaNwPiUYwMpG6oqw=</encryptedValue>
        </variable>
        <variable name="AWS_ACCESS_KEY_ID" secure="true">
          <encryptedValue>AES:sWp2f9Qvyb7l+NvvLiWrQA==:WYe48ShpfyTd+PJ4fczcrKw4/jXPvdzWzoJqXqqISuTdOt6XAAgFhZ/6RQ3GAV8N</encryptedValue>
        </variable>
        <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
          <encryptedValue>AES:UP78sjndtgNYQ9cu6V6CBA==:wuZGsaiaNxP199t/ALjvqGBQw6EVS5GH9VxvNoJb0D/1z6aLsS64i4QfaQTu1lgKkuPxgy6e1UEUNlnziHKT0rHJvJ6OMBf19febUo6Q5II=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/gocd-extensions-app" />
      </materials>
      <stage name="tests" cleanWorkingDir="true">
        <jobs>
          <job name="run-tests" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="RAILS_ENV">
                <value>test</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>NOKOGIRI_USE_SYSTEM_LIBRARIES=1 bundle install --jobs=4 --path=.bundle --clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>specs:all</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="create-and-publish-image" cleanWorkingDir="true">
        <jobs>
          <job name="defaultJob" elasticProfileId="extenstions-app">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>set -o pipefail; aws ecr get-login --region us-east-1 --no-include-email | bash</arg>
                <runif status="passed" />
              </exec>
              <exec command="./build.sh">
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="bump_version">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/build_utilities" dest="build_utilities" materialName="build_utilities">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" dest="developer.go.cd" materialName="developer.go.cd">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" dest="docs.go.cd" materialName="docs.go.cd">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" dest="api.go.cd" materialName="api.go.cd">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="PublishStableRelease" stageName="PublishRelease" materialName="publish" />
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" dest="plugin-api.go.cd" materialName="plugin-api.go.cd">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/extensions-docs.gocd.org" dest="extensions-docs.gocd.org" materialName="extensions-docs.gocd.org">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
      </materials>
      <stage name="get_versions">
        <jobs>
          <job name="get_next_version" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>export VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) &amp;&amp; ruby docs_next_version.rb</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="build_utilities/version" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="bump_up_version" cleanWorkingDir="true">
        <jobs>
          <job name="bump_up" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:JbC2qtkHAW/ssSFrseNRYA==:1XTMyfRF40RfJ2rbBAGyaGFlUvkoRXznmS9R5C6Y2LdU7RSKiZ3OKX5/IEwWr2MzyuW+LQ0HbZT565FeD/79PTVBsjM3GwQJGLyf7AtYALw=</encryptedValue>
              </variable>
              <variable name="PREVIOUS_VERSION">
                <value>18.3.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/version" pipeline="" stage="get_versions" job="get_next_version">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="api.go.cd">
                <arg>-c</arg>
                <arg>export REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/api.go.cd &amp;&amp; export VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) &amp;&amp; source ../version &amp;&amp; bundle install &amp;&amp; bundle exec rake bump_version</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docs.go.cd">
                <arg>-c</arg>
                <arg>export REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/docs.go.cd &amp;&amp; export VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) &amp;&amp; source ../version &amp;&amp; bundle install &amp;&amp; bundle exec rake bump_version</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="developer.go.cd">
                <arg>-c</arg>
                <arg>export REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/developer.go.cd &amp;&amp; export VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) &amp;&amp; source ../version &amp;&amp; bundle install &amp;&amp; bundle exec rake bump_version</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="plugin-api.go.cd">
                <arg>-c</arg>
                <arg>export REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/plugin-api.go.cd &amp;&amp; export VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) &amp;&amp; source ../version  &amp;&amp; bundle install &amp;&amp; bundle exec rake bump_version</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="extensions-docs.gocd.org">
                <arg>-c</arg>
                <arg>export REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd-private/extensions-docs.gocd.org &amp;&amp; export VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) &amp;&amp; bundle install &amp;&amp; bundle exec rake bump_version</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="create_pipeline">
        <approval type="manual" />
        <environmentvariables>
          <variable name="USERNAME" secure="true">
            <encryptedValue>AES:gho4f8hj49ZBqDJzxkAGLw==:ZQH6ypDWpxNYDbUTd8PcL9pOtoEfGJ/uxNfx6SyL9ELYwhmLV0ZpBoa2bjB0bj41</encryptedValue>
          </variable>
          <variable name="PASSWORD" secure="true">
            <encryptedValue>AES:O2MSscP7ZBuhNa7x0I2W+g==:cp6X1qXoWlRVxJ4YDMRglj/BGaT7H3j0XEmWfDAH+6A=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="create_pipeline" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>bundle install &amp;&amp; VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) TEMPLATE=plugin-api-docs GROUP=plugin-api-docs REPO=plugin-api.go.cd ruby create-docs-pipelines.rb</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>bundle install &amp;&amp; VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) TEMPLATE=api.go.cd GROUP=gocd-api-docs REPO=api.go.cd ruby create-docs-pipelines.rb</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>bundle install &amp;&amp; VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) TEMPLATE=gocd-developer-docs GROUP=gocd-developer-docs REPO=developer.go.cd ruby create-docs-pipelines.rb</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>bundle install &amp;&amp; VERSION_TO_RELEASE=$(jq -r '.go_version' ../version.json) TEMPLATE=gocd-help-docs GROUP=gocd-help-docs REPO=docs.go.cd ruby create-docs-pipelines.rb</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="backup-aws" lockBehavior="none">
      <timer>0 0 0/8 * * ?</timer>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/backups" shallowClone="true" />
      </materials>
      <stage name="Backup">
        <jobs>
          <job name="BackupCLAMongoInstance" elasticProfileId="private-backup">
            <environmentvariables>
              <variable name="MONGO_USER" secure="true">
                <encryptedValue>AES:qRWCwqvKyyZMa3TGAg2E0w==:NznbIONw/NxIY+X9ztGz7GNmbARksYhcG2orZYYHPz8=</encryptedValue>
              </variable>
              <variable name="MONGO_PASS" secure="true">
                <encryptedValue>AES:L7M8lLLRF0VTLVjgvsCqPg==:bRr1JqdA7H9q+kHVrEyrNBjcERv15jfYd+UcCuAYuo+cgMCAkp3a20D6tjz/Wd8i</encryptedValue>
              </variable>
              <variable name="MONGO_HOST_PORT" secure="true">
                <encryptedValue>AES:r7UA3TcgzLgqmFr/l3SopQ==:KL4mD/8xKePMIJlfi7+S3f8Qs6Lk4rkC9MyjhtVXULlneBoktfV0GFhJ3Al/xtPm</encryptedValue>
              </variable>
              <variable name="MONGO_DB" secure="true">
                <encryptedValue>AES:/f1wDKqoWxsBn2fIBTWn3A==:wdjPoWFy3ZZzx5u6Dd7P2ORRsV8G5zdl+6ZKAKvWcM4=</encryptedValue>
              </variable>
              <variable name="S3_BUCKET_NAME" secure="true">
                <encryptedValue>AES:PaUgwul8EiHPCSzak7hPJA==:G9/a8pfjJnbL7hQKnxiSU42YyyGrE3gNms6NRY7RnZyaba/t/DBWwWzXOjFsZTNQZZ0PPitG4nSQQKu/u9L99GeT+bptEnVSYEplsh00PfI=</encryptedValue>
              </variable>
              <variable name="AWS_ACCESS_KEY_ID" secure="true">
                <encryptedValue>AES:3pK6HfiES8QKUuDR8tlCGA==:Ijcdm+ewuf0RSSVxfgPqvisRnl+VV0w7GQFb6JQ9kQZd5u5LXRySGgWr8qqRuoBO</encryptedValue>
              </variable>
              <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
                <encryptedValue>AES:i6atpGywtUOwRom0IpY9OQ==:zKk6eY5Wwh3EmgofRZfVqLnj9SAPIgZlXX5wj26Vr3MFQ8XSvqvanbNrPokR9Qxv5XbS1tiZ+hyJegq4PzhLmrEFjUh1HXCb9xNpem1LhgA=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake">
                <arg>--trace</arg>
                <arg>cla</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="BackupExtensionsRDSInstance" elasticProfileId="private-backup">
            <environmentvariables>
              <variable name="PG_DB_PASS" secure="true">
                <encryptedValue>AES:u+0cfodKgnpbXU4ZpOuM1w==:Eb4iVlT3KRw5qY66wUqG/nfhbffz2YfrH62WEtfIZYQpr7Q3laXQiNIjGS4B+rbLr4ZUIsUPKDqtug1BG/dzH+mu4ilkZg2z5uvMP8mMNnJckTipXz+xFG6uwjGnLBHdN+zhKqOcapurR1wFv9CmLA==</encryptedValue>
              </variable>
              <variable name="PG_DB_HOST" secure="true">
                <encryptedValue>AES:eDcJKg68rvf3Xg4r8i0Wbg==:q5XlneTmogb+FUr/8UKxzPDgnUkOOmOuOxTG/r276gaX7D5e4MLlbpBmJ3+bD07hHwaPnxtAOxCkcLYBQ/o3/t+Okea90PIXzBOftcQD11s=</encryptedValue>
              </variable>
              <variable name="PG_DB_NAME" secure="true">
                <encryptedValue>AES:t+EqrKGmUg//pWHZaHzRbQ==:D9S4/v8169F2aYOyqdjYS7xZN+z9I4i2tld4DcmYfpo=</encryptedValue>
              </variable>
              <variable name="PG_DB_USER" secure="true">
                <encryptedValue>AES:a6nWlpZPF9uHgr5qXSc+YQ==:4HtNeutx/tmXs3dXAOp0VSdnb0GlFatV+vqIbzgNtZE=</encryptedValue>
              </variable>
              <variable name="AWS_ACCESS_KEY_ID" secure="true">
                <encryptedValue>AES:T6+hHoYi3FbOKoetuvGpqw==:1U6vSoCpko9QdTEvwyCSxskpxhl6a4X3quYs8NHkxeh5n1RCfEge1GDoOc/BOd3h</encryptedValue>
              </variable>
              <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
                <encryptedValue>AES:YiZFzJjrhQJCVjsovcFN7w==:H1TpCMEKeQYTbQy77Q3smT1NOg1im8AQnra3bBji1HKELNeQ5YJuODd5vvhTjNTPe1bHtcZKjIQsa/kvxR8mRZvKNdBP4vQa6TY/MN6cjy8=</encryptedValue>
              </variable>
              <variable name="S3_BUCKET_NAME" secure="true">
                <encryptedValue>AES:BR3/enBye+UViW5k15e0bg==:PxmGUCGu1PivtkEAs7WhYzE2OohAB+Nr34lgk+8l0+/jDuszwVWzEJ3kgPLbaTcDO7G42NcobLraTkCIH6nDututbpMFq4Ku3IlVFr+eyo3TTpor34eoOL5faeOet2+k</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake">
                <arg>--trace</arg>
                <arg>extensions</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="extensions-docs-site" template="extensions-docs-site">
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/extensions-docs.gocd.org" />
      </materials>
    </pipeline>
    <pipeline name="Security-Checks" lockBehavior="none">
      <materials>
        <git url="https://github.com/gocd/security" dest="security" autoUpdate="false" materialName="git" />
        <git url="https://mirrors.gocd.org/git/gocd/gocd" shallowClone="true" dest="gocd" materialName="gocd" />
      </materials>
      <stage name="test" cleanWorkingDir="true">
        <jobs>
          <job name="brakeman" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bundle" workingdir="security/rails">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle" workingdir="security/rails">
                <arg>exec</arg>
                <arg>brakeman</arg>
                <arg>../../gocd/server/webapp/WEB-INF/rails.new</arg>
                <arg>-o</arg>
                <arg>report.html</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="report.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="security/rails/report.html" />
            </artifacts>
          </job>
          <job name="dependency-check" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="./gradlew" workingdir="gocd">
                <arg>dependencyUpdates</arg>
                <arg>dependencyCheck</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Report" path="dependency-check-report.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="gocd/server/target/reports/dependency-check-report.html" />
            </artifacts>
          </job>
          <job name="bundler-audit" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="gem" workingdir="gocd/server/webapp/WEB-INF/rails.new">
                <arg>install</arg>
                <arg>bundler-audit</arg>
                <arg>--bindir=bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="bin/bundle-audit" workingdir="gocd/server/webapp/WEB-INF/rails.new">
                <arg>check</arg>
                <arg>--update</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ketan-windows-container" lockBehavior="none">
      <materials>
        <git url="https://github.com/gocd-contrib/github-oauth-authorization-plugin" shallowClone="true" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" runInstanceCount="5" elasticProfileId="docker-gocd-dev-build-windows">
            <tasks>
              <exec command="./gradlew">
                <arg>assemble</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="post-release-github-activities">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/build_utilities" dest="build_utilities" materialName="build_utilities" />
        <pipeline pipelineName="PublishStableRelease" stageName="PublishRelease" materialName="publish-stable-release" />
      </materials>
      <stage name="draft-release">
        <jobs>
          <job name="draft-release" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="GITHUB_TOKEN" secure="true">
                <encryptedValue>AES:BbPMEB2CftI16NaJuEZZIg==:+LWIGMPzNPjen9+UWiadP4qBHUjMKhS2aF8cpVMi5PCmRatzJPkkLn0PRfGiPsgSRkpRKOYCS82jtr+v9D5YyZ9a/ampD5dDIb8ZDIaaPDs=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" dest="build_utilities" pipeline="installers/UploadInstallers/PublishStableRelease" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="npm" workingdir="build_utilities">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="node" workingdir="build_utilities">
                <arg>draft_new_release.js</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="smoke-experimental">
      <params>
        <param name="installers-pipeline-name">installers</param>
        <param name="plugins-pipeline-name">plugins/installers</param>
        <param name="sahi-working-dir">sahi-tests</param>
        <param name="selenium-working-dir">selenium-tests</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/rajiesh/functional-tests.git" branch="sahi-with-latest-ff" shallowClone="true" dest="#{sahi-working-dir}">
          <filter>
            <ignore pattern="*.md" />
          </filter>
        </git>
        <pipeline pipelineName="installers" stageName="dist" materialName="installers" />
        <git url="https://mirrors.gocd.org/git/gocd/ruby-functional-tests" dest="#{selenium-working-dir}" materialName="ruby-functional-tests">
          <filter>
            <ignore pattern="*.md" />
          </filter>
        </git>
      </materials>
      <stage name="Smoke">
        <approval type="manual" />
        <environmentvariables>
          <variable name="TFS_SERVER_URL">
            <value>http://server-name:8080/tfs/</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="firefox" runInstanceCount="15" elasticProfileId="docker-gocd-OOM-tests-centos7">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>!manual,!windows,!server_restart_needed,!flaky_fanin_test,stage1,!enterprise,!SPA,!pipeline_config,!OOM,!vulnerability_tests</value>
              </variable>
              <variable name="WAIT_FOR_BROWSER_STABILIZE">
                <value>20000</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="env" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace clean" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="#{sahi-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="#{sahi-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="#{sahi-working-dir}/target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>gauge config runner_request_timeout 4800000</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="#{sahi-working-dir}/reports" dest="GaugeReports" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-state" dest="server" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/db/h2db" dest="server/db" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ketan-test">
      <environmentvariables>
        <variable name="xxx1">
          <value>xxx1211</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd" />
      </materials>
      <stage name="FastTests">
        <jobs>
          <job name="FastTests" elasticProfileId="ecs-gocd-dev-build-highmem">
            <tasks>
              <exec command="git">
                <arg>clean</arg>
                <arg>-dffx</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>./gradlew check -x server:integrationTest -x server:fastUnitTest -x server:sharedTest -x server:test -Dorg.gradle.workers.max="$(($(nproc)/2+1))"</arg>
                <runif status="passed" />
              </exec>
              <task>
                <pluginConfiguration id="script-executor" version="1" />
                <configuration>
                  <property>
                    <key>script</key>
                    <value>adsfasdf</value>
                  </property>
                </configuration>
                <runif status="passed" />
              </task>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="SlowTests">
        <jobs>
          <job name="SlowTests" runInstanceCount="4" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git">
                <arg>clean</arg>
                <arg>-dffx</arg>
                <arg />
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>server:integrationTest</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="duck-test">
      <materials>
        <git url="https://github.com/arvindsv/random-junk.git" shallowClone="true" dest="foo" autoUpdate="false" />
      </materials>
      <stage name="Stage1_Docker" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="job1_in_stage1" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="sleep">
                <arg>60</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Stage2_K8s" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="job1_in_stage2" elasticProfileId="k8s-gocd-dev-build">
            <tasks>
              <exec command="sleep">
                <arg>60</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Stage3_ECS" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="job1_in_stage3" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="sleep">
                <arg>60</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="akshay-test">
      <materials>
        <git url="https://github.com/akshaydewan/arduino.git" />
      </materials>
      <stage name="test">
        <jobs>
          <job name="test">
            <tasks>
              <exec command="powershell">
                <arg>sleep 10</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>windows</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="jasmine_playground">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd" shallowClone="true" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" runInstanceCount="5" elasticProfileId="docker-gocd-OOM-tests-centos7-ff-old">
            <tasks>
              <exec command="firefox">
                <arg>-v</arg>
                <runif status="passed" />
              </exec>
              <exec command="git">
                <arg>clean</arg>
                <arg>-dffx</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>--parallel</arg>
                <arg>--max-workers</arg>
                <arg>2</arg>
                <arg>clean</arg>
                <arg>jasmine</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="server/webapp/WEB-INF/rails.new/tmp/karma_reports/*.xml" dest="karma" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="plugin-releases-dashboard">
      <timer>0 0 20 * * ?</timer>
      <materials>
        <git url="https://github.com/gocd/gocd-plugin-releases-dashboard" shallowClone="true" />
      </materials>
      <stage name="Publish">
        <jobs>
          <job name="Publish" elasticProfileId="docker-gocd-OOM-tests-centos7">
            <environmentvariables>
              <variable name="GITHUB_TOKEN" secure="true">
                <encryptedValue>AES:TEu+mGAMQLLz014zQ3eCww==:T3yFCmjplA1LaC6lbDtLorwYlZ7SmIO4sHhTHH5v6cApA7RIEfbDGRx+6eeLnGB4+6jxfupZHw9m1yR6YktQYJ6vZfhm5gg+mtoqI638slI=</encryptedValue>
              </variable>
              <variable name="GITHUB_USER">
                <value>gocd-ci-user</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path=.bundle</arg>
                <arg>--jobs=4</arg>
                <arg>--clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add upstream 'https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/gocd/gocd-plugin-releases-dashboard'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake publish REMOTE_NAME=upstream</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="commercial-plugins">
    <authorization>
      <view>
        <role>snap-team</role>
      </view>
      <admins>
        <role>go-committers</role>
      </admins>
    </authorization>
    <pipeline name="Amazon-ECS-Plugin" lockBehavior="none" template="gradle-commercial-plugin">
      <params>
        <param name="gradle-test">test</param>
        <param name="gradle-test-profile">gocd-private-plugin</param>
      </params>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/ecs-elastic-agent-plugin" />
      </materials>
    </pipeline>
    <pipeline name="Ldap-Authorization-Plugin" lockBehavior="none" template="gradle-commercial-plugin">
      <params>
        <param name="gradle-test">test</param>
        <param name="gradle-test-profile">gocd-private-plugin</param>
      </params>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/ldap-authorization-plugin" />
      </materials>
    </pipeline>
    <pipeline name="GoCD-Analytics-Plugin" lockBehavior="none" template="gradle-commercial-plugin">
      <params>
        <param name="gradle-test">test integrationTest</param>
        <param name="gradle-test-profile">ecs-enterprise-postgres-build</param>
      </params>
      <environmentvariables>
        <variable name="DB_HOST">
          <value>localhost</value>
        </variable>
        <variable name="DB_PORT">
          <value>5432</value>
        </variable>
        <variable name="DB_USER">
          <value>go</value>
        </variable>
        <variable name="DB_NAME">
          <value>gocd_test</value>
        </variable>
        <variable name="DB_PASSWORD">
          <value>postgres</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/gocd-analytics-plugin" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="commercial-plugins-PR">
    <authorization>
      <view>
        <role>go-committers</role>
      </view>
      <admins>
        <role>go-committers</role>
      </admins>
    </authorization>
    <pipeline name="Amazon-ECS-Plugin-PR" lockBehavior="none" template="gradle-commercial-plugin-pr">
      <params>
        <param name="gradle-test-profile">gocd-private-plugin</param>
      </params>
      <materials>
        <scm ref="d20198b9-a63b-4951-b096-ea9e94f39e4f" />
      </materials>
    </pipeline>
    <pipeline name="Ldap-Authorization-Plugin-PR" lockBehavior="none" template="gradle-commercial-plugin-pr">
      <params>
        <param name="gradle-test-profile">gocd-private-plugin</param>
      </params>
      <materials>
        <scm ref="74d369df-897a-41e0-b7d6-a3189eab1b09" />
      </materials>
    </pipeline>
    <pipeline name="GoCD-Analytics-Plugin-PR" template="gradle-commercial-plugin-pr">
      <params>
        <param name="gradle-test-profile">ecs-enterprise-postgres-build</param>
      </params>
      <environmentvariables>
        <variable name="DB_HOST">
          <value>localhost</value>
        </variable>
        <variable name="DB_PORT">
          <value>5432</value>
        </variable>
        <variable name="DB_USER">
          <value>go</value>
        </variable>
        <variable name="DB_NAME">
          <value>gocd_test</value>
        </variable>
        <variable name="DB_PASSWORD">
          <value>postgres</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="3b2d3937-07f2-42b6-833d-d80529c5c7dc" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="go-cd-contrib">
    <authorization>
      <view>
        <user>view</user>
        <user>tinozza</user>
      </view>
    </authorization>
    <pipeline name="gocd-build-status-notifier">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd-contrib/gocd-build-status-notifier" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-cx</arg>
                <arg>./release.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="dist/*" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gocd-contrib-docker-swarm-elastic-agents" lockBehavior="none" template="docker-plugins-build">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd-contrib/docker-swarm-elastic-agents" />
      </materials>
    </pipeline>
    <pipeline name="docker-elastic-agents" template="docker-plugins-build">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd-contrib/docker-elastic-agents" />
      </materials>
    </pipeline>
    <pipeline name="gocd-golang-agent">
      <environmentvariables>
        <variable name="BUILD_VERSION">
          <value>1.93</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/gocd-contrib/gocd-golang-agent.git" shallowClone="true" dest="src/github.com/gocd-contrib/gocd-golang-agent" />
        <git url="https://github.com/satori/go.uuid" dest="src/github.com/satori/go.uuid" />
        <git url="https://github.com/xli/assert" dest="src/github.com/xli/assert" />
        <git url="https://github.com/bmatcuk/doublestar" dest="src/github.com/bmatcuk/doublestar" />
        <git url="https://github.com/jstemmer/go-junit-report" dest="src/github.com/jstemmer/go-junit-report" />
      </materials>
      <stage name="test_runner">
        <jobs>
          <job name="test_runner">
            <tasks>
              <exec command="go">
                <arg>run</arg>
                <arg>src/github.com/gocd-contrib/gocd-golang-agent/build/build.go</arg>
                <arg>--buildbinary=false</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="testreport.xml" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="building_binary">
        <approval type="manual" />
        <jobs>
          <job name="build_binary">
            <environmentvariables>
              <variable name="BINTRAY_USER" secure="true">
                <encryptedValue>AES:B2fpjbDEXq+/ncwIoIvY1g==:eMY/EdJsHc8Szj4qYhQIl7YBTmiAVX2GninsNggeV8vG2CSfOogdmU0IKBtuMXcM</encryptedValue>
              </variable>
              <variable name="BINTRAY_TOKEN" secure="true">
                <encryptedValue>AES:59zUgS+sbQ6CBQApvxnckQ==:2wXfCitVhFsV5HCI1zd6KJ8kkwx9IMJbJ0pPQKO1jSs2aBhvjwDhHh/ZLP13jkZZGCGPbKavJ9AswYHcWc2No2k8GmxnohZu6mnYGRthnjY=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="go">
                <arg>run</arg>
                <arg>src/github.com/gocd-contrib/gocd-golang-agent/build/build.go</arg>
                <arg>--buildall</arg>
                <arg>--runtest=false</arg>
                <arg>--upload</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="go-cd-contrib-bhkwan">
      <environmentvariables>
        <variable name="BUILD_VERSION">
          <value>1.1</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/barrowkwan/gocd-golang-agent.git" branch="windows_agent" shallowClone="true" dest="src/github.com/gocd-contrib/gocd-golang-agent" />
        <git url="https://github.com/satori/go.uuid" dest="src/github.com/satori/go.uuid" />
        <git url="https://github.com/xli/assert" dest="src/github.com/xli/assert" />
        <git url="https://github.com/bmatcuk/doublestar" dest="src/github.com/bmatcuk/doublestar" />
        <git url="https://github.com/jstemmer/go-junit-report" dest="src/github.com/jstemmer/go-junit-report" />
      </materials>
      <stage name="test_runner">
        <jobs>
          <job name="test_runner">
            <tasks>
              <exec command="go">
                <arg>run</arg>
                <arg>src/github.com/gocd-contrib/gocd-golang-agent/build/build.go</arg>
                <arg>--buildbinary=false</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="testreport.xml" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="building_binary">
        <jobs>
          <job name="building_binary">
            <tasks>
              <exec command="go">
                <arg>run</arg>
                <arg>src/github.com/gocd-contrib/gocd-golang-agent/build/build.go</arg>
                <arg>--buildall</arg>
                <arg>--runtest=false</arg>
              </exec>
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="go-nuget-poller-plugin-2.0">
      <materials>
        <git url="https://github.com/alisonps/go-nuget-poller-plugin-2.0.git" dest="src/github.com/alisonps/go-nuget-poller-plugin-2.0" materialName="NugetPlugin" />
      </materials>
      <stage name="build-and-test">
        <jobs>
          <job name="build-and-test">
            <tasks>
              <exec command="./gradlew" workingdir="src/github.com/alisonps/go-nuget-poller-plugin-2.0">
                <arg>--profile</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>linux</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gitter-activity-feed-plugin">
      <materials>
        <git url="https://github.com/gocd-contrib/gitter-activity-feed-plugin.git" />
      </materials>
      <stage name="test-runner">
        <jobs>
          <job name="test-runner" elasticProfileId="docker-gocd-plugin-builds">
            <tasks>
              <exec command="./gradlew" args="--parallel --max-workers 2 clean assemble test">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="build/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="build/reports/tests/**/*.*" dest="JUnitResults" />
              <artifact type="build" src="build/libs/*" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gitter-notifier">
      <materials>
        <git url="https://github.com/gocd-contrib/gitter-notifier.git" />
      </materials>
      <stage name="test-runner">
        <jobs>
          <job name="test-runner" elasticProfileId="docker-gocd-plugin-builds">
            <tasks>
              <exec command="./gradlew" args="--parallel --max-workers 2 clean assemble test">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="build/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="build/reports/tests/**/*.*" dest="JUnitResults" />
              <artifact type="build" src="build/libs/*" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="github-oauth-authorization-plugin" lockBehavior="none" template="gocd-contrib-plugin">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd-contrib/github-oauth-authorization-plugin" materialName="github-oauth-authorization-plugin" />
      </materials>
    </pipeline>
    <pipeline name="google-oauth-authorization-plugin" lockBehavior="none" template="gocd-contrib-plugin">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd-contrib/google-oauth-authorization-plugin" materialName="google-oauth-authorization-plugin" />
      </materials>
    </pipeline>
    <pipeline name="gitlab-oauth-authorization-plugin" lockBehavior="none" template="gocd-contrib-plugin">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd-contrib/gitlab-oauth-authorization-plugin" materialName="gitlab-oauth-authorization-plugin" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="go-cd-contrib-pr">
    <authorization>
      <view>
        <user>view</user>
      </view>
    </authorization>
    <pipeline name="docker-elastic-agents-pr" lockBehavior="none" template="docker-plugins-build">
      <materials>
        <scm ref="76c7fc5b-a59d-435b-bb88-decb1e2b269f" />
      </materials>
    </pipeline>
    <pipeline name="docker-swarm-elastic-agents-pr" lockBehavior="none" template="docker-plugins-build">
      <materials>
        <scm ref="def0f5bf-362d-472a-a8d4-8afea01522dc" />
      </materials>
    </pipeline>
    <pipeline name="github-oauth-authorization-plugin-PR" template="gocd-contrib-plugin">
      <materials>
        <scm ref="1c265067-d271-4cfe-81ae-dd2cf2eb3b2d" />
      </materials>
    </pipeline>
    <pipeline name="google-oauth-authorization-plugin-pr" template="gocd-contrib-plugin">
      <materials>
        <scm ref="5f77a507-d0e8-4a04-a64a-4ba298f445e3" dest="google-oauth-authorization-plugin" />
      </materials>
    </pipeline>
    <pipeline name="gitlab-oauth-authorization-plugin-pr" template="gocd-contrib-plugin">
      <materials>
        <scm ref="3c50f1cd-83f4-4b84-80e9-f9751bafb57c" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="VM-Images">
    <authorization>
      <view>
        <role>view</role>
      </view>
    </authorization>
    <pipeline name="VM_Image_Factory">
      <materials>
        <git url="https://github.com/barrowkwan/gocd_vm_builder.git" />
      </materials>
      <stage name="vm_builder">
        <environmentvariables>
          <variable name="vm_build_version">
            <value>1.0</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="qemu_centos_7.2">
            <environmentvariables>
              <variable name="TARGET">
                <value>centos</value>
              </variable>
              <variable name="VERSION">
                <value>7.2</value>
              </variable>
              <variable name="CLOUD_INIT">
                <value>True</value>
              </variable>
              <variable name="GOCD_AGENT">
                <value>True</value>
              </variable>
              <variable name="OS_AUTH_URL">
                <value>https://openstack.go.cd:35357/v2.0</value>
              </variable>
              <variable name="OS_TENANT_NAME">
                <value>gocd_playground</value>
              </variable>
              <variable name="OS_USERNAME">
                <value>gocd_playground</value>
              </variable>
              <variable name="OS_REGION_NAME">
                <value>GoCD</value>
              </variable>
              <variable name="OS_TENANT_ID">
                <value>gocd_playground</value>
              </variable>
              <variable name="VM_TYPE">
                <value>qemu</value>
              </variable>
              <variable name="ROOT_PASSWORD" secure="true">
                <encryptedValue>AES:94tWF5sVBA0noOzSNtWSkw==:vWwTzIQbLzEdaLcVzxPbSVoE2dGOHBpOsWMg83jrP5E=</encryptedValue>
              </variable>
              <variable name="SSH_USERNAME" secure="true">
                <encryptedValue>AES:sNEbu1xapN3+nZ8EIrVMFw==:1Etwfitl5mxNea169or8WQ==</encryptedValue>
              </variable>
              <variable name="SSH_PASSWORD" secure="true">
                <encryptedValue>AES:wt9fbiDwtXYvBoC0rBdmTw==:XDPstXUAArOOfEVqxYsx0g84v8XSNeUR8MP3zCRroDQ=</encryptedValue>
              </variable>
              <variable name="OS_PASSWORD" secure="true">
                <encryptedValue>AES:Yk5v1KEsAO8nmh55N2xu2w==:HQHL/bcrgc03mmvUsJIHowd8Gf5npA+MjOIz2I03FuE=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <rake buildfile="Rakefile" target="gocd_vm_builder:default" />
            </tasks>
            <resources>
              <resource>vm_builder</resource>
              <resource>qemu</resource>
            </resources>
          </job>
          <job name="qemu_centos_6.7">
            <environmentvariables>
              <variable name="TARGET">
                <value>centos</value>
              </variable>
              <variable name="VERSION">
                <value>6.7</value>
              </variable>
              <variable name="CLOUD_INIT">
                <value>True</value>
              </variable>
              <variable name="GOCD_AGENT">
                <value>True</value>
              </variable>
              <variable name="OS_AUTH_URL">
                <value>https://openstack.go.cd:35357/v2.0</value>
              </variable>
              <variable name="OS_TENANT_NAME">
                <value>gocd_playground</value>
              </variable>
              <variable name="OS_USERNAME">
                <value>gocd_playground</value>
              </variable>
              <variable name="OS_REGION_NAME">
                <value>GoCD</value>
              </variable>
              <variable name="OS_TENANT_ID">
                <value>gocd_playground</value>
              </variable>
              <variable name="VM_TYPE">
                <value>qemu</value>
              </variable>
              <variable name="ROOT_PASSWORD" secure="true">
                <encryptedValue>AES:XEagbRfzxpiESGoLB7Qijw==:vQTIKwD+nCZGKQOrT5lSekEa5zl50Ww4m1i1NVIndvs=</encryptedValue>
              </variable>
              <variable name="SSH_USERNAME" secure="true">
                <encryptedValue>AES:X/X4AHN31ABsEQAxbFRpgg==:Be6gR6biafpkLNult3MGBg==</encryptedValue>
              </variable>
              <variable name="SSH_PASSWORD" secure="true">
                <encryptedValue>AES:09/9z3wcXI3JUisAz1ETNw==:PzOSmHFxDMhC0YNDUcEwvL+Lzh+UpnYnBU6uZc7BQts=</encryptedValue>
              </variable>
              <variable name="OS_PASSWORD" secure="true">
                <encryptedValue>AES:ryFayZwc+zTaQ25z3z8ckA==:FTiT+2j7Qe2gAJy78DUZG5vX0Hu0tI8GhzJMDi7/vxo=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <rake buildfile="Rakefile" target="gocd_vm_builder:default" />
            </tasks>
            <resources>
              <resource>vm_builder</resource>
              <resource>qemu</resource>
            </resources>
          </job>
          <job name="qemu_ubuntu_14.04">
            <environmentvariables>
              <variable name="TARGET">
                <value>ubuntu</value>
              </variable>
              <variable name="VERSION">
                <value>14.04</value>
              </variable>
              <variable name="CLOUD_INIT">
                <value>True</value>
              </variable>
              <variable name="GOCD_AGENT">
                <value>True</value>
              </variable>
              <variable name="OS_AUTH_URL">
                <value>https://openstack.go.cd:35357/v2.0</value>
              </variable>
              <variable name="OS_TENANT_NAME">
                <value>gocd_playground</value>
              </variable>
              <variable name="OS_USERNAME">
                <value>gocd_playground</value>
              </variable>
              <variable name="OS_REGION_NAME">
                <value>GoCD</value>
              </variable>
              <variable name="OS_TENANT_ID">
                <value>gocd_playground</value>
              </variable>
              <variable name="VM_TYPE">
                <value>qemu</value>
              </variable>
              <variable name="ROOT_PASSWORD" secure="true">
                <encryptedValue>AES:9u3+XB24LF7GYadOfFKmUw==:ru5yelNG7e78MgiIntnSpfXHYw2rPwU+TvCmoap9WyY=</encryptedValue>
              </variable>
              <variable name="SSH_USERNAME" secure="true">
                <encryptedValue>AES:R6U15fTpayBQ3dWIzG3HwQ==:AIta7b2xvC9PS4RIOGid9A==</encryptedValue>
              </variable>
              <variable name="SSH_PASSWORD" secure="true">
                <encryptedValue>AES:uk0rWUOTgnTLgJ3rEEGHnQ==:CGyoMQV8Q76WisbEIEwl0oUdTKt4fwQDa0PwSvXRJFU=</encryptedValue>
              </variable>
              <variable name="OS_PASSWORD" secure="true">
                <encryptedValue>AES:ZitND/XL/1ZLzkPShAITxw==:J/pc0CQVi7Nxwul8wy83rYRIK87CIK2qOsF0wF0C10c=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <rake buildfile="Rakefile" target="gocd_vm_builder:default" />
            </tasks>
            <resources>
              <resource>vm_builder</resource>
              <resource>qemu</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Test_Golang_agent">
      <materials>
        <git url="https://github.com/barrowkwan/sample-plugins" />
      </materials>
      <stage name="First_Stage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/echo">
                <arg>"Hello World"</arg>
              </exec>
            </tasks>
            <resources>
              <resource>vm_builder</resource>
              <resource>qemu</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="Second_Stage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/echo">
                <arg>"Hello Second Stage"</arg>
              </exec>
            </tasks>
            <resources>
              <resource>vm_builder</resource>
              <resource>qemu</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Test">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" shallowClone="true" dest="foo" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sleep">
                <arg>500</arg>
                <runif status="passed" />
              </exec>
              <task>
                <pluginConfiguration id="script-executor" version="0.2" />
                <configuration>
                  <property>
                    <key>script</key>
                    <value>./foo.sh</value>
                  </property>
                </configuration>
                <runif status="passed" />
              </task>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Golang_GoCD_Example">
    <authorization>
      <view>
        <user>view</user>
        <user>arvindsv</user>
        <role>golang_goagent_demo</role>
      </view>
      <operate>
        <role>golang_goagent_demo</role>
      </operate>
      <admins>
        <user>arvindsv</user>
        <role>go-committers</role>
      </admins>
    </authorization>
    <pipeline name="Standalone">
      <materials>
        <git url="https://github.com/barrowkwan/gocd_golang_hello.git" dest="src/github.com/barrowkwan/gocd_golang_hello" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="src/github.com/barrowkwan/gocd_golang_hello/build.sh" />
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="testreport.xml" />
              <artifact type="build" src="bin/helloworld_linux" />
              <artifact type="build" src="bin/helloworld_osx" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="App_with_Unversioned_Libraries">
      <materials>
        <git url="https://github.com/barrowkwan/gocd_golang_hello_ext.git" shallowClone="true" dest="src/github.com/barrowkwan/gocd_golang_hello_ext" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="src/github.com/barrowkwan/gocd_golang_hello_ext/build.sh" />
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="testreport.xml" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Golang_GoAgent_Debug">
      <materials>
        <git url="https://github.com/barrowkwan/gocd_golang_hello.git" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="touch">
                <arg>test.txt</arg>
              </exec>
            </tasks>
            <resources>
              <resource>golang_test</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="performance">
    <authorization>
      <view>
        <user>view</user>
        <role>view</role>
      </view>
    </authorization>
  </pipelines>
  <pipelines group="GoCD_Openstack_Elastic_Plugin">
    <authorization>
      <view>
        <user>view</user>
      </view>
      <admins>
        <role>go-committers</role>
      </admins>
    </authorization>
    <pipeline name="Demo">
      <materials>
        <git url="https://github.com/gocd-contrib/openstack-elastic-agent.git" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" elasticProfileId="openstack-analytics-staging">
            <tasks>
              <exec command="echo">
                <arg>"Hello World"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="cookbooks">
    <authorization>
      <view>
        <user>view</user>
        <user>tomzo</user>
      </view>
    </authorization>
    <pipeline name="go-cookbook" template="go-cd-cookbook">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/go-cookbook" />
      </materials>
    </pipeline>
    <pipeline name="go-cookbook-pr" lockBehavior="none" template="go-cd-cookbook">
      <materials>
        <scm ref="d205fef6-e2e9-4d63-a891-9e2fa316695d" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="plugin-api-docs">
    <authorization>
      <view>
        <user>view</user>
        <user>doc_pipeline_creator</user>
        <role>go-committers</role>
        <role>snap-team</role>
        <role>view</role>
      </view>
      <operate>
        <role>go-committers</role>
      </operate>
      <admins>
        <user>doc_pipeline_creator</user>
      </admins>
    </authorization>
    <pipeline name="plugin-api.go.cd-master" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-PR" lockBehavior="none">
      <materials>
        <scm ref="4c49e8f9-ff7b-4623-a9f9-231fb4fc6944" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4 --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec middleman build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.5.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.5.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.4.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.4.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.3.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.3.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.2.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.2.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.1.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.1.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.12.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.12.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.11.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.11.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.10.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.10.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.9.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.9.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.8.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.8.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.7.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.7.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.6.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.6.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-16.5.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-16.5.0" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.6.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.6.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.7.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.7.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.8.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.8.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.9.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.9.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.10.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.10.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.11.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.11.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-17.12.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-17.12.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-18.1.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-18.1.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-18.2.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-18.2.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="plugin-api.go.cd-release-18.3.0" lockBehavior="none" template="plugin-api-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/plugin-api.go.cd" branch="release-18.3.0" shallowClone="true" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="gocd-api-docs">
    <authorization>
      <view>
        <user>view</user>
        <user>doc_pipeline_creator</user>
        <role>go-committers</role>
        <role>snap-team</role>
        <role>view</role>
      </view>
      <operate>
        <role>go-committers</role>
      </operate>
      <admins>
        <user>doc_pipeline_creator</user>
      </admins>
    </authorization>
    <pipeline name="gocd-api.go.cd-master" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-PR" lockBehavior="none">
      <materials>
        <scm ref="6d69706f-756b-4b17-81b6-b8e3bb095f8f" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec middleman build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="api.go.cd-release-17.5.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.5.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.4.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.4.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-17.3.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.3.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-17.2.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.2.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-17.1.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.1.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.12.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.12.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.11.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.11.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.10.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.10.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.9.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.9.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.8.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.8.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.7.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.7.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.6.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.6.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-api.go.cd-release-16.5.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-16.5.0" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.6.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.6.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.7.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.7.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.8.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.8.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.9.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.9.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.10.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.10.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.11.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.11.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-17.12.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-17.12.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-18.1.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-18.1.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-18.2.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-18.2.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="api.go.cd-release-18.3.0" lockBehavior="none" template="api.go.cd">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/api.go.cd" branch="release-18.3.0" shallowClone="true" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="cloud">
    <authorization>
      <view>
        <user>view</user>
      </view>
    </authorization>
    <pipeline name="docker">
      <environmentvariables>
        <variable name="TOKEN" secure="true">
          <encryptedValue>AES:9aOCv2JXasP/KGcDjAzeYg==:1xyEQemu89vLWvdQ7q2mP58RKOJ+hkp+Vdj6M7R/dcGPFb1CNEXi8l25bSVOUzXpl5otTBHghwgean0ynQNcpqZSmF4F4ozDK1X5kfhuqyfZO2XgLDPvmgnwlBdmIvsI</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docker-gocd-server" dest="docker-gocd-server">
          <filter>
            <ignore pattern="Dockerfile" />
            <ignore pattern="README.md" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/docker-gocd-agent" dest="docker-gocd-agent">
          <filter>
            <ignore pattern="Dockerfile" />
            <ignore pattern="README.md" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/docker-test" dest="docker-test" />
        <pipeline pipelineName="UploadInstallers" stageName="UploadInstallers" materialName="UploadInstallers" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build">
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="Installers/UploadInstallers" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p ~/.docker &amp;&amp; echo "{\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$TOKEN\"}}}" &gt; ~/.docker/config.json</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docker-gocd-server">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; export  GOCD_SERVER_DOWNLOAD_URL=https://download.gocd.org/experimental/binaries/$(jq -r '.go_full_version' ../version.json)/generic/go-server-$(jq -r '.go_full_version' ../version.json).zip &amp;&amp; export GOCD_FULL_VERSION=$(jq -r '.go_full_version' ../version.json) &amp;&amp; export GOCD_GIT_SHA=$(jq -r '.git_sha' ../version.json) &amp;&amp; rake  --trace docker_push_experimental</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docker-gocd-agent">
                <arg>-c</arg>
                <arg>export GOCD_VERSION=$(jq -r '.go_version' ../version.json) &amp;&amp; export  GOCD_AGENT_DOWNLOAD_URL=https://download.gocd.org/experimental/binaries/$(jq -r '.go_full_version' ../version.json)/generic/go-agent-$(jq -r '.go_full_version' ../version.json).zip &amp;&amp; export GOCD_FULL_VERSION=$(jq -r '.go_full_version' ../version.json) &amp;&amp; export GOCD_GIT_SHA=$(jq -r '.git_sha' ../version.json) &amp;&amp; rake  --trace docker_push_experimental</arg>
                <runif status="passed" />
              </exec>
              <exec command="docker">
                <arg>logout</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>centos7</resource>
              <resource>docker-build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="test">
        <jobs>
          <job name="test">
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="dist/meta/version.json" pipeline="Installers/UploadInstallers" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mkdir -p ~/.docker &amp;&amp; echo "{\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$TOKEN\"}}}" &gt; ~/.docker/config.json</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="docker-test">
                <arg>-c</arg>
                <arg>export GOCD_FULL_VERSION=$(jq -r '.go_full_version' ../version.json)  &amp;&amp; bundle install &amp;&amp; bundle exec rake</arg>
                <runif status="passed" />
              </exec>
              <exec command="docker">
                <arg>logout</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>centos7</resource>
              <resource>docker-build</resource>
            </resources>
            <artifacts>
              <artifact type="build" src="docker-test/rspec.html" dest="result" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="gocd-developer-docs">
    <authorization>
      <view>
        <user>view</user>
        <role>go-committers</role>
        <role>snap-team</role>
        <role>view</role>
        <role>website-team</role>
      </view>
      <operate>
        <role>go-committers</role>
      </operate>
      <admins>
        <user>doc_pipeline_creator</user>
      </admins>
    </authorization>
    <pipeline name="gocd-developer-docs-master" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.5.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.5.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.6.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.6.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.7.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.7.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.8.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.8.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.9.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.9.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.10.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.10.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.11.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.11.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-16.12.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-16.12.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-17.1.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.1.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-17.2.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.2.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-release-17.3.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.3.0" />
      </materials>
    </pipeline>
    <pipeline name="gocd-developer-docs-PR" lockBehavior="none">
      <materials>
        <scm ref="df6b888d-ffd0-4180-a2bd-c4360e3d8728" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle install --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.4.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.4.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.5.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.5.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="DeveloperDocsDocsPushToS3" template="GhPagesToS3">
      <environmentvariables>
        <variable name="S3_BUCKET" secure="true">
          <encryptedValue>AES:0K/Kbhi9B8P9Z4g2GYQNqg==:0SG87ttArh0ljVIRLykPpmgJrYPF8jNFFJwq+6JiycbPg7WyG8pezwaMVAk83/AD2KlqUR3ebr///XD1ldwdKXgJvaELlikUl2DVFpvSsPo=</encryptedValue>
        </variable>
        <variable name="AWS_ACCESS_KEY_ID" secure="true">
          <encryptedValue>AES:FhtXF2m0GV2tkJ03LzmsZA==:tIXYOty8PvDlHElW8pUTMj6M7dwUgtf2mqhP4Z8ki8GhTmDrFAo3gsvag3638H+a</encryptedValue>
        </variable>
        <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
          <encryptedValue>AES:9r4yNNCXmMVfPtL7FqCI2A==:yFBhX5sf7dDJcHJGkveodqtBOCNI26Sfveo9ibLZ+/jdaeashQSUude9drwq/RlNU1Yw44mcaYa4bPbFbCLrkT0TU3sk/00iMq3VQDvrNvw=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="gh-pages" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.6.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.6.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.7.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.7.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.8.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.8.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.9.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.9.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.10.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.10.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.11.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.11.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-17.12.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-17.12.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-18.1.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-18.1.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-18.2.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-18.2.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="developer.go.cd-release-18.3.0" lockBehavior="none" template="gocd-developer-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/developer.go.cd" branch="release-18.3.0" shallowClone="true" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="gocd-help-docs">
    <authorization>
      <view>
        <user>view</user>
        <user>doc_pipeline_creator</user>
        <role>go-committers</role>
        <role>snap-team</role>
        <role>view</role>
      </view>
      <operate>
        <role>go-committers</role>
      </operate>
      <admins>
        <user>doc_pipeline_creator</user>
      </admins>
    </authorization>
    <pipeline name="gocd-docs.go.cd-master" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-PR" lockBehavior="none">
      <materials>
        <scm ref="4b2cfb9e-95ed-4b39-9ac0-cf007f6c7c41" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle install --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="HelpDocsPushToS3" template="GhPagesToS3">
      <environmentvariables>
        <variable name="S3_BUCKET" secure="true">
          <encryptedValue>AES:mfHrz+LxAztWkmvp11Kd3w==:A4L0g/aEtX7CqS3SWOn1MZj2giTTRCxWnK58iAHPCy3dBet4tgOXO43PjckBnvrb3XM5sMBUf4AcmFf0zhPkxA==</encryptedValue>
        </variable>
        <variable name="AWS_ACCESS_KEY_ID" secure="true">
          <encryptedValue>AES:fmhA1ur11VEkgK4JbuMsEA==:GXZ6jmbeSNnDPaIYhNCsxov6hZwN0H/2Ll5UOW/N2d+uleI0OQYwmLAPeH7w2Yja</encryptedValue>
        </variable>
        <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
          <encryptedValue>AES:WyB4BrGC6ybGZ7uCLfvPOg==:Gno7k5oRPWLfgXkziNxlrRNHBTxcWNuuWN4Z/WGCgEhtTYJPZN2IH3g2qZjIC04l4/oG6Hhmrp9PyYsLoJJhCEdxqlFUFXdHaseiBGQtwOw=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="gh-pages" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.5.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.5.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.4.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.4.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-17.3.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.3.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-17.2.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.2.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-17.1.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.1.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.12.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.12.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.11.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.11.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.10.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.10.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.9.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.9.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.8.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.8.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.7.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.7.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.6.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.6.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="gocd-docs.go.cd-release-16.5.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-16.5.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.6.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.6.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.7.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.7.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.8.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.8.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.9.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.9.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.10.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.10.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.11.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.11.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-17.12.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-17.12.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-18.1.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-18.1.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-18.2.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-18.2.0" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="docs.go.cd-release-18.3.0" lockBehavior="none" template="gocd-help-docs">
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docs.go.cd" branch="release-18.3.0" shallowClone="true" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="gocd-website">
    <authorization>
      <view>
        <user>view</user>
        <role>go-committers</role>
        <role>snap-team</role>
        <role>view</role>
        <role>website-team</role>
      </view>
      <operate>
        <role>go-committers</role>
        <role>website-team</role>
      </operate>
    </authorization>
    <pipeline name="gocd-www.go.cd" lockBehavior="none">
      <environmentvariables>
        <variable name="BUILD_MAP_USER">
          <value>gocd-ci-user</value>
        </variable>
        <variable name="BUILD_MAP_PASSWORD" secure="true">
          <encryptedValue>AES:Duf+jHu8GCGiC13nyP/s1g==:xVidjy1Y/eTESYMQb9t5aZPGQGhkcBivXdkVhpaZOpNUw/lClwvZSjffDVoPc344GEBG0KeR9TbMzgU/UdiG3qZ3FI1sRJFOKgkqx/QslvY=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/www.go.cd" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4 --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Preview">
        <environmentvariables>
          <variable name="S3_BUCKET">
            <value>previewgocdorg-previewgocdorgs3-1nx77odllx1db</value>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:voNRlfaCsNQZAD9jTvrxMQ==:brbKNNqbYL7JfjCxBd5Oo3m0F+CKo8YVO/8jJvykr7O5kQpsjEjQeAzduUDBhful</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:4QY2FEMjLafHrlk+Lgctkg==:j7cFLcJffbhoAQMczW66vElpzmBV/Yllk5BnX5l6+seHb+RKhTkFxWLU84qpdG6RlEqq1rwr+0Un9ntVyM03uzlaU/+D4TFyOhg037tiFcg=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="preview_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4 --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add preview https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/preview.go.cd.git</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ALLOW_DIRTY=true bundle exec rake publish --trace REMOTE_NAME=preview BASE_URL='https://preview.gocd.org' DEPLOY_ENVIRONMENT=preview</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Publish">
        <approval type="manual" />
        <environmentvariables>
          <variable name="S3_BUCKET">
            <value>wwwgocdorg-gocdorgs3-1kgj1gcpc3g5h</value>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:c63WZNH8tZtCl0RoSCZrYA==:Py3DTjZawYPznl/YibOCvFB70JRSqZmPDEZqksMgJVh+fNHp7LymIEy5D8T8vRRz</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:rmK4mX5Qsvmkd18jK9DhOg==:Z4lgUSk7LwyTGxgXq1RZPZS0kk4LhqNVKkZ1j1PVJbeH8Hb+u9OjnRjY5dmBUGHMIE7hEmiTTYunsR2uXwPz/i2/VmjYcEkDoRtqhn/UtNE=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="publish_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4 --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add real https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/www.go.cd.git</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ALLOW_DIRTY=true bundle exec rake publish --trace REMOTE_NAME=real BASE_URL=https://www.gocd.org DEPLOY_ENVIRONMENT=live</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="www.go.cd-PR">
      <materials>
        <scm ref="a47f0660-78c4-4141-8da4-5b8c5c54ada5" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build" timeout="0" elasticProfileId="k8s-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4 --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="enterprise">
    <authorization>
      <admins>
        <user>enterprise</user>
        <role>go-committers</role>
      </admins>
    </authorization>
    <pipeline name="go-addon-build" template="template-addon-build">
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/enterprise" shallowClone="true" />
      </materials>
    </pipeline>
    <pipeline name="go-packages">
      <params>
        <param name="core">cruise_trunk/core</param>
        <param name="GO_VERSION">18.4.0</param>
        <param name="enterprise_trunk">cruise_trunk</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>#{GO_VERSION}</value>
        </variable>
        <variable name="GOCD_BUILD_PACKAGE">
          <value>https://build.gocd.org/go/files/installers</value>
        </variable>
        <variable name="GOCD_USER">
          <value>view</value>
        </variable>
        <variable name="GOCD_PASSWORD" secure="true">
          <encryptedValue>AES:3N37jOxdi3kpRB2ocsU6Pg==:Kb4cEi5tohPf4j3XMTTDB3VF7lS/TJXgU/sJ4GeTUuo=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/enterprise" shallowClone="true" dest="gocd" materialName="go_trunk" />
        <pipeline pipelineName="go-addon-build" stageName="build-server" materialName="go-postgresql" />
        <git url="https://github.com/gocd/build_map" shallowClone="true" dest="gocd_build_map" materialName="gocd_build_map">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/build_utilities" shallowClone="true" dest="build_utilities" materialName="build_utilities" />
      </materials>
      <stage name="fetch_from_build_go_cd" cleanWorkingDir="true">
        <jobs>
          <job name="fetch" elasticProfileId="ecs-enterprise-postgres-build">
            <tasks>
              <exec command="ruby" workingdir="build_utilities">
                <arg>fetch_packages_from_gocd.rb</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="build_utilities/zip/*.zip" dest="pkg/zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="dist" artifactCleanupProhibited="true" cleanWorkingDir="true">
        <jobs>
          <job name="rpm" timeout="0" elasticProfileId="ecs-enterprise-postgres-build">
            <environmentvariables>
              <variable name="BUNDLE_PLUGINS">
                <value>Y</value>
              </variable>
              <variable name="PLUGIN_DOWNLOAD_LOCATION">
                <value>downloaded_plugins</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="true">
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="acceptance_pg_gauge" labeltemplate="${go-packages}">
      <params>
        <param name="priority_tags">!windows,!server_restart_needed,!flaky_fanin_test,stage1,!h2db_only,!oss,!SPA,!pipeline_config,!manual</param>
        <param name="plugin_tags">!manual,!windows,!server_restart_needed,!flaky_fanin_test,!stage1,!h2db_only,plugins-tests,!oss,!SPA,!pipeline_config,!manual</param>
        <param name="BROWSER">firefox</param>
      </params>
      <environmentvariables>
        <variable name="USE_POSTGRESQL">
          <value>Y</value>
        </variable>
        <variable name="DB_USER">
          <value>go</value>
        </variable>
        <variable name="AGENT_MEM">
          <value>64m</value>
        </variable>
        <variable name="AGENT_MAX_MEM">
          <value>512m</value>
        </variable>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="DB_NAME_PREFIX">
          <value>pg</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="go-packages" stageName="fetch_from_build_go_cd" materialName="go-packages" />
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true" materialName="functional-tests">
          <filter>
            <ignore pattern="*/*.md" />
          </filter>
        </git>
      </materials>
      <stage name="gauge-priority">
        <environmentvariables>
          <variable name="TFS_SERVER_URL">
            <value>http://localhost:8080/tfs</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="firefox-split" runInstanceCount="15" elasticProfileId="docker-enterprise-regression-tests-oldff">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{priority_tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="p4d">
                <arg>-V</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace clean">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="pkg/zip" dest="target" pipeline="go-packages" stage="fetch_from_build_go_cd" job="fetch">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="target" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="target" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="go-addon-build/go-packages" stage="build-addons" job="test-addon">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go">
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>mkdir -pv target/go-server-${GO_VERSION}/addons; mv -v target/business-continuity-addon/*.jar target/go-server-${GO_VERSION}/addons/; mv -v target/postgresql-addon/*.jar target/go-server-${GO_VERSION}/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean">
                    <runif status="passed" />
                  </exec>
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="gauge-plugins">
        <environmentvariables>
          <variable name="DOWNLOAD_PLUGIN">
            <value>Yes</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="firefox-split" runInstanceCount="15" elasticProfileId="docker-enterprise-regression-tests-oldff">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{plugin_tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="pkg/zip" dest="target" pipeline="go-packages" stage="fetch_from_build_go_cd" job="fetch">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="target" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="target" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="go-addon-build/go-packages" stage="build-addons" job="test-addon">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go">
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>mkdir -pv target/go-server-${GO_VERSION}/addons; mv -v target/business-continuity-addon/*.jar target/go-server-${GO_VERSION}/addons/; mv -v target/postgresql-addon/*.jar target/go-server-${GO_VERSION}/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>set -o pipefail; set -x; cd target/go-server-${GO_VERSION}/plugins/external &amp;&amp; curl --silent --fail -uview:password https://build.gocd.org/go/files/plugins/latest/build/latest/build/go-plugins-dist.json | jq --raw-output '.[] .url' | grep -v yum | xargs -I URL curl --silent --fail -uview:password -O URL</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean">
                    <runif status="passed" />
                  </exec>
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="regression-pg-gauge">
      <params>
        <param name="tags">!manual,!windows,!server_restart_needed,!flaky_fanin_test,!stage1,!h2db_only,!plugins-tests,!oss,!ldap,!tfs,!SPA,!pipeline_config</param>
        <param name="server-restart-tags">server_restart_needed</param>
        <param name="BROWSER">firefox</param>
      </params>
      <environmentvariables>
        <variable name="USE_POSTGRESQL">
          <value>Y</value>
        </variable>
        <variable name="DB_USER">
          <value>go</value>
        </variable>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
        <variable name="AGENT_MEM">
          <value>64m</value>
        </variable>
        <variable name="AGENT_MAX_MEM">
          <value>512m</value>
        </variable>
        <variable name="TFS_PRODUCT_KEY" secure="true">
          <encryptedValue>AES:Utxv4D4lracQVa07bVbyvQ==:CSaSMnmMgtchxcMnzKq7eO2RUrxVJSTBxOS/P509IYft/FroPIk4X1yuRiwOYn4p</encryptedValue>
        </variable>
        <variable name="DB_NAME_PREFIX">
          <value>pg</value>
        </variable>
        <variable name="TFS_SERVER_URL">
          <value>https://go-tfs-user.visualstudio.com</value>
        </variable>
        <variable name="TFS_SERVER_PASSWORD" secure="true">
          <encryptedValue>AES:ygD1XllKXSRT5Q9DLu3I+g==:KemkvjuAFWpBubMsMC9XxhveFRo5UuL2k+jjRYfjec79GD6n9g3ZbculzFW2R5cre4Ic35N/OZ5XrgfrjcNdP/WZEG407hmfzZI4Fd8ceKw=</encryptedValue>
        </variable>
        <variable name="TFS_SERVER_USERNAME">
          <value>go.tfs.user@gmail.com</value>
        </variable>
        <variable name="TFS_SERVER_DOMAIN">
          <value />
        </variable>
        <variable name="LDAP_SERVER_IP">
          <value>192.168.184.32</value>
        </variable>
        <variable name="ADDITIONAL_STARTUP_ARGS">
          <value>-Dgocd.environments.show.pipelines=Y</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="go-packages" stageName="fetch_from_build_go_cd" materialName="go-packages" />
        <pipeline pipelineName="acceptance_pg_gauge" stageName="gauge-plugins" materialName="acceptance-gauge" />
        <git url="https://mirrors.gocd.org/git/gocd/functional-tests" shallowClone="true" dest="go_functional_tests" materialName="functional-tests" />
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/tfs-tool" shallowClone="true" dest="tfs-tools" materialName="tfs-tools" />
        <git url="https://mirrors.gocd.org/git/gocd/ruby-functional-tests" shallowClone="true" dest="ruby_functional_tests" materialName="ruby-functional-tests" />
      </materials>
      <stage name="regression">
        <jobs>
          <job name="firefox-split" runInstanceCount="15" elasticProfileId="docker-enterprise-regression-tests-oldff">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" workingdir="go_functional_tests">
                <arg>setup_tfs_cli</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace clean" workingdir="go_functional_tests">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="pkg/zip" dest="go_functional_tests/target" pipeline="go-packages" stage="fetch_from_build_go_cd" job="fetch">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="test-addon">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" workingdir="go_functional_tests">
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="go_functional_tests">
                <arg>-c</arg>
                <arg>mkdir -pv target/go-server-${GO_VERSION}/addons; mv -v target/business-continuity-addon/*.jar target/go-server-${GO_VERSION}/addons/; mv -v target/postgresql-addon/*.jar target/go-server-${GO_VERSION}/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs" workingdir="go_functional_tests">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" workingdir="go_functional_tests">
                    <runif status="passed" />
                  </exec>
                </oncancel>
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="go_functional_tests/reports" dest="GaugeReports" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="go_functional_tests/target/go-state" dest="server" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/config" dest="server/config" />
            </artifacts>
          </job>
          <job name="restart-server-and-run-tests" elasticProfileId="docker-enterprise-regression-tests-oldff">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{server-restart-tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" workingdir="go_functional_tests">
                <arg>--trace</arg>
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="pkg/zip" dest="go_functional_tests/target" pipeline="go-packages" stage="fetch_from_build_go_cd" job="fetch">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="test-addon">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" workingdir="go_functional_tests">
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="go_functional_tests">
                <arg>-c</arg>
                <arg>mkdir -pv target/go-server-${GO_VERSION}/addons; mv -v target/business-continuity-addon/*.jar target/go-server-${GO_VERSION}/addons/; mv -v target/postgresql-addon/*.jar target/go-server-${GO_VERSION}/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs" workingdir="go_functional_tests">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" workingdir="go_functional_tests">
                    <runif status="passed" />
                  </exec>
                </oncancel>
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="go_functional_tests/reports" dest="GaugeReports" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="go_functional_tests/target/go-state" dest="server" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/config" dest="server/config" />
            </artifacts>
          </job>
          <job name="tfs-ladp-tests" elasticProfileId="docker-enterprise-regression-tests-oldff">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>internal,!manual,!6441</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" workingdir="go_functional_tests">
                <arg>setup_tfs_cli</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace clean" workingdir="go_functional_tests">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="pkg/zip" dest="go_functional_tests/target" pipeline="go-packages" stage="fetch_from_build_go_cd" job="fetch">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="test-addon">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" workingdir="go_functional_tests">
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="go_functional_tests">
                <arg>-c</arg>
                <arg>mkdir -pv target/go-server-${GO_VERSION}/addons; mv -v target/business-continuity-addon/*.jar target/go-server-${GO_VERSION}/addons/; mv -v target/postgresql-addon/*.jar target/go-server-${GO_VERSION}/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs" workingdir="go_functional_tests">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" workingdir="go_functional_tests">
                    <runif status="passed" />
                  </exec>
                </oncancel>
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="go_functional_tests/reports" dest="GaugeReports" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="go_functional_tests/target/go-state" dest="server" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/artifacts" dest="server/artifacts" />
            </artifacts>
          </job>
          <job name="analytics-tests" elasticProfileId="docker-enterprise-regression-tests-latestff">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>analytics</value>
              </variable>
              <variable name="EXTENSIONS_USER" secure="true">
                <encryptedValue>AES:gs6gQRsDAb9aKbkxSdtEEg==:nqcU1xbIqoFjUd+9AQzOoTz4WkJ6Box3k5Piu6POgSUlTlfDmK3bLpcb6DldBWI4PKOUL8FGmOLAA0/8iYjLEw==</encryptedValue>
              </variable>
              <variable name="EXTENSIONS_PASSWORD" secure="true">
                <encryptedValue>AES:nU0S3BuBvPTMi2kiv0T/aA==:3Y9vFdbXuKh3KipKTGHJ1uM21Kpkhd+4XqbzjeIy/pCSGkiGSalhRKRvBesZGMhq</encryptedValue>
              </variable>
              <variable name="ANALYTICS_PLUGIN_DOWNLOAD_URL" secure="true">
                <encryptedValue>AES:8s00PFz8svot8zF7xFbeBQ==:C7Q5RV+W/AygHip9UA0Zub3c4OE0RLs1eDzcr/0YRmqqnd2mdvY8bHBkXXA2KWSH5eT5OmYYc4KA9PD6+kTEQhegwiKLznTMAfKJqG54zuPFtfryFKy/aqoBskx4pJq2lcszj2qhVAkI6QJIOeKvN0nwCWfHq8XgtlPM/3LOvfKCBw/ihac3YaIl7O25y/DS</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle" workingdir="ruby_functional_tests">
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <arg>--jobs=4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle" workingdir="ruby_functional_tests">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>clean_test</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="pkg/zip" dest="ruby_functional_tests/target" pipeline="go-packages" stage="fetch_from_build_go_cd" job="fetch">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="ruby_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="ruby_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="ruby_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="test-addon">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>gauge config runner_request_timeout 180000</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle" workingdir="ruby_functional_tests">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>server:prepare</arg>
                <arg>agent:prepare</arg>
                <arg>addons:prepare</arg>
                <arg>plugins:prepare_analytics</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="ruby_functional_tests/reports" dest="GaugeReports" />
              <artifact type="build" src="ruby_functional_tests/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="ruby_functional_tests/target/go_state" dest="server" />
              <artifact type="build" src="ruby_functional_tests/target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="ruby_functional_tests/target/go-server-*/artifacts" dest="server/artifacts" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="run_unstable_tests">
        <jobs>
          <job name="tfs-with-build-command" elasticProfileId="docker-enterprise-regression-tests-oldff">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>internal,tfs,!manual</value>
              </variable>
              <variable name="ADDITIONAL_AGENT_STARTUP_ARGS">
                <value>-Dgo.agent.enableBuildCommandProtocol=true -Dgo.agent.websocket.enabled=true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" workingdir="go_functional_tests">
                <arg>setup_tfs_cli</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace clean" workingdir="go_functional_tests">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="pkg/zip" dest="go_functional_tests/target" pipeline="go-packages" stage="fetch_from_build_go_cd" job="fetch">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="go_functional_tests/target" pipeline="go-addon-build/go-packages" stage="build-addons" job="test-addon">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" workingdir="go_functional_tests">
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="go_functional_tests">
                <arg>-c</arg>
                <arg>mkdir -pv target/go-server-${GO_VERSION}/addons; mv -v target/business-continuity-addon/*.jar target/go-server-${GO_VERSION}/addons/; mv -v target/postgresql-addon/*.jar target/go-server-${GO_VERSION}/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs" workingdir="go_functional_tests">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" workingdir="go_functional_tests">
                    <runif status="passed" />
                  </exec>
                </oncancel>
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="go_functional_tests/reports" dest="GaugeReports" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="go_functional_tests/target/go-state" dest="server" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="go_functional_tests/target/go-server-*/artifacts" dest="server/artifacts" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="upload_addons_to_download_server">
      <environmentvariables>
        <variable name="GO_ENTERPRISE_DIR">
          <value>../go-enterprise</value>
        </variable>
        <variable name="CREDENTIALS" secure="true">
          <encryptedValue>AES:eTDHQojBAsdYOV48Ezn3/Q==:JhmmEEDw7KYKQsTAuIpKG1bh4iPu4cnyzvsaGqwXJ0KcuT9jybj4F25VYAmxYOsb</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/enterprise" shallowClone="true" dest="go-enterprise">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/build_utilities" shallowClone="true" dest="build_utilities" />
        <pipeline pipelineName="go-packages" stageName="dist" materialName="go-packages" />
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/gocd_addons_compatibility" shallowClone="true" dest="gocd_addons_compatibility">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="regression-pg-gauge" stageName="run_unstable_tests" materialName="regression-pg-gauge" />
        <pipeline pipelineName="go-addon-build" stageName="build-addons" materialName="go-addon-build" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="GO_SERVER_URL">
                <value>https://build.gocd.org/go</value>
              </variable>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:KXl1hWK+hsyiDEDOTb4eOA==:7AmXHN6ICzNIuFo6ICnxdUlCJtO8haEMeq4tRdUmvxrpai4Jo0nNBJZkWR8HskF226ghEAxrjDR4gN7Bx5oB+zlTFvQq0P4/NnXXC6Os4hY=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="build_utilities/pkg_for_upload" pipeline="go-addon-build/go-packages" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="build_utilities/pkg_for_upload" pipeline="go-addon-build/go-packages" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <exec command="gem" workingdir="build_utilities">
                <arg>update</arg>
                <arg>--system</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>bundle install --path .bundle --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>export REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd-private/gocd_addons_compatibility.git &amp;&amp; ./determine_gocd_build_for_addon_and_update_compatibility_map determine_version_and_update_map</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="build_utilities">
                <arg>-c</arg>
                <arg>export CORRESPONDING_GOCD_VERSION=$(cat target/gocd_version.txt); ssh -oSendEnv=GO_DEPENDENCY_LOCATOR_GO_ADDON_BUILD -oSendEnv=CORRESPONDING_GOCD_VERSION -oSendEnv=GO_SERVER_URL -oSendEnv=CREDENTIALS uploader@192.168.184.31 create-addon-release</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dist-all</resource>
            </resources>
            <artifacts>
              <artifact type="build" src="gocd_addons_compatibility/addon_builds.json" dest="addon_builds" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="peg-gocd-in-enterprise">
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/PegCoreInEnterpriseSetup" dest="PegCoreInEnterpriseSetup" />
        <git url="https://github.com/gocd/build_map" dest="installer_build_map" materialName="installer_build_map" />
      </materials>
      <stage name="defaultStage" cleanWorkingDir="true">
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:j2V8bl0i7ViJzT1cth81nw==:aHm9esk/9jmwnu8RBRE+yyl/Ha5URAqnyEPZtg1HZUSuTOm+vvEsTDD4eKLiSSiS3j1uURkHE3xi1c08HyF+m4k+FE0f0qRd1crYYP1yVzw=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash" workingdir="PegCoreInEnterpriseSetup">
                <arg>-c</arg>
                <arg>export REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd-private/enterprise.git &amp;&amp; ./update</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>do-nothing</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Installer-testing">
      <params>
        <param name="working_dir">installer_test</param>
      </params>
      <environmentvariables>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/installer-testing" shallowClone="true" dest="#{working_dir}" />
        <pipeline pipelineName="upload_addons_to_download_server" stageName="defaultStage" materialName="upload" />
        <pipeline pipelineName="go-packages" stageName="dist" materialName="package" />
      </materials>
      <stage name="Fresh_install">
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="HOME">
                <value>/var/go</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="#{working_dir}" pipeline="go-addon-build/upload_addons_to_download_server" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="#{working_dir}" pipeline="go-addon-build/upload_addons_to_download_server" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcfile="addon_builds/addon_builds.json" dest="#{working_dir}" pipeline="upload_addons_to_download_server" stage="defaultStage" job="defaultJob">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="#{working_dir}">
                <arg>-c</arg>
                <arg>mkdir -pv lib/addons; mv -v addon_builds.json lib/addons; mv -v business-continuity-addon/*.jar lib/addons; mv -v postgresql-addon/*.jar lib/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{working_dir}">
                <arg>-lc</arg>
                <arg>which rake;rake -Version;rake --trace test_installers_w_postgres</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>installer-testing</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Upgrade-testing">
      <params>
        <param name="addons_dir">released_addons</param>
        <param name="upgrade_wrk_dir">upgrade_test</param>
        <param name="working_dir">installer_test</param>
      </params>
      <environmentvariables>
        <variable name="UPGRADE_VERSIONS_LIST">
          <value>17.5.0-5095, 17.11.0-5520, 18.3.0-6540</value>
        </variable>
        <variable name="EXTENSIONS_USER" secure="true">
          <encryptedValue>AES:Xjgp7brwAkEHp8is+XK8Fg==:vpRxyta+mYVkeE1cZp0LoBcPjFEa2RgTRs5tzZ7EQsJNpfJgKJq5b77Gb06UoQxo5AJSjlBv6d3xvxmmg2e0mw==</encryptedValue>
        </variable>
        <variable name="EXTENSIONS_PASSWORD" secure="true">
          <encryptedValue>AES:rSI/aWnvs3wia6AceVWJOg==:lvj9kDv0bicuEaKvLfxDpwK9Qj7O6TA+9ziTFigYk4rbO9ZGMpHSxarBstbGFlI2</encryptedValue>
        </variable>
        <variable name="ADDON_DOWNLOAD_URL">
          <value>https://extensions.gocd.org/addons/postgres_experimental/versions</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/installer-testing" shallowClone="true" dest="#{working_dir}" />
        <pipeline pipelineName="Installer-testing" stageName="Fresh_install" materialName="fresh_install" />
        <pipeline pipelineName="upload_addons_to_download_server" stageName="defaultStage" materialName="upload" />
      </materials>
      <stage name="Upgrade_tests">
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="HOME">
                <value>/var/go</value>
              </variable>
              <variable name="GO_VERSION">
                <value>18.4.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="#{working_dir}" pipeline="go-addon-build/upload_addons_to_download_server" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="#{working_dir}" pipeline="go-addon-build/upload_addons_to_download_server" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcfile="addon_builds/addon_builds.json" dest="#{working_dir}" pipeline="upload_addons_to_download_server/Installer-testing" stage="defaultStage" job="defaultJob">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="#{working_dir}">
                <arg>-c</arg>
                <arg>rm -rf lib/addons; mkdir -pv lib/addons; mv -v addon_builds.json lib/addons; mv -v business-continuity-addon/*.jar lib/addons; mv -v postgresql-addon/*.jar lib/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{working_dir}">
                <arg>-lc</arg>
                <arg>rake upgrade_tests_w_postgres</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>installer-testing</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="migration-test">
      <params>
        <param name="working_dir">migration-test</param>
      </params>
      <environmentvariables>
        <variable name="EXTENSIONS_USER" secure="true">
          <encryptedValue>AES:Q3Fy7Qy/CKdJOEKguGwvig==:c+vuinEXGZ8OrzQimrPm8gjK3+/IXQHTmq50nNQEW+U5K3RB+B6eNqUdF1lLcTNFEa3mXAzIQRnMhqYPQpNg3g==</encryptedValue>
        </variable>
        <variable name="EXTENSIONS_PASSWORD" secure="true">
          <encryptedValue>AES:sLs396AyYaHKworpaIyjSg==:wrG1pl8bcHCCKt7JC4RKZxKrKDuTn9wTaBNJfuQDdoTFs1v9SZvpJc0jbt88PHEs</encryptedValue>
        </variable>
        <variable name="ADDON_DOWNLOAD_URL">
          <value>https://extensions.gocd.org/addons/postgres_experimental/versions</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/migration-test" dest="#{working_dir}" materialName="migration-test" />
        <pipeline pipelineName="Upgrade-testing" stageName="Upgrade_tests" materialName="installer-tests" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="HOME">
                <value>/var/go</value>
              </variable>
              <variable name="GO_VERSION">
                <value>18.4.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="addon_builds/addon_builds.json" dest="#{working_dir}" pipeline="upload_addons_to_download_server/Upgrade-testing" stage="defaultStage" job="defaultJob">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="#{working_dir}">
                <arg>-c</arg>
                <arg>mkdir -pv addons; mv -v addon_builds.json addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{working_dir}">
                <arg>-lc</arg>
                <arg>rake test_migration</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>installer-testing</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="BC-testing">
      <params>
        <param name="bc_wrk_dir">bc-test</param>
        <param name="docker_wrk_dir">gocd-docker</param>
        <param name="server_wrk_dir">gocd-server</param>
        <param name="agent_wrk_dir">gocd-agent</param>
      </params>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-business-continuity-test" shallowClone="true" dest="#{bc_wrk_dir}" />
        <git url="https://mirrors.gocd.org/git/gocd/docker-gocd-server" shallowClone="true" dest="#{server_wrk_dir}" />
        <pipeline pipelineName="upload_addons_to_download_server" stageName="defaultStage" materialName="upload" />
        <pipeline pipelineName="Upgrade-testing" stageName="Upgrade_tests" materialName="upgrade" />
        <git url="https://mirrors.gocd.org/git/gocd/docker-gocd-agent" dest="#{agent_wrk_dir}" />
      </materials>
      <stage name="defaultStage">
        <environmentvariables>
          <variable name="GOCD_GIT_SHA">
            <value>dummy</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="GO_VERSION">
                <value>18.4.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcdir="postgresql-addon" dest="#{bc_wrk_dir}" pipeline="go-addon-build/upload_addons_to_download_server" stage="build-addons" job="postgresql">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="business-continuity-addon" dest="#{bc_wrk_dir}" pipeline="go-addon-build/upload_addons_to_download_server" stage="build-addons" job="business-continuity">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rm" workingdir="#{bc_wrk_dir}">
                <arg>-rf</arg>
                <arg>dependencies/addons/*.jar</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{bc_wrk_dir}">
                <arg>-c</arg>
                <arg>cp business-continuity-addon/*.jar dependencies/go-primary/addons; cp postgresql-addon/*.jar dependencies/go-primary/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{bc_wrk_dir}">
                <arg>-c</arg>
                <arg>cp business-continuity-addon/*.jar dependencies/go-secondary/addons; cp postgresql-addon/*.jar dependencies/go-secondary/addons</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{bc_wrk_dir}">
                <arg>-c</arg>
                <arg>bundle install --path=vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{bc_wrk_dir}">
                <arg>-c</arg>
                <arg>bundle exec rake</arg>
                <runif status="passed" />
                <oncancel>
                  <exec command="/bin/bash" workingdir="#{bc_wrk_dir}">
                    <arg>-c</arg>
                    <arg>bundle exec rake clean</arg>
                    <runif status="passed" />
                  </exec>
                </oncancel>
              </exec>
              <exec command="/bin/bash" workingdir="#{bc_wrk_dir}">
                <arg>-c</arg>
                <arg>rm -rf dependencies/go-primary/* ; rm -rf dependencies/go-secondary/*</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <resources>
              <resource>docker-build</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="gocd-plugins-PR">
    <authorization>
      <view>
        <user>view</user>
      </view>
    </authorization>
    <pipeline name="gocd-ldap-authentication-plugin-PR" template="bundled-plugins-build">
      <materials>
        <scm ref="0fd48290-a8f3-43b7-b878-a038fc99cf36" />
      </materials>
    </pipeline>
    <pipeline name="gocd-filebased-authentication-plugin-PR" template="bundled-plugins-build">
      <materials>
        <scm ref="0ba12c0f-a8f8-4c1a-a5eb-0bbdde988d38" />
      </materials>
    </pipeline>
    <pipeline name="gocd-yum-repository-poller-plugin-PR" template="bundled-plugins-build">
      <materials>
        <scm ref="5f77a507-d0e8-4a04-a64a-4ba298f445e3" />
      </materials>
    </pipeline>
    <pipeline name="kubernetes-elastic-agents-pr" template="gocd-contrib-plugin">
      <materials>
        <scm ref="3c50f1cd-83f4-4b84-80e9-f9751bafb59d" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="gocd-helm">
    <authorization>
      <view>
        <user>view</user>
      </view>
    </authorization>
    <pipeline name="helm-test-ci" lockBehavior="none">
      <environmentvariables>
        <variable name="PROJECT_NAME">
          <value>kube-gocd</value>
        </variable>
        <variable name="CLUSTER_NAME">
          <value>gocd-helm-cluster</value>
        </variable>
        <variable name="HELM_REPO">
          <value>incubator</value>
        </variable>
        <variable name="REPO_URL">
          <value>https://github.com/GaneshSPatil/charts</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-helm-chart" />
      </materials>
      <stage name="create_cluster">
        <jobs>
          <job name="create">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>rake -f spec/helm_test.rb create_cluster</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>helm</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="run_helm_checks">
        <jobs>
          <job name="test">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>rake -f spec/helm_test.rb run_helm_checks</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>helm</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="teardown_cluster">
        <jobs>
          <job name="teardown">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>rake -f spec/helm_test.rb teardown_cluster</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>helm</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Go-01-backup">
    <authorization>
      <admins>
        <user>senthilreddy</user>
        <role>go-committers</role>
      </admins>
    </authorization>
    <pipeline name="Go01_Backup">
      <timer>0 0 10 * * ?</timer>
      <environmentvariables>
        <variable name="GO_SERVER_TO_BACKUP">
          <value>https://go01.thoughtworks.com</value>
        </variable>
        <variable name="GO_SERVER_BACKUP_DIR">
          <value>/var/lib/go-server/logs/serverBackups</value>
        </variable>
        <variable name="NFS_MOUNT_LOCATION">
          <value>/mnt/go_server_backup</value>
        </variable>
        <variable name="USERNAME">
          <value>cruise_builder</value>
        </variable>
        <variable name="BACKUP_FOLDER">
          <value>/mnt/go_server/go-server/artifacts/serverBackups/backup_*/</value>
        </variable>
        <variable name="BACKUP_SERVER_URL">
          <value>http://fmtsd01.thoughtworks.com/go01_backup/</value>
        </variable>
        <variable name="PASSWORD" secure="true">
          <encryptedValue>AES:RcYFdZj7EW1s2n/uZXfIQw==:gXkhlR3Ja6n8COkxKBG3TMNLCn69gOiKYMEFZkLwBRCqPahGL9vGWZRaCxoSt3nP</encryptedValue>
        </variable>
        <variable name="EXTENSIONS_USER" secure="true">
          <encryptedValue>AES:m/v75XBhuV+aVksI8jZiMA==:SLFVy9tLPlfmA//jR9F030CTFBn0z3exEOP40llDxWLVfPMc72b7LOrDELrDPCpz</encryptedValue>
        </variable>
        <variable name="EXTENSIONS_PASSWORD" secure="true">
          <encryptedValue>AES:QwXPXHzyAQB2IGNrH3R0WA==:of9levN/K6hy/KBvk/WNomaDibqVW7rO4b4YvowUXdw=</encryptedValue>
        </variable>
        <variable name="ADDON_DOWNLOAD_URL" secure="true">
          <encryptedValue>AES:x8YdtI8g985T3iMtmI82gw==:y+/zwBHR5YqbngcPcaumY1LgxY0bClhqOfHcv2DoaffL/h3X6F9aXdS43iVbdsIJgcfFr9DdAHih0GP0opHZy/x2KVm5i4GP6eo9mvFkKyDA/dejQk8S0J+t8sxq4+cCslV+mhK/4Rn32CX0tId0dA==</encryptedValue>
        </variable>
        <variable name="BACKUP_DOWNLOAD_DIRECTORY">
          <value>/home/go/encrypted_backup</value>
        </variable>
        <variable name="S3_BUCKET">
          <value>go01-daily-backup</value>
        </variable>
        <variable name="PG_DB_NAME">
          <value>go01</value>
        </variable>
        <variable name="PG_USER_NAME">
          <value>go01</value>
        </variable>
        <variable name="DECRYPTED_FILES_PATH">
          <value>home/go</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/go_server_backup_scripts" dest="go_server_backup_scripts">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://mirrors.gocd.org/git/gocd/restore_backup_test" dest="restore_backup_test">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/gocd_addons_compatibility" shallowClone="true" dest="addons_compatability_map" materialName="addons-compatability" />
      </materials>
      <stage name="backup">
        <approval type="manual" />
        <jobs>
          <job name="default">
            <environmentvariables>
              <variable name="username">
                <value>cruise_builder</value>
              </variable>
              <variable name="password" secure="true">
                <encryptedValue>AES:Rd9KjaIG1L0OLDfN5mgSaQ==:qQ5vaYVEe3LOSf3RsoRlpJy2mz+6snMgtYpateI1MPyO5LMVu0VRcWvLcH/ZyVkl</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rm" workingdir="go_server_backup_scripts">
                <arg>-rf</arg>
                <arg>.bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="go_server_backup_scripts">
                <arg>-c</arg>
                <arg>bundle install --path .bundle --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle" workingdir="go_server_backup_scripts">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>backup</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>go01-server</resource>
            </resources>
            <artifacts>
              <artifact type="build" src="go_server_backup_scripts/backup_location_info" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="restore_test">
        <environmentvariables>
          <variable name="GEM_PATH">
            <value>vendor/gem_home</value>
          </variable>
          <variable name="GEM_HOME">
            <value>vendor/gem_home</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="defaultJob" elasticProfileId="backup-encryption">
            <environmentvariables>
              <variable name="_JAVA_OPTIONS">
                <value>-Xmx2g</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git" workingdir="restore_backup_test">
                <arg>pull</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcfile="backup_location_info" dest="restore_backup_test" pipeline="" stage="backup" job="default">
                <runif status="passed" />
              </fetchartifact>
              <exec command="java" workingdir="restore_backup_test">
                <arg>-jar</arg>
                <arg>vendor/jruby-complete-1.7.11.jar</arg>
                <arg>-S</arg>
                <arg>gem</arg>
                <arg>install</arg>
                <arg>-i</arg>
                <arg>vendor/gem_home</arg>
                <arg>--no-rdoc</arg>
                <arg>--no-ri</arg>
                <arg>bundler</arg>
                <runif status="passed" />
              </exec>
              <exec command="java" workingdir="restore_backup_test">
                <arg>-jar</arg>
                <arg>vendor/jruby-complete-1.7.11.jar</arg>
                <arg>-S</arg>
                <arg>vendor/gem_home/bin/bundle</arg>
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="java" workingdir="restore_backup_test">
                <arg>-jar</arg>
                <arg>vendor/jruby-complete-1.7.11.jar</arg>
                <arg>-S</arg>
                <arg>vendor/gem_home/bin/bundle</arg>
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>pg_restore_test</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>cat /etc/yum.repos.d/gocd.repo</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="encrypt">
        <environmentvariables>
          <variable name="backup_server_url">
            <value>http://fmtsd01.thoughtworks.com/go01_backup/</value>
          </variable>
          <variable name="S3_BUCKET">
            <value>go01-daily-backup</value>
          </variable>
          <variable name="test">
            <value>test</value>
          </variable>
          <variable name="AES_PASSWORD" secure="true">
            <encryptedValue>AES:FwPwFWgIsU+2TCU+DgRGfQ==:OscRxRcasUF0YValRHxFkOdpIz5T6q9bPOaShQB8pGq1sa7zumTVAl6pgANbikE5</encryptedValue>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:Gb76uwW6hlw4IfYJRxW/gg==:hSJ6xN7H3Rjjqo4Jr1dGY8A5XqiStHAA1h8LcpGdWybqNCrz/gx4n+8P2F4CEENS</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:yOOCZ0NWnxc+dRLiYsCO7g==:fC6D4ry2b/NAmW/kiUCLIrs3exRqDMjCSpm9z9lFLUFRyo05wNfyfy2S0CjBrQSZxGdQEDQu3+g3yIutSOaEoERQh1za9zbdqz5LYcrYY4c=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="encrypt_and_push" elasticProfileId="backup-encryption">
            <tasks>
              <fetchartifact artifactOrigin="gocd" srcfile="backup_location_info" dest="go_server_backup_scripts" pipeline="" stage="backup" job="default">
                <runif status="passed" />
              </fetchartifact>
              <exec command="chmod" workingdir="go_server_backup_scripts">
                <arg>a+x</arg>
                <arg>encrypt_backup.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="./encrypt_backup.sh" workingdir="go_server_backup_scripts">
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="go_server_backup_scripts/aes_filename" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="restore_test_from_s3">
        <environmentvariables>
          <variable name="GEM_PATH">
            <value>vendor/gem_home</value>
          </variable>
          <variable name="GEM_HOME">
            <value>vendor/gem_home</value>
          </variable>
          <variable name="S3_BUCKET">
            <value>go01-daily-backup</value>
          </variable>
          <variable name="AES_PASSWORD" secure="true">
            <encryptedValue>AES:D+EDANwRIC8OmEA/U2jgCg==:ucgBZ0ZQCJbifu4gXXzmHoTcHQA1FXs022KJtBSz+GKQyde9bTCb1tDjIKmAkPGa</encryptedValue>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:oydytyYofy5OdqTuUzDf2g==:kZrmCZeIb8ropqck91Ah3mPhlfXthIwEpYvOAsLe+m3GWsB42Q48o5sLABGeGllx</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:dSD0XX1hONHWLu1aP8pScg==:ts3rITDFRwGtIiJYC+pNM2uaI/BjZts5gasWXSDecQFyw3BO1Cfy9Il8wFy9e4RAlDrnReIAVn18ar7dgfkxtySmjcymX+6WF6bjY+K+eoQ=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="defaultJob" elasticProfileId="backup-encryption">
            <environmentvariables>
              <variable name="_JAVA_OPTIONS">
                <value>-Xmx2g</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git" workingdir="restore_backup_test">
                <arg>pull</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcfile="aes_filename" dest="restore_backup_test" pipeline="" stage="encrypt" job="encrypt_and_push">
                <runif status="passed" />
              </fetchartifact>
              <exec command="java" workingdir="restore_backup_test">
                <arg>-jar</arg>
                <arg>vendor/jruby-complete-1.7.11.jar</arg>
                <arg>-S</arg>
                <arg>gem</arg>
                <arg>install</arg>
                <arg>-i</arg>
                <arg>vendor/gem_home</arg>
                <arg>--no-rdoc</arg>
                <arg>--no-ri</arg>
                <arg>bundler</arg>
                <runif status="passed" />
              </exec>
              <exec command="java" workingdir="restore_backup_test">
                <arg>-jar</arg>
                <arg>vendor/jruby-complete-1.7.11.jar</arg>
                <arg>-S</arg>
                <arg>vendor/gem_home/bin/bundle</arg>
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="java" workingdir="restore_backup_test">
                <arg>-jar</arg>
                <arg>vendor/jruby-complete-1.7.11.jar</arg>
                <arg>-S</arg>
                <arg>vendor/gem_home/bin/bundle</arg>
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>pg_restore_from_s3_test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="deployment">
    <authorization>
      <view>
        <user>view</user>
      </view>
    </authorization>
    <pipeline name="go01">
      <params>
        <param name="DEPLOYMENT_AGENT">go01-server</param>
      </params>
      <environmentvariables>
        <variable name="VERSION">
          <value>&lt;FIXME&gt;</value>
        </variable>
        <variable name="DOWNLOAD_NODE_IP">
          <value>download.gocd.org</value>
        </variable>
        <variable name="REVISION">
          <value>&lt;FIXME&gt;</value>
        </variable>
        <variable name="POSTGRES_ADDON_DOWNLOAD_URL">
          <value>https://extensions.gocd.org/addons/postgres_experimental/versions</value>
        </variable>
        <variable name="BC_ADDON_DOWNLOAD_URL">
          <value>https://extensions.gocd.org/addons/business_continuity_experimental/versions</value>
        </variable>
        <variable name="EXTENSIONS_USER" secure="true">
          <encryptedValue>AES:eMN5ZIZV3AxAnAzOtNFEHg==:33S825Ii65RnOXY4bz4Z8e7pdXJCYtJwUagvNLqli097lyZKk8/mMi9/DpavR9f7Z8QOMcvkc94XvE0tD0N+/w==</encryptedValue>
        </variable>
        <variable name="EXTENSIONS_PASSWORD" secure="true">
          <encryptedValue>AES:GvfUCB4RErM2ZzimwAjBGA==:2az3eh+hwwAQ47ipGQMvjDLKsYn5cdqt7CrjmDwin4tw2NAXzBnX+ylVHLvv5g6V</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/go_deploy_utils" dest="go_deploy_utils" />
      </materials>
      <stage name="deploy" artifactCleanupProhibited="true">
        <approval type="manual" />
        <jobs>
          <job name="run">
            <tasks>
              <exec command="/bin/bash" workingdir="go_deploy_utils">
                <arg>deploy_go_server.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="go_deploy_utils">
                <arg>install_addons.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>#{DEPLOYMENT_AGENT}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="getgauge">
      <params>
        <param name="DEPLOYMENT_AGENT">go01-server</param>
      </params>
      <environmentvariables>
        <variable name="VERSION">
          <value>&lt;FIXME&gt;</value>
        </variable>
        <variable name="DOWNLOAD_NODE_IP">
          <value>download.gocd.org</value>
        </variable>
        <variable name="REVISION">
          <value>&lt;FIXME&gt;</value>
        </variable>
        <variable name="POSTGRES_ADDON_DOWNLOAD_URL">
          <value>https://extensions.gocd.org/addons/postgres_experimental/versions</value>
        </variable>
        <variable name="BC_ADDON_DOWNLOAD_URL">
          <value>https://extensions.gocd.org/addons/business_continuity_experimental/versions</value>
        </variable>
        <variable name="EXTENSIONS_USER" secure="true">
          <encryptedValue>AES:ENqA2m6EHy9ePaKg+lUh8A==:XEW3KeNdFSS3OVlsUUsX7UUephKVXFxPYl+ZziyKnaDy/uwO5dahh4B7n2niePP1SHqLo3q5E+Vj+YAfZtEBeQ==</encryptedValue>
        </variable>
        <variable name="EXTENSIONS_PASSWORD" secure="true">
          <encryptedValue>AES:UhrV3bxaMz4PnRKOaf8nYA==:H+EUFY6KcWwMSupEj7m/1BDK0cph5ncOfBLkep18d0tYcGKxn9RclpgDsgOEa/MR</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://gocd:xvzIsK3oNh03@mirrors.gocd.org/git/gocd-private/go_deploy_utils" dest="go_deploy_utils" />
      </materials>
      <stage name="deploy" artifactCleanupProhibited="true">
        <approval type="manual" />
        <jobs>
          <job name="run">
            <tasks>
              <exec command="/bin/bash" workingdir="go_deploy_utils">
                <arg>deploy_go_server.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="go_deploy_utils">
                <arg>install_addons.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>#{DEPLOYMENT_AGENT}</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="supported_plugins">
    <authorization>
      <view>
        <user>view</user>
        <role>go-committers</role>
      </view>
      <operate>
        <role>go-committers</role>
      </operate>
    </authorization>
    <pipeline name="gocd-ldap-authentication-plugin" template="bundled-plugins-build">
      <params>
        <param name="dir_name">gocd-ldap-authentication-plugin</param>
      </params>
      <environmentvariables>
        <variable name="GITHUB_USER">
          <value>gocd</value>
        </variable>
        <variable name="GITHUB_TOKEN" secure="true">
          <encryptedValue>AES:2SmsCyPZGFUtfWyGn0s8nQ==:Wy4rRm/umwH+0cDFIkMPfl4nJ6Jfs0dPV783hsnvoqF2O2WxYuI4IU3WXwWwhpBhR4hLhPS/Xrdl4R0WNLy2uDcuhMLFiAkphDJTCNC0y7M=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-ldap-authentication-plugin" />
      </materials>
    </pipeline>
    <pipeline name="gocd-filebased-authentication-plugin">
      <params>
        <param name="dir_name">gocd-filebased-authentication-plugin</param>
      </params>
      <environmentvariables>
        <variable name="GITHUB_USER">
          <value>gocd</value>
        </variable>
        <variable name="GITHUB_TOKEN" secure="true">
          <encryptedValue>AES:PtrOt56/ECveSCHV7dj2RA==:2N1YQt472yQHpyKusB9KnBMjYP4FhAyJYbZWVfPEzPFgQLUIar7WPN/ENj5uSfxKFo+k0veURUwqVvq+8JbdQUvpPAtotpPETYILIvU+uOY=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-filebased-authentication-plugin" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>check</arg>
                <arg>assemble</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="github_release">
        <approval type="manual" />
        <environmentvariables>
          <variable name="GITHUB_USER">
            <value>gocd</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="github_release" elasticProfileId="gocd-private-plugin">
            <tasks>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>assemble</arg>
                <arg>githubRelease</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gocd-yum-repository-poller-plugin" template="bundled-plugins-build">
      <environmentvariables>
        <variable name="GITHUB_USER">
          <value>gocd</value>
        </variable>
        <variable name="GITHUB_TOKEN" secure="true">
          <encryptedValue>AES:1ilS9RrD74OYITcOHxhv+w==:7Ns0j+WpJjCpDMcNm3S5o6nSCAsyoeRZX0CA2WI2+S6TKeX44wP1h1VFZtEXTghhSK9snrUvVr4+QFDr5iCS+tm+iRHh55G301lhNpkdClc=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-yum-repository-poller-plugin" />
      </materials>
    </pipeline>
    <pipeline name="gocd-ldap-authentication-plugin-github-release" template="plugin-github-release">
      <environmentvariables>
        <variable name="GITHUB_USER">
          <value>gocd</value>
        </variable>
        <variable name="GITHUB_TOKEN" secure="true">
          <encryptedValue>AES:wtoEOJiUl8x/vZnRbDjT1w==:yVUmFWqdCpMduJBW+5fnndAgu1uL6bT2lz3Qip2cM4Oge46a0ATyoLIomWoA76/YXtDkWdiiKieh0gdRkhrNFXHvtP5Tq2deZ/4fN8HTLoo=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-ldap-authentication-plugin" />
      </materials>
    </pipeline>
    <pipeline name="filebased-authentication-plugin-github-release" template="plugin-github-release">
      <environmentvariables>
        <variable name="GITHUB_USER">
          <value>gocd</value>
        </variable>
        <variable name="GITHUB_TOKEN" secure="true">
          <encryptedValue>AES:RCIeCCdTvOmS1BoOpr2aiQ==:6bmEIEvix6P+EfxVnBVoAymYYmblKNwriiElXpG6f22X1E49NvIP6DVew3GdJxeD0yw/iHCiT/Gwgsb8NebruLVL1sPfYRxKiPSpKIQ5V+8=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-filebased-authentication-plugin" />
      </materials>
    </pipeline>
    <pipeline name="gocd-yum-repository-poller-plugin-release" template="plugin-github-release">
      <environmentvariables>
        <variable name="GITHUB_USER">
          <value>gocd</value>
        </variable>
        <variable name="GITHUB_TOKEN" secure="true">
          <encryptedValue>AES:2utMO5U6ZDoF1nJM17D67w==:GrK82gbcNgG9DPzEXdaKksnhfaRwWHpNOd0JaS/POV7w1J8pbsah3UzyqlW+wqYFlTFMO1ztY+UKYSLyfJM07ER+CXMbNohNkurXHuzasxY=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/gocd-yum-repository-poller-plugin" />
      </materials>
    </pipeline>
    <pipeline name="kubernetes-elastic-agents" template="gocd-contrib-plugin">
      <environmentvariables>
        <variable name="GITHUB_USER">
          <value>gocd</value>
        </variable>
        <variable name="GITHUB_TOKEN" secure="true">
          <encryptedValue>AES:gNP/rCwFTUYX4HfTsHZASA==:43YtQB/wtTA59f7JkmlraYY6Y2Fjdvnjh5K9XuJDexvuTYzN24j+gEns5a8IdE6mqe/EgtHP1W+1B28wyvk/zGvTBFNwPYzy+yG2QiGj8Kg=</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/gocd/kubernetes-elastic-agents" materialName="kubernetes-elastic-agents" />
      </materials>
    </pipeline>
    <pipeline name="docker-registry-artifact-plugin" template="bundled-plugins-build">
      <params>
        <param name="dir_name">docker-registry-artifact-plugin</param>
      </params>
      <materials>
        <git url="https://mirrors.gocd.org/git/gocd/docker-registry-artifact-plugin" shallowClone="true" />
      </materials>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="build-gradle-linux">
      <stage name="build-non-server">
        <jobs>
          <job name="agent" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean agent:assemble agent:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="agent/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-bootstrapper" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean agent-bootstrapper:assemble agent-bootstrapper:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="agent-bootstrapper/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-bootstrapper/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-common" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean agent-common:assemble agent-common:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="agent-common/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-common/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-launcher" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean agent-launcher:assemble agent-launcher:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="agent-launcher/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-launcher/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-process-launcher" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean agent-process-launcher:assemble agent-process-launcher:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="agent-process-launcher/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-process-launcher/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="base" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean base:assemble base:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="base/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="base/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="common-split" runInstanceCount="10" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean common:assemble common:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="common/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="common/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="config-api" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean config:config-api:assemble config:config-api:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="config/config-api/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="config/config-api/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="spark" elasticProfileId="ecs-gocd-dev-build-highmem">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean sparkTest" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/sparkTest/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="target/test-results/tests/sparkTest/*.xml" dest="test-reports" />
              <artifact type="build" src="target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="config-server" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean config:config-server:assemble config:config-server:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="config/config-server/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="config/config-server/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="jasmine" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="firefox">
                <arg>-v</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--parallel --max-workers 2 clean jasmine">
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="server/webapp/WEB-INF/rails.new/tmp/karma_reports/*.xml" dest="karma" />
            </artifacts>
          </job>
          <job name="lint" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="lint">
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="plugin-access" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-access:assemble plugin-infra:go-plugin-access:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-access/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-access/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="go-plugin-activator" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-activator:assemble plugin-infra:go-plugin-activator:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-activator/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-activator/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="plugin-api" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-api:assemble plugin-infra:go-plugin-api:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-api/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-api/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="plugin-metadata-store" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean plugin-infra:plugin-metadata-store:assemble plugin-infra:plugin-metadata-store:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="plugin-infra/plugin-metadata-store/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/plugin-metadata-store/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="plugin-infra" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-infra:assemble plugin-infra:go-plugin-infra:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-infra/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-infra/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="test-utils" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean test:test-utils:assemble test:test-utils:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="test/test-utils/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="test/test-utils/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="tfs-impl-14" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean tfs-impl:tfs-impl-14:assemble tfs-impl:tfs-impl-14:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="tfs-impl/tfs-impl-14/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="tfs-impl/tfs-impl-14/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="util" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean util:assemble util:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="util/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="util/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="build-server">
        <jobs>
          <job name="jetty9" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean jetty9:assemble jetty9:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="jetty9/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="jetty9/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="server-split" runInstanceCount="6" elasticProfileId="ecs-gocd-dev-build-5gb-mem">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean server:assemble server:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="FastTest" path="JUnitResults/fastUnitTest/index.html" />
              <tab name="SlowTest" path="JUnitResults/integrationTest/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="server/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="server/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="rspec-split" runInstanceCount="2" elasticProfileId="ecs-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean server:parallelRspec -Popts='--backtrace'">
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="server/target/rspec-results/*.xml" dest="test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="build-gradle-windows">
      <authorization>
        <view>
          <user>ibnc</user>
        </view>
        <admins>
          <user>ibnc</user>
        </admins>
      </authorization>
      <stage name="build-non-server">
        <jobs>
          <job name="agent">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean agent:assemble agent:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="agent/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-bootstrapper">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean agent-bootstrapper:assemble agent-bootstrapper:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="agent-bootstrapper/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-bootstrapper/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-common">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean agent-common:assemble agent-common:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="agent-common/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-common/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-launcher">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean agent-launcher:assemble agent-launcher:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="agent-launcher/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-launcher/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="agent-process-launcher">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean agent-process-launcher:assemble agent-process-launcher:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="agent-process-launcher/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="agent-process-launcher/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="base">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean base:assemble base:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="base/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="base/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="common-split" runInstanceCount="10">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean common:assemble common:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="common/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="common/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="config-api">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean config:config-api:assemble config:config-api:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="config/config-api/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="config/config-api/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="spark">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean sparkTest" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/sparkTest/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="target/test-results/tests/sparkTest/*.xml" dest="test-reports" />
              <artifact type="build" src="target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="config-server">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean config:config-server:assemble config:config-server:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="config/config-server/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="config/config-server/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="jasmine">
            <environmentvariables>
              <variable name="KARMA_LOG_LEVEL">
                <value>debug</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon --parallel --max-workers 2 clean jasmine">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>#{BROWSER}</resource>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="server/webapp/WEB-INF/rails.new/tmp/karma_reports/*.xml" dest="karma" />
              <artifact type="build" src="server/webapp/WEB-INF/rails.new/tmp/karma_reports/Firefox*/*.*" dest="karma-ff" />
              <artifact type="build" src="server/webapp/WEB-INF/rails.new/tmp/karma_reports/IE*/*.*" dest="karma-ie" />
            </artifacts>
          </job>
          <job name="lint">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon lint">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>#{OS}</resource>
            </resources>
          </job>
          <job name="plugin-access">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-access:assemble plugin-infra:go-plugin-access:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-access/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-access/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="go-plugin-activator">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-activator:assemble plugin-infra:go-plugin-activator:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-activator/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-activator/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="plugin-api">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-api:assemble plugin-infra:go-plugin-api:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-api/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-api/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="plugin-metadata-store">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean plugin-infra:plugin-metadata-store:assemble plugin-infra:plugin-metadata-store:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="plugin-infra/plugin-metadata-store/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/plugin-metadata-store/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="plugin-infra">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-infra:assemble plugin-infra:go-plugin-infra:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="plugin-infra/go-plugin-infra/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="plugin-infra/go-plugin-infra/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="test-utils">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean test:test-utils:assemble test:test-utils:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="test/test-utils/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="test/test-utils/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="tfs-impl-14">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean tfs-impl:tfs-impl-14:assemble tfs-impl:tfs-impl-14:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="tfs-impl/tfs-impl-14/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="tfs-impl/tfs-impl-14/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="util">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean util:assemble util:check" />
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="util/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="util/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="build-server">
        <jobs>
          <job name="jetty9">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean jetty9:assemble jetty9:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="jetty9/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="jetty9/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="server-split" runInstanceCount="6">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean server:assemble server:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="FastTest" path="JUnitResults/fastUnitTest/index.html" />
              <tab name="SlowTest" path="JUnitResults/integrationTest/index.html" />
            </tabs>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="server/target/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="server/target/reports/tests/**/*.*" dest="JUnitResults" />
            </artifacts>
          </job>
          <job name="rspec-split" runInstanceCount="4">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="--no-daemon -PfastBuild --parallel --max-workers 2 clean server:parallelRspec -Popts='--backtrace'">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>#{OS}</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="server/target/rspec-results/*.xml" dest="test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="plugins-gradle">
      <stage name="build">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="git" workingdir="gocd">
                <arg>clean</arg>
                <arg>-dffx</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="go-plugins">
                <arg>clean</arg>
                <arg>-dffx</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean plugin-infra:go-plugin-api:install plugin-infra:go-plugin-api-internal:install installers:versionFile" workingdir="gocd">
                <runif status="passed" />
              </exec>
              <exec command="bash" args="-c &quot;mvn clean package --batch-mode -Dgo.version=$(jq '.go_full_version' -r ../gocd/installers/target/distributions/meta/version.json)&quot;" workingdir="go-plugins">
                <runif status="passed" />
              </exec>
              <exec command="rm" args="target/go-plugins-dist/test-authentication-plugin.jar" workingdir="go-plugins">
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="go-plugins/target/go-plugins-dist/*" dest="go-plugins-dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="installers-gradle">
      <stage name="dist">
        <jobs>
          <job name="dist" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="git" args="clean -dffx">
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" args="--parallel --max-workers 2 release:bumpCommandRepoVersion -Pnoop=pre-bump" />
              <exec command="./gradlew" args="--parallel --max-workers 2 clean installers:assemble test:test-addon:assemble plugin-infra:go-plugin-api:assemble">
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" args="release:updateBuildMap" />
              <exec command="./gradlew" args="--parallel --max-workers 2 release:bumpCommandRepoVersion -Pnoop=post-bump" />
            </tasks>
            <tabs>
              <tab name="Modifications" path="dist/meta/release-notes.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="installers/target/distributions/*" dest="dist" />
              <artifact type="build" src="test/test-addon/target/libs/*.jar" dest="test-addon" />
              <artifact type="build" src="plugin-infra/go-plugin-api/target/libs/*.jar" dest="go-plugin-api" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="smoke-gradle">
      <stage name="Smoke">
        <jobs>
          <job name="firefox" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>smoke,!manual</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="env" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="ls">
                <arg>-l</arg>
                <arg>/opt/local/firefox/firefox-24.5.0esr</arg>
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace clean" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="#{sahi-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="#{sahi-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="#{sahi-working-dir}/target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="#{sahi-working-dir}/reports" dest="GaugeReports" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-state" dest="server" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="build-command-enabled" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>smoke,!manual</value>
              </variable>
              <variable name="ADDITIONAL_AGENT_STARTUP_ARGS">
                <value>-Dgo.agent.enableBuildCommandProtocol=true -Dgo.agent.websocket.enabled=true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="env" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace clean" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="#{sahi-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="#{sahi-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="#{sahi-working-dir}/target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace gauge_specs" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents" workingdir="#{sahi-working-dir}">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="#{sahi-working-dir}/reports" dest="GaugeReports" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-state" dest="server" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="#{sahi-working-dir}/target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="selenium-firefox" elasticProfileId="docker-gocd-OOM-tests-centos7">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>smoke</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle" workingdir="#{selenium-working-dir}">
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <arg>--jobs=4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle" workingdir="#{selenium-working-dir}">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>kill</arg>
                <arg>clean_all</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="#{selenium-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="#{selenium-working-dir}/target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="#{selenium-working-dir}/target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>gauge config runner_request_timeout 180000</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle" workingdir="#{selenium-working-dir}">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>prepare</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="#{selenium-working-dir}/reports" dest="GaugeReports" />
              <artifact type="build" src="#{selenium-working-dir}/target/go_state" dest="server" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="acceptance-linux-gradle">
      <authorization>
        <admins>
          <user>rajieshn</user>
        </admins>
      </authorization>
      <stage name="RunAcceptanceSpecs-priority">
        <jobs>
          <job name="firefox-split" runInstanceCount="15" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{priority_tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>ps aux | grep java</arg>
                <runif status="passed" />
              </exec>
              <exec command="free">
                <arg>-h</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/artifacts" dest="server/artifacts" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="OOM-tests" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{OOM_tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents" />
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="RunAcceptanceSpecs-plugins">
        <environmentvariables>
          <variable name="DOWNLOAD_PLUGIN">
            <value>Yes</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="firefox-split" runInstanceCount="15" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{plugin_tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="regression-gradle">
      <stage name="regression-linux">
        <jobs>
          <job name="functional-tests" runInstanceCount="15" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>ps aux | grep java</arg>
                <runif status="passed" />
              </exec>
              <exec command="free">
                <arg>-h</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="restart-server-tests" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{server-restart-tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="fanin-tests" runInstanceCount="3" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{fanin}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>ps aux | grep java</arg>
                <runif status="passed" />
              </exec>
              <exec command="free">
                <arg>-h</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="fanin-with-rpm" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{fanin-with-rpm-package}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>ps aux | grep java</arg>
                <runif status="passed" />
              </exec>
              <exec command="free">
                <arg>-h</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="long-running-tests" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{long_running}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>ps aux | grep java</arg>
                <runif status="passed" />
              </exec>
              <exec command="free">
                <arg>-h</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="OOM-tests" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{OOM_tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents" />
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="buildcommand-tests" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{build-command-tags}</value>
              </variable>
              <variable name="ADDITIONAL_AGENT_STARTUP_ARGS">
                <value>-Dgo.agent.enableBuildCommandProtocol=true -Dgo.agent.websocket.enabled=true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <runif status="passed" />
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents" />
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/artifacts" dest="server/artifacts" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="API-tests" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{API-tags}</value>
              </variable>
              <variable name="DOWNLOAD_PLUGIN">
                <value>Yes</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist" />
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist" />
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build" />
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
          <job name="oAuth-tests" elasticProfileId="docker-gocd-regression-tests">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{oAuth-tags}</value>
              </variable>
              <variable name="DOWNLOAD_PLUGIN">
                <value>Yes</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rake" args="--trace clean" />
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist" />
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist" />
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build" />
              <exec command="rake" args="--trace setup_go" />
              <exec command="rake" args="--trace gauge_specs">
                <oncancel>
                  <exec command="rake" args="--trace clean" />
                </oncancel>
              </exec>
              <exec command="rake" args="--trace cleanup_test_agents">
                <runif status="any" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go-server-*/logs" dest="server/logs" />
              <artifact type="build" src="target/go-state" dest="server" />
              <artifact type="build" src="target/go-server-*/config" dest="server/config" />
              <artifact type="build" src="target/go-server-*/db/h2db" dest="server/db" />
              <artifact type="build" src="target/go-server-*/db/config.git" dest="server/config.git" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="regression-ruby-webdriver">
      <stage name="Firefox">
        <jobs>
          <job name="spa" elasticProfileId="docker-gocd-OOM-tests-centos7">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{spa_tags}</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <arg>--jobs=4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>kill</arg>
                <arg>clean_all</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>gauge config runner_request_timeout 180000</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>prepare</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go_state" dest="server" />
            </artifacts>
          </job>
          <job name="regression" elasticProfileId="docker-gocd-OOM-tests-centos7">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{regression_tags}</value>
              </variable>
              <variable name="LDAP_SERVER_IP" secure="true">
                <encryptedValue>AES:/CsqXURVhAD9zdSdAWs12g==:FpFimylH1grQ/EEzeg2VUnwh6F10hhWqIeuYSZKv7No=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <arg>--jobs=4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>kill</arg>
                <arg>clean_all</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>gauge config runner_request_timeout 180000</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>prepare</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go_state" dest="server" />
              <artifact type="build" src="target/go-server-*/logs" dest="logs" />
            </artifacts>
          </job>
          <job name="bundled-auth-plugins" elasticProfileId="docker-gocd-OOM-tests-centos7">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>#{bundled_auth_plugins}</value>
              </variable>
              <variable name="LDAP_SERVER_IP" secure="true">
                <encryptedValue>AES:2OhpjiiQz+D/ci4ZX31umg==:DdIgNA+POwzvgeXyEEzV3OIHtLuVkxy0qcHEXEQv100=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <arg>--jobs=4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>kill</arg>
                <arg>clean_all</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>gauge config runner_request_timeout 180000</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>prepare</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go_state" dest="server" />
              <artifact type="build" src="target/go-server-*/logs" dest="logs" />
            </artifacts>
          </job>
          <job name="agent-manual-registration" elasticProfileId="docker-gocd-OOM-tests-centos7">
            <environmentvariables>
              <variable name="GAUGE_TAGS">
                <value>agent_manual_registration</value>
              </variable>
              <variable name="ADDITIONAL_SERVER_SYSTEM_PROPERITES">
                <value>-Dgo.auto.register.local.agent.enabled=false</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bundle">
                <arg>install</arg>
                <arg>--path=vendor/bundle</arg>
                <arg>--jobs=4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>kill</arg>
                <arg>clean_all</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact artifactOrigin="gocd" srcdir="dist/zip" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="go-plugins-dist" dest="target" pipeline="#{plugins-pipeline-name}" stage="build" job="build">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact artifactOrigin="gocd" srcdir="test-addon" dest="target" pipeline="#{installers-pipeline-name}" stage="dist" job="dist">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>gauge config runner_request_timeout 180000</arg>
                <runif status="passed" />
              </exec>
              <exec command="bundle">
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>prepare</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="GaugeReport" path="GaugeReports/reports/html-report/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="reports" dest="GaugeReports" />
              <artifact type="build" src="target/go_state" dest="server" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="go-cd-cookbook">
      <stage name="unit">
        <jobs>
          <job name="test">
            <tasks>
              <exec command="chef">
                <arg>exec</arg>
                <arg>bundle</arg>
                <arg>install</arg>
              </exec>
              <exec command="chef">
                <arg>exec</arg>
                <arg>bundle</arg>
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>style</arg>
                <runif status="passed" />
              </exec>
              <exec command="chef">
                <arg>exec</arg>
                <arg>bundle</arg>
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>unit:chefspec</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cookbook</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="integration">
        <jobs>
          <job name="test">
            <tasks>
              <exec command="chef">
                <arg>exec</arg>
                <arg>bundle</arg>
                <arg>install</arg>
              </exec>
              <exec command="chef">
                <arg>exec</arg>
                <arg>bundle</arg>
                <arg>exec</arg>
                <arg>rake</arg>
                <arg>integration:docker</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cookbook</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gradle-commercial-plugin">
      <stage name="Test">
        <jobs>
          <job name="test" elasticProfileId="#{gradle-test-profile}">
            <tasks>
              <exec command="./gradlew" args="--parallel --max-workers 2 clean assemble #{gradle-test}">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="build/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="build/reports/tests/**/*.*" dest="JUnitResults" />
              <artifact type="build" src="build/libs/*" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="DeployExperimental">
        <environmentvariables>
          <variable name="EXPERIMENTAL_BUCKET_NAME">
            <value>extensionsgocdio-extensionsexperimentaldownloadss-1tkmdsgdgeddy</value>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:C66GeQetklPfZEeXjx9RLw==:TmMKfe+2Pjb28xIjOWUb/+x9BqeI/RUIO5+xWMd7Hjel2Gy2BDUF9KMZ86nOsPmB</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:nmw2T773BlaD1zT7yIfBZg==:Iz2ktr8UbejDAhTzHIKqe7H1DGKtUTyeP9vR//Xn7JSXNsFj4yy0t15jMIklrIyBMWXtQDF/SqwTWa6K9TDSBKC0nETg9NxcAFYDcy8LjFk=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployExperimental" elasticProfileId="gocd-private-plugin">
            <tasks>
              <exec command="./gradlew">
                <arg>deployExperimental</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PromoteToStable">
        <approval type="manual" />
        <environmentvariables>
          <variable name="EXPERIMENTAL_BUCKET_NAME">
            <value>extensionsgocdio-extensionsexperimentaldownloadss-1tkmdsgdgeddy</value>
          </variable>
          <variable name="STABLE_BUCKET_NAME">
            <value>extensionsgocdio-extensionsdownloadss3-1qj85nxlfyhde</value>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:7tfQs0vVJLMkTfioK1UQUw==:PanJ5wY71lekhyxtUNNKmOfB3qEOlq9H1zj6Odj5MXpC7xvRyHGGrpwt1iJ/asCb</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:9eEbYRElKxZRUD8hm6vNVA==:w61C5NSQ8BX/wkGryfimh3Ui+afaPNfX0TZNhhkzq2tV8hZdwQ5wgL+Zk87kWbNm+jOMQLfqzZRzL0bNx0W5ZBY5nCJU0YeKW83qur4QHxg=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="PromoteToStable" elasticProfileId="gocd-private-plugin">
            <tasks>
              <exec command="./gradlew">
                <arg>promoteRelease</arg>
                <arg>rebuildStableReleaseJson</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="YankRelease">
        <approval type="manual" />
        <environmentvariables>
          <variable name="STABLE_BUCKET_NAME">
            <value>extensionsgocdio-extensionsdownloadss3-1qj85nxlfyhde</value>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:qicwQY/M85NBT5gfjOvz0A==:TVb1CvwY8u66a3RoeaVpjha2IIc5hcvIc4KMSWkm4I5vCgjrtH3/9y3UtbajMye9</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:8EhvP6bmVehXe1dbzQmrxA==:1oADwWkR6xecNLve3ag0giaXp/WCes/FBTDHJHe/8rU889QjjTKLQ/uUGmcgcAxPvXVpiWP4CN6FUJ9OA2xbiqNJqn946gM/QI/o/LEjXso=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="YankRelease" elasticProfileId="gocd-private-plugin">
            <tasks>
              <exec command="./gradlew">
                <arg>yankRelease</arg>
                <arg>rebuildStableReleaseJson</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gradle-commercial-plugin-pr">
      <stage name="Test">
        <jobs>
          <job name="test" elasticProfileId="#{gradle-test-profile}">
            <tasks>
              <exec command="./gradlew" args="--parallel --max-workers 2 build">
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="JUnitResults" path="JUnitResults/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="test" src="build/test-results/test/*.xml" dest="test-reports" />
              <artifact type="build" src="build/reports/tests/**/*.*" dest="JUnitResults" />
              <artifact type="build" src="build/libs/*" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="api.go.cd">
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="build_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec middleman build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToGHPages" cleanWorkingDir="true">
        <jobs>
          <job name="pushtoghpages_job" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:V2saZbPhLLg/XC1ZkeN48g==:Y9YctB0IKz7GtdXKpmJAGcVqszScPZsVtTztmvl7XJLUcCizOoRLPu/NXGLjw/F8Hy7c2h7KeOPoM7po9T2AfVTWRG4Ru+zfqnhVw5rlNaQ=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add upstream 'https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/api.go.cd'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --path .bundle --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ALLOW_DIRTY=true REMOTE_NAME=upstream bundle exec rake publish --trace</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToS3" cleanWorkingDir="true">
        <environmentvariables>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:1g2MObXLXVMnl0JJXrR9PA==:+TvoLAL2NTv6F69T4fLpfVRWV6tRhBHrvcp70xYJ3IoGthyovkGtuNiM7Ups/gMV</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:M47POY38SF2/dmEa6fMxxg==:ylsivAyYR/tTvW3t7GfrRHyNYYNd4+eu5FCgz7c9xCgMNLjgxPL+nT7J8B/cday6p1KJzH8LwaWDxb+uZzXkZ4PuS61lv/Xs7GU83P0Y4Nk=</encryptedValue>
          </variable>
          <variable name="S3_BUCKET" secure="true">
            <encryptedValue>AES:pVcflGbta1Z08RmW5m6f4Q==:AtCgCb7bN113EcE7VFBROSJBWbBHL5A0Yudw7Lq7zYMDQJqhABhq8RB2fCyJMHuDh8HnfG7zbKIlc2vP/kVUGw==</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="pushtos3_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>NOKOGIRI_USE_SYSTEM_LIBRARIES=1 bundle install --jobs=4 --path=.bundle --clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake upload_to_s3</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gocd-developer-docs">
      <stage name="Build">
        <jobs>
          <job name="build_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle install --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToGHPages">
        <jobs>
          <job name="pushtoghpages_job" elasticProfileId="ecs-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:ll8Dq/YNED8LccEyle8Q2Q==:lg7sChnMNsC1wilGISOIQu2+XVjDhvhOxIamuHgBDbt9tfPXjOtQ1GxzOYm9j2RFGFKSMZZADESKIq3eL6l7r7twxWjmbdKG3AYG1dQDZsI=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add upstream 'https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/developer.go.cd'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle install --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ALLOW_DIRTY=true REMOTE_NAME=upstream bundle exec rake publish</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gocd-help-docs">
      <stage name="Build">
        <jobs>
          <job name="build_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle install --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToGHPages">
        <jobs>
          <job name="pushtoghpages_job" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:YritLd7Lowq0MuZiNzmBRg==:hyx+0oPj7x+JfueSwTXN9Eg6a2BJmKK3sjPXLPCY7XcYMHxsZ8VS73ImN6RFIp+yoVEyCugMueEURSnlx4m7YdnRsJtO1Gna2XOVTvKSDMo=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add upstream 'https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/docs.go.cd'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle install --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ALLOW_DIRTY=true REMOTE_NAME=upstream bundle exec rake publish</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="plugin-api-docs">
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4 --path .bundle</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec middleman build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToGHPages" cleanWorkingDir="true">
        <jobs>
          <job name="PushToGHPages" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:093m/n7zXSCajtMMUWLcWA==:ZGDPUjc1f8na6ifEUs3wFhssEzV4mZBm4NXGrEsUAJOwlECprbtBRIV3VJdCMy5FT2moI8OWOvsKA1ApRqJNNamaYpbjPaT1YxBvoUzFXO0=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add upstream 'https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd/plugin-api.go.cd'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --path .bundle --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ALLOW_DIRTY=true REMOTE_NAME=upstream bundle exec rake publish --trace</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToS3">
        <environmentvariables>
          <variable name="S3_BUCKET" secure="true">
            <encryptedValue>AES:MM5nxUKmqaw2YfdHC6sGEQ==:rAgQSYZUW5GXQ2WbT1Z4QLL9nNGLG3GKIq3C85pje7mZVIvbAvBud5rN6WOSebL6NmVYO6GLkpds5bJnZCnplFPw8Dlr7eogUxWM7bdLoyI=</encryptedValue>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:bduFSiTN5n7FGYoAFCL+NA==:oPN5qdx7/NuGCXnkjinlzsxl9EjaiRz/Q3gi560y66xoHx940C4Byzw0CMrEUBv7</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:0FlLecVkKFJl+xi3I5n5zQ==:6YndAA7GUj+To/8jbXpqBcm8dIKvgaaSjJK8VQl9IMp/RC9GYRysueJLyIfcRFEov11/cuLQBJJGp6nlVnBZiCdcgjPGmMk1mp46bJXB2Zo=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="pushtos3_job" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>NOKOGIRI_USE_SYSTEM_LIBRARIES=1 bundle install --jobs=4 --path=.bundle --clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake upload_to_s3</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="extensions-docs-site">
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --jobs 4 --path .bundle</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>bundle exec rake build --trace</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToGHPages" cleanWorkingDir="true">
        <jobs>
          <job name="PushToGHPages" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:hoZMrT90BFJ9ZYQHtV0Fzw==:+38pE6mnhNTH/IEldxihGSluEFv0GnERCPziQQlLJDizAsfoU7Ku06/MkWzRkAZazv02qowuDSbqqWNvJcRRDuIQzAsyjyGIFdHceGGO4ns=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git remote add upstream 'https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd-private/extensions-docs.gocd.org'</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx &amp;&amp; export NOKOGIRI_USE_SYSTEM_LIBRARIES=1; bundle install --path .bundle --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ALLOW_DIRTY=true REMOTE_NAME=upstream bundle exec rake publish --trace</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PushToS3">
        <environmentvariables>
          <variable name="S3_BUCKET">
            <value>extensionsdocsgocdorg-extensionsdocsgocdorgs3-1wn93qx8vrysx</value>
          </variable>
          <variable name="AWS_ACCESS_KEY_ID" secure="true">
            <encryptedValue>AES:PkNtO3V2LfMN8D+I8Hp35A==:87Gq4H/XbYih/scPOaCibDClw3uybTbV5kAKJmCo6ZrQT5LEhfXamHXyfhc0BQck</encryptedValue>
          </variable>
          <variable name="AWS_SECRET_ACCESS_KEY" secure="true">
            <encryptedValue>AES:AvsZaHhH8xzmCYJxgfpUfA==:a3X5FqlLui6MVdMwhvKjuANhzn7vzr/98V/RWxE4f/6Zr+0LBuNYb4yEFckFUTk3q+zh7Nkm+9llzGFiujFJyYG8NlHx+RtognGvWJeS290=</encryptedValue>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="pushtos3_job" elasticProfileId="docker-gocd-dev-build">
            <environmentvariables>
              <variable name="BUILD_MAP_USER">
                <value>gocd-ci-user</value>
              </variable>
              <variable name="BUILD_MAP_PASSWORD" secure="true">
                <encryptedValue>AES:PYzT/mw12G9MRIq1w7jB0g==:vvc7VtiPx0KgqrqCx/Qx8cwRl8UeGvMYe4jDnDI9/QgNXS6BnbnLWTNsTh3dWlqSRpm8tar7fbP8/F0nNLQeVLt/6QS4vdOjYgKWmD4/NP0=</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>git clean -fdx</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>NOKOGIRI_USE_SYSTEM_LIBRARIES=1 bundle install --path .bundle --clean --jobs 4</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>REPO_URL=https://${BUILD_MAP_USER}:${BUILD_MAP_PASSWORD}@github.com/gocd-private/extensions-docs.gocd.org bundle exec rake upload_to_s3</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="GhPagesToS3">
      <authorization>
        <admins>
          <user>ketan</user>
        </admins>
      </authorization>
      <stage name="S3Sync" cleanWorkingDir="true">
        <jobs>
          <job name="S3Sync" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>/opt/local/awscli/bin/aws configure set s3.signature_version s3v4</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>yum</arg>
                <arg>install</arg>
                <arg>-y</arg>
                <arg>mailcap</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>/opt/local/awscli/bin/aws s3 sync . s3://${S3_BUCKET} --cache-control 'max-age=600, must-revalidate' --exclude='.git/*' --delete --acl public-read --follow-symlinks</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="template-addon-build">
      <stage name="build-addons" cleanWorkingDir="true">
        <jobs>
          <job name="postgresql" elasticProfileId="ecs-enterprise-postgres-build">
            <environmentvariables>
              <variable name="DB_USER">
                <value>go</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean postgresql:assemble postgresql:test" />
            </tasks>
            <artifacts>
              <artifact type="test" src="addons/postgresql/target/test-results/*.xml" dest="test-reports" />
              <artifact type="build" src="addons/postgresql/target/distributions/*.jar" dest="postgresql-addon" />
            </artifacts>
          </job>
          <job name="business-continuity" elasticProfileId="ecs-enterprise-postgres-build">
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean business-continuity:assemble business-continuity:test" />
            </tasks>
            <artifacts>
              <artifact type="test" src="addons/business-continuity/target/test-results/*.xml" dest="test-reports" />
              <artifact type="build" src="addons/business-continuity/target/distributions/*.jar" dest="business-continuity-addon" />
            </artifacts>
          </job>
          <job name="test-addon" elasticProfileId="ecs-enterprise-postgres-build">
            <tasks>
              <exec command="./gradlew">
                <arg>test:test-addon:assemble</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="core/test/test-addon/target/libs/*.jar" dest="test-addon" />
            </artifacts>
          </job>
          <job name="jar-class-runner" elasticProfileId="ecs-enterprise-postgres-build">
            <tasks>
              <exec command="git">
                <arg>clean</arg>
                <arg>-dffx</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>-PfastBuild</arg>
                <arg>--parallel</arg>
                <arg>--max-workers</arg>
                <arg>2</arg>
                <arg>clean</arg>
                <arg>business-continuity:assemble</arg>
                <arg>business-continuity:test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="build-server" cleanWorkingDir="true">
        <jobs>
          <job name="server-split" runInstanceCount="12" elasticProfileId="ecs-enterprise-addon-high-memory">
            <environmentvariables>
              <variable name="USE_POSTGRESQL">
                <value>Y</value>
              </variable>
              <variable name="DB_USER">
                <value>go</value>
              </variable>
              <variable name="ADDON_DOWNLOAD_URL">
                <value>https://extensions.gocd.org/addons/postgres_experimental/versions</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git" args="clean -dffx" />
              <exec command="./gradlew" args="-PfastBuild --parallel --max-workers 2 clean postgresql:prepare server:assemble server:check">
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="core/server/target/reports/tests/**/*.xml" dest="test-reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="bundled-plugins-build">
      <authorization>
        <admins>
          <user>bdpiparva</user>
        </admins>
      </authorization>
      <stage name="build">
        <jobs>
          <job name="build" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>check</arg>
                <arg>assemble</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="build/libs/*.*" dest="dist" />
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="github_release">
        <approval type="manual" />
        <environmentvariables>
          <variable name="GITHUB_USER">
            <value>gocd</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="github_release" elasticProfileId="gocd-private-plugin">
            <tasks>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>assemble</arg>
                <arg>githubRelease</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="plugin-github-release">
      <authorization>
        <admins>
          <user>bdpiparva</user>
        </admins>
      </authorization>
      <stage name="GitHubRelease">
        <approval type="manual" />
        <jobs>
          <job name="GitHubRelease" elasticProfileId="gocd-private-plugin">
            <tasks>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>assemble</arg>
                <arg>githubRelease</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gocd-contrib-plugin">
      <authorization>
        <admins>
          <user>bdpiparva</user>
        </admins>
      </authorization>
      <stage name="run-junit">
        <jobs>
          <job name="tests" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>assemble</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Test_Results" path="reports/tests/test/index.html" />
            </tabs>
            <artifacts>
              <artifact type="build" src="build/libs/*.*" dest="dist" />
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="docker-plugins-build">
      <authorization>
        <admins>
          <user>varshavaradarajan</user>
          <user>bdpiparva</user>
        </admins>
      </authorization>
      <stage name="Build">
        <jobs>
          <job name="run-test-with-17.03.0" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.03.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.03.1" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.03.1</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.03.2" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.03.2</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.06.0" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.06.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.06.1" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.06.1</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.06.2" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.06.2</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.09.0" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.09.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.09.1" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.09.1</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
          <job name="run-test-with-17.12.0" elasticProfileId="ecs-docker-in-docker">
            <environmentvariables>
              <variable name="DOCKER_VERSION">
                <value>17.12.0</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sudo dvm install $DOCKER_VERSION</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="test" src="build/reports/*" dest="reports" />
              <artifact type="test" src="build/test-results/*" dest="test-results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="upload-artifact">
        <jobs>
          <job name="upload-artifact" elasticProfileId="docker-gocd-dev-build">
            <tasks>
              <exec command="./gradlew">
                <arg>clean</arg>
                <arg>assemble</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact type="build" src="build/libs/*.*" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <environments>
    <environment name="gocd">
      <environmentvariables>
        <variable name="TZ">
          <value>Asia/Calcutta</value>
        </variable>
        <variable name="DOWNLOAD_SERVER">
          <value>172.16.38.46</value>
        </variable>
        <variable name="TFS_SERVER_URL">
          <value>http://server-name:8080/tfs/</value>
        </variable>
        <variable name="GAUGE_TELEMETRY_ENABLED">
          <value>false</value>
        </variable>
        <variable name="GO_VERSION">
          <value>18.4.0</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="756ad963-0c35-405c-b160-3800701dadb9" />
        <physical uuid="01984e92-206e-4cda-a05c-a4c8ef9b9032" />
        <physical uuid="e7e52ddb-afc8-4100-8018-02bccb3cdd29" />
        <physical uuid="e5e899d0-13aa-4a77-bcf3-8bafd1bea744" />
        <physical uuid="0698f6a3-6e04-4724-98b9-c3fd6555218e" />
        <physical uuid="2c87efeb-8b33-4362-96f8-4ed713090337" />
        <physical uuid="03fef0dc-73a7-4b7b-894b-9c724c6ab806" />
        <physical uuid="c317866f-d0ed-49b1-8dfa-11d28a37c5b8" />
        <physical uuid="769acda2-1839-4948-8ddf-b62bc2bf043c" />
        <physical uuid="3611c6a7-b8c8-4b6f-bd51-25bb6ddd6c1e" />
        <physical uuid="b61ab35f-72b2-4378-acbb-331693479eb7" />
        <physical uuid="7b03cc12-377f-44b5-8963-54a0ba13b543" />
        <physical uuid="d7243396-5947-4c06-ae2b-acde9f3e99d9" />
        <physical uuid="838409a9-0b63-4abb-b5b5-9db4b5967659" />
        <physical uuid="ad70588e-d322-40ee-92f6-ec370bc244ed" />
        <physical uuid="e4e13ec9-f397-40fc-89a4-ece8bdf2715c" />
        <physical uuid="85f59400-73f0-40b4-b4a6-123cc8012d48" />
        <physical uuid="17be95ac-e837-4e93-ac80-332290d37ca7" />
        <physical uuid="b9a506d0-1443-40ab-81a0-225c13c453a3" />
        <physical uuid="a3b6f4f2-69d4-466c-a994-9f5ecb0e6b26" />
        <physical uuid="da35fc5c-d7e7-4819-9db4-94e2886fef1c" />
        <physical uuid="459076c2-dd84-4e63-af99-c3ba32db4934" />
        <physical uuid="2b1016ce-6e08-4849-87aa-7d08db2eb899" />
        <physical uuid="65958cea-37dc-4a97-9024-e36ca98121ae" />
        <physical uuid="f15e0b3f-5654-45db-acf1-61d47c78b81d" />
        <physical uuid="4cf19692-e0bc-40b1-afea-724f25cbb63b" />
        <physical uuid="781765e7-0c24-459e-851f-4a57396c0279" />
        <physical uuid="16265c7e-6acb-436d-9377-ddd944b4b031" />
        <physical uuid="13251c0d-1509-43cd-abfd-6a9adc56c1d1" />
        <physical uuid="1af2739a-5ae6-4280-874a-29ac87f8ec06" />
        <physical uuid="dcded594-dab5-4084-b998-860b7c7ac742" />
        <physical uuid="7ec2c9fa-d11d-4b10-8828-93aed96301a6" />
        <physical uuid="c01771d7-c908-4155-ab56-10fa321c58f3" />
        <physical uuid="7463a9e4-6906-4128-9504-2a0d995c5e9e" />
        <physical uuid="0f398060-90fb-443b-88a0-1cb1f436264c" />
        <physical uuid="d0cf6237-de13-47a0-b7ac-013f3a6b9976" />
        <physical uuid="fa1cfa11-6695-42b6-9ac9-18f22fcff8ee" />
        <physical uuid="0cd13341-5f52-4325-b660-e421ab08cd9b" />
      </agents>
      <pipelines>
        <pipeline name="acceptance-linux" />
        <pipeline name="acceptance-linux-PR" />
        <pipeline name="build-linux" />
        <pipeline name="build-linux-PR" />
        <pipeline name="build-windows" />
        <pipeline name="build-windows-PR" />
        <pipeline name="go-cd-contrib-bhkwan" />
        <pipeline name="go-cookbook" />
        <pipeline name="go-cookbook-pr" />
        <pipeline name="go-nuget-poller-plugin-2.0" />
        <pipeline name="gocd-golang-agent" />
        <pipeline name="installer-tests" />
        <pipeline name="installers" />
        <pipeline name="installers-PR" />
        <pipeline name="plugins" />
        <pipeline name="plugins-PR" />
        <pipeline name="PublishStableRelease" />
        <pipeline name="regression" />
        <pipeline name="regression-PR" />
        <pipeline name="regression-SPAs" />
        <pipeline name="regression-SPAs-PR" />
        <pipeline name="smoke" />
        <pipeline name="smoke-PR" />
        <pipeline name="trigger" />
        <pipeline name="UploadInstallers" />
      </pipelines>
    </environment>
    <environment name="internal">
      <environmentvariables>
        <variable name="GAUGE_TELEMETRY_ENABLED">
          <value>false</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="e7e52ddb-afc8-4100-8018-02bccb3cdd29" />
        <physical uuid="c7e90144-3d09-4529-9409-f0b251c20d92" />
        <physical uuid="0698f6a3-6e04-4724-98b9-c3fd6555218e" />
        <physical uuid="756ad963-0c35-405c-b160-3800701dadb9" />
        <physical uuid="c317866f-d0ed-49b1-8dfa-11d28a37c5b8" />
        <physical uuid="2c87efeb-8b33-4362-96f8-4ed713090337" />
        <physical uuid="f1826dd0-9f66-49c7-b530-f5866ab9ac7f" />
        <physical uuid="0dbd1922-f314-4364-b8cf-e26154a93893" />
        <physical uuid="01984e92-206e-4cda-a05c-a4c8ef9b9032" />
        <physical uuid="03fef0dc-73a7-4b7b-894b-9c724c6ab806" />
        <physical uuid="b14dc131-eade-4aac-8d72-726593bf666f" />
        <physical uuid="769acda2-1839-4948-8ddf-b62bc2bf043c" />
        <physical uuid="3611c6a7-b8c8-4b6f-bd51-25bb6ddd6c1e" />
        <physical uuid="b61ab35f-72b2-4378-acbb-331693479eb7" />
        <physical uuid="7b03cc12-377f-44b5-8963-54a0ba13b543" />
        <physical uuid="d7243396-5947-4c06-ae2b-acde9f3e99d9" />
        <physical uuid="838409a9-0b63-4abb-b5b5-9db4b5967659" />
        <physical uuid="ad70588e-d322-40ee-92f6-ec370bc244ed" />
        <physical uuid="e4e13ec9-f397-40fc-89a4-ece8bdf2715c" />
        <physical uuid="85f59400-73f0-40b4-b4a6-123cc8012d48" />
        <physical uuid="17be95ac-e837-4e93-ac80-332290d37ca7" />
        <physical uuid="b9a506d0-1443-40ab-81a0-225c13c453a3" />
        <physical uuid="a3b6f4f2-69d4-466c-a994-9f5ecb0e6b26" />
        <physical uuid="da35fc5c-d7e7-4819-9db4-94e2886fef1c" />
        <physical uuid="b4e001bd-3fe5-40a0-b0f5-5e997a26bcfc" />
        <physical uuid="2b1016ce-6e08-4849-87aa-7d08db2eb899" />
        <physical uuid="e4275ea1-5145-49a9-b995-362c8e2ec08e" />
        <physical uuid="65958cea-37dc-4a97-9024-e36ca98121ae" />
        <physical uuid="f15e0b3f-5654-45db-acf1-61d47c78b81d" />
        <physical uuid="4cf19692-e0bc-40b1-afea-724f25cbb63b" />
        <physical uuid="781765e7-0c24-459e-851f-4a57396c0279" />
        <physical uuid="16265c7e-6acb-436d-9377-ddd944b4b031" />
        <physical uuid="13251c0d-1509-43cd-abfd-6a9adc56c1d1" />
        <physical uuid="1af2739a-5ae6-4280-874a-29ac87f8ec06" />
        <physical uuid="dcded594-dab5-4084-b998-860b7c7ac742" />
        <physical uuid="7ec2c9fa-d11d-4b10-8828-93aed96301a6" />
        <physical uuid="c01771d7-c908-4155-ab56-10fa321c58f3" />
        <physical uuid="7463a9e4-6906-4128-9504-2a0d995c5e9e" />
        <physical uuid="0f398060-90fb-443b-88a0-1cb1f436264c" />
        <physical uuid="d0cf6237-de13-47a0-b7ac-013f3a6b9976" />
        <physical uuid="fa1cfa11-6695-42b6-9ac9-18f22fcff8ee" />
        <physical uuid="0cd13341-5f52-4325-b660-e421ab08cd9b" />
      </agents>
      <pipelines>
        <pipeline name="akshay-test" />
        <pipeline name="Amazon-ECS-Plugin" />
        <pipeline name="Amazon-ECS-Plugin-PR" />
        <pipeline name="BC-testing" />
        <pipeline name="docker" />
        <pipeline name="extensions-app" />
        <pipeline name="extensions-docs-site" />
        <pipeline name="go-microsite-deploy" />
        <pipeline name="Installer-testing" />
        <pipeline name="javasysmon" />
        <pipeline name="Ldap-Authorization-Plugin" />
        <pipeline name="Ldap-Authorization-Plugin-PR" />
        <pipeline name="migration-test" />
        <pipeline name="peg-gocd-in-enterprise" />
        <pipeline name="publish-cloud-based-artifacts" />
        <pipeline name="Security-Checks" />
        <pipeline name="Upgrade-testing" />
        <pipeline name="upload_addons_to_download_server" />
      </pipelines>
    </environment>
    <environment name="Golang_GoCD_Example">
      <agents>
        <physical uuid="e5e899d0-13aa-4a77-bcf3-8bafd1bea744" />
      </agents>
      <pipelines>
        <pipeline name="App_with_Unversioned_Libraries" />
        <pipeline name="Standalone" />
      </pipelines>
    </environment>
    <environment name="performance">
      <agents>
        <physical uuid="c5771184-5705-4b41-b523-98f5060e2fb0" />
        <physical uuid="382231d2-e992-47ca-a7c4-950daed53723" />
        <physical uuid="2c87efeb-8b33-4362-96f8-4ed713090337" />
        <physical uuid="a3b6f4f2-69d4-466c-a994-9f5ecb0e6b26" />
        <physical uuid="d91fe91b-1d92-4a98-9f57-c3d643b98117" />
        <physical uuid="da35fc5c-d7e7-4819-9db4-94e2886fef1c" />
        <physical uuid="5b569b0e-84ee-4015-b44f-ec25da884eae" />
        <physical uuid="e4275ea1-5145-49a9-b995-362c8e2ec08e" />
        <physical uuid="4e6298d8-4f73-4f31-9093-3930624b117d" />
        <physical uuid="d4230fb1-71c9-46e8-986e-55ff54285415" />
      </agents>
      <pipelines>
        <pipeline name="performance" />
      </pipelines>
    </environment>
    <environment name="Go01">
      <agents>
        <physical uuid="857976b7-efed-44fa-8580-b36f04111fca" />
      </agents>
      <pipelines>
        <pipeline name="go01" />
        <pipeline name="Go01_Backup" />
      </pipelines>
    </environment>
    <environment name="GetGauge">
      <pipelines>
        <pipeline name="getgauge" />
      </pipelines>
    </environment>
    <environment name="Helm">
      <agents>
        <physical uuid="868ad743-a702-4a39-b239-feed1ded4960" />
        <physical uuid="0dfd8508-179e-4261-9f8e-6d2e1961e28e" />
      </agents>
      <pipelines>
        <pipeline name="helm-test-ci" />
      </pipelines>
    </environment>
  </environments>
  <agents>
    <agent hostname="fmtgocddist01.go.cd" ipaddress="192.168.117.37" uuid="756ad963-0c35-405c-b160-3800701dadb9" isDisabled="true">
      <resources>
        <resource>firefox</resource>
        <resource>gocd</resource>
        <resource>upload-agent</resource>
        <resource>dist-all</resource>
      </resources>
    </agent>
    <agent hostname="gocdvmbgr02.go.cd" ipaddress="192.168.108.106" uuid="01984e92-206e-4cda-a05c-a4c8ef9b9032" isDisabled="true">
      <resources>
        <resource>virtualbox</resource>
        <resource>vm_builder</resource>
      </resources>
    </agent>
    <agent hostname="blrstdgoprf02.thoughtworks.com" ipaddress="10.132.4.122" uuid="e7e52ddb-afc8-4100-8018-02bccb3cdd29">
      <resources>
        <resource>installer-tests</resource>
      </resources>
    </agent>
    <agent hostname="gocdgolang01.go.cd" ipaddress="192.168.141.29" uuid="e5e899d0-13aa-4a77-bcf3-8bafd1bea744" isDisabled="true">
      <resources>
        <resource>golang</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent91.go.cd" ipaddress="192.168.117.100" uuid="c7e90144-3d09-4529-9409-f0b251c20d92" isDisabled="true">
      <resources>
        <resource>centos7</resource>
        <resource>docker-build</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdprfagent01.go.cd" ipaddress="192.168.117.139" uuid="c5771184-5705-4b41-b523-98f5060e2fb0" isDisabled="true">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>repos</resource>
      </resources>
    </agent>
    <agent hostname="blrstdgoprf04.thoughtworks.com" ipaddress="10.132.4.124" uuid="382231d2-e992-47ca-a7c4-950daed53723" isDisabled="true">
      <resources>
        <resource>agent</resource>
        <resource>performance</resource>
        <resource>large-instance</resource>
      </resources>
    </agent>
    <agent hostname="fmtstdgo05.thoughtworks.com" ipaddress="192.168.150.166" uuid="0dbd1922-f314-4364-b8cf-e26154a93893" isDisabled="true">
      <resources>
        <resource>go05_server</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdchefdk01.go.cd" ipaddress="192.168.117.76" uuid="0698f6a3-6e04-4724-98b9-c3fd6555218e" isDisabled="true">
      <resources>
        <resource>cookbook</resource>
        <resource>do-nothing</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdprf02.go.cd" ipaddress="192.168.117.85" uuid="2c87efeb-8b33-4362-96f8-4ed713090337" isDisabled="true">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>server</resource>
      </resources>
    </agent>
    <agent hostname="unknown-host-227" ipaddress="10.132.4.133" uuid="03fef0dc-73a7-4b7b-894b-9c724c6ab806">
      <resources>
        <resource>installer-tests-centos-7</resource>
      </resources>
    </agent>
    <agent hostname="gocdgolang01.go.cd" ipaddress="192.168.107.38" uuid="8ddf7993-675a-4a7f-a714-cfb778b3fff2" isDisabled="true">
      <resources>
        <resource>golang_test</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocddist02.go.cd" ipaddress="192.168.117.153" uuid="c317866f-d0ed-49b1-8dfa-11d28a37c5b8" isDisabled="true">
      <resources>
        <resource>dist-all</resource>
        <resource>firefox</resource>
        <resource>gocd</resource>
        <resource>upload-agent</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdk8s01.go.cd" ipaddress="192.168.117.160" uuid="868ad743-a702-4a39-b239-feed1ded4960" isDisabled="true">
      <resources>
        <resource>helm</resource>
      </resources>
    </agent>
    <agent hostname="fmtstdgo05.studioslabs.thoughtworks.com" ipaddress="192.168.206.33" uuid="f1826dd0-9f66-49c7-b530-f5866ab9ac7f" isDisabled="true">
      <resources>
        <resource>go05_server</resource>
      </resources>
    </agent>
    <agent hostname="blrstdgoprf03.thoughtworks.com" ipaddress="10.132.4.123" uuid="b14dc131-eade-4aac-8d72-726593bf666f">
      <resources>
        <resource>installer-testing</resource>
      </resources>
    </agent>
    <agent hostname="fmtstdgo01.thoughtworks.com" ipaddress="10.38.10.253" uuid="857976b7-efed-44fa-8580-b36f04111fca">
      <resources>
        <resource>go01-server</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdk8s01.gocd.org" ipaddress="192.168.184.16" uuid="0dfd8508-179e-4261-9f8e-6d2e1961e28e">
      <resources>
        <resource>helm</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocddist02.gocd.org" ipaddress="192.168.184.26" uuid="3611c6a7-b8c8-4b6f-bd51-25bb6ddd6c1e">
      <resources>
        <resource>dist-all</resource>
        <resource>firefox</resource>
        <resource>gocd</resource>
        <resource>upload-agent</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent104" ipaddress="192.168.184.33" uuid="769acda2-1839-4948-8ddf-b62bc2bf043c">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>windows</resource>
        <resource>service_interact_with_desktop</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent105" ipaddress="192.168.184.19" uuid="b61ab35f-72b2-4378-acbb-331693479eb7">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent106" ipaddress="192.168.184.15" uuid="7b03cc12-377f-44b5-8963-54a0ba13b543">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent107" ipaddress="192.168.184.27" uuid="d7243396-5947-4c06-ae2b-acde9f3e99d9">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent108" ipaddress="192.168.184.30" uuid="838409a9-0b63-4abb-b5b5-9db4b5967659">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent110" ipaddress="192.168.184.17" uuid="ad70588e-d322-40ee-92f6-ec370bc244ed">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent101" ipaddress="192.168.184.40" uuid="e4e13ec9-f397-40fc-89a4-ece8bdf2715c">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent103" ipaddress="192.168.184.29" uuid="85f59400-73f0-40b4-b4a6-123cc8012d48">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent102" ipaddress="192.168.184.25" uuid="17be95ac-e837-4e93-ac80-332290d37ca7">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent109" ipaddress="192.168.184.38" uuid="b9a506d0-1443-40ab-81a0-225c13c453a3">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdprf02.gocd.org" ipaddress="192.168.184.39" uuid="a3b6f4f2-69d4-466c-a994-9f5ecb0e6b26" isDisabled="true">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>server</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdprfagent01.gocd.org" ipaddress="192.168.184.14" uuid="d91fe91b-1d92-4a98-9f57-c3d643b98117" isDisabled="true">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>repos</resource>
      </resources>
    </agent>
    <agent hostname="blrstdgocdprfdb.thoughtworks.com" ipaddress="10.132.3.197" uuid="5b569b0e-84ee-4015-b44f-ec25da884eae" isDisabled="true">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>repos</resource>
      </resources>
    </agent>
    <agent hostname="blrstdgocdprfserver.thoughtworks.com" ipaddress="10.132.3.196" uuid="da35fc5c-d7e7-4819-9db4-94e2886fef1c" isDisabled="true">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>server</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdinfraplugins01.gocd.org" ipaddress="192.168.185.16" uuid="459076c2-dd84-4e63-af99-c3ba32db4934">
      <resources>
        <resource>dev</resource>
        <resource>linux</resource>
        <resource>studios-gitlab</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent91.gocd.org" ipaddress="192.168.184.32" uuid="b4e001bd-3fe5-40a0-b0f5-5e997a26bcfc">
      <resources>
        <resource>centos7</resource>
        <resource>docker-build</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdchefdk01.gocd.org" ipaddress="192.168.184.41" uuid="2b1016ce-6e08-4849-87aa-7d08db2eb899">
      <resources>
        <resource>cookbook</resource>
        <resource>do-nothing</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdprf02.studioslabs.thoughtworks.com" ipaddress="172.16.38.212" uuid="4e6298d8-4f73-4f31-9093-3930624b117d">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>repos</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdprf03.studioslabs.thoughtworks.com" ipaddress="172.16.38.213" uuid="d4230fb1-71c9-46e8-986e-55ff54285415">
      <resources>
        <resource>agent</resource>
        <resource>large-instance</resource>
        <resource>performance</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdprf01.studioslabs.thoughtworks.com" ipaddress="172.16.38.211" uuid="e4275ea1-5145-49a9-b995-362c8e2ec08e">
      <resources>
        <resource>linux</resource>
        <resource>performance</resource>
        <resource>server</resource>
      </resources>
    </agent>
    <agent hostname="unknown-host-836" ipaddress="10.132.4.133" uuid="685ebb4d-e9e4-4440-85eb-ff335433eb98" isDisabled="true" />
    <agent hostname="unknown-host-357" ipaddress="10.132.4.133" uuid="4646dfa4-12df-4839-b7d8-6e545b6a48ad" isDisabled="true" />
    <agent hostname="unknown-host-933" ipaddress="10.132.4.133" uuid="6debeb3e-c58b-4aa7-821f-aba644aacfed" isDisabled="true" />
    <agent hostname="fmtgocdagent112" ipaddress="192.168.184.53" uuid="f15e0b3f-5654-45db-acf1-61d47c78b81d">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent111" ipaddress="192.168.184.50" uuid="65958cea-37dc-4a97-9024-e36ca98121ae">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent113" ipaddress="192.168.184.51" uuid="4cf19692-e0bc-40b1-afea-724f25cbb63b">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent114" ipaddress="192.168.184.46" uuid="781765e7-0c24-459e-851f-4a57396c0279">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent115" ipaddress="192.168.184.49" uuid="16265c7e-6acb-436d-9377-ddd944b4b031">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent116" ipaddress="192.168.184.37" uuid="13251c0d-1509-43cd-abfd-6a9adc56c1d1">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent117" ipaddress="192.168.184.56" uuid="1af2739a-5ae6-4280-874a-29ac87f8ec06">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent118" ipaddress="192.168.184.58" uuid="dcded594-dab5-4084-b998-860b7c7ac742">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>windows</resource>
        <resource>service_interact_with_desktop</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent120" ipaddress="192.168.184.48" uuid="7ec2c9fa-d11d-4b10-8828-93aed96301a6">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent121" ipaddress="192.168.184.54" uuid="c01771d7-c908-4155-ab56-10fa321c58f3">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent122" ipaddress="192.168.184.63" uuid="7463a9e4-6906-4128-9504-2a0d995c5e9e">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent123" ipaddress="192.168.184.59" uuid="0f398060-90fb-443b-88a0-1cb1f436264c">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent124" ipaddress="192.168.184.62" uuid="d0cf6237-de13-47a0-b7ac-013f3a6b9976">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent125" ipaddress="192.168.184.35" uuid="fa1cfa11-6695-42b6-9ac9-18f22fcff8ee">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
    <agent hostname="fmtgocdagent119" ipaddress="192.168.184.52" uuid="0cd13341-5f52-4325-b660-e421ab08cd9b">
      <resources>
        <resource>dev</resource>
        <resource>gauge</resource>
        <resource>ie9</resource>
        <resource>service_interact_with_desktop</resource>
        <resource>windows</resource>
      </resources>
    </agent>
  </agents>
</cruise>
