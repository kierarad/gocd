//
// This file was automatically generated by jrepresenter
// Any changes may be lost!
//
package gen.com.thoughtworks.go.config.representers;

import cd.go.jrepresenter.JsonParseException;
import cd.go.jrepresenter.LinksMapper;
import cd.go.jrepresenter.LinksProvider;
import cd.go.jrepresenter.RequestContext;
import com.thoughtworks.go.config.Role;
import com.thoughtworks.go.config.RolesConfig;
import com.thoughtworks.go.config.representers.RolesRepresenter;
import java.lang.Object;
import java.lang.String;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Representer for {@link RolesConfig}.
 * Generated using representer {@link RolesRepresenter}.
 */
public class RolesMapper {
  private static LinksProvider<RolesConfig> LINKS_PROVIDER = new RolesRepresenter.RolesLinksProvider();

  public static Map<String, Object> toJSON(RolesConfig value, RequestContext requestContext) {
    Map<String, Object> jsonObject = new LinkedHashMap<String, Object>();
    jsonObject.putAll(LinksMapper.toJSON(LINKS_PROVIDER, value, requestContext));
    Map<String, Object> embeddedMap = new LinkedHashMap<String, Object>();
    embeddedMap.put("roles", RoleMapper.toJSON(value.getRoles(), requestContext));
    jsonObject.put("_embedded", embeddedMap);
    return jsonObject;
  }

  public static List toJSON(List<RolesConfig> values, RequestContext requestContext) {
    return values.stream().map(eachItem -> RolesMapper.toJSON(eachItem, requestContext)).collect(Collectors.toList());
  }

  public static RolesConfig fromJSON(Map jsonObject) {
    RolesConfig model = new RolesConfig();
    if (jsonObject == null) {
      return model;
    }
    if (jsonObject.containsKey("roles")) {
      Object jsonAttribute = jsonObject.get("roles");
      if (!(jsonAttribute instanceof List)) {
        JsonParseException.throwBadJsonType("roles", List.class, jsonObject);
      }
      List deserializedJsonAttribute = (List) jsonAttribute;
      List<Role> modelAttribute = RoleMapper.fromJSON((List) deserializedJsonAttribute);
      model.setRoles(modelAttribute);
    }
    return model;
  }

  public static List<RolesConfig> fromJSON(List<Map> jsonArray) {
    if (jsonArray == null) {
      return Collections.emptyList();
    }
    return jsonArray.stream().map(eachItem -> RolesMapper.fromJSON(eachItem)).collect(Collectors.toList());
  }
}
