//
// This file was automatically generated by jrepresenter
// Any changes may be lost!
//
package gen.com.thoughtworks.go.config.representers;

import cd.go.jrepresenter.JsonParseException;
import cd.go.jrepresenter.RequestContext;
import com.thoughtworks.go.config.RoleConfig;
import com.thoughtworks.go.config.RoleUser;
import gen.cd.go.jrepresenter.Constants;
import java.lang.Object;
import java.lang.String;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Representer for {@link RoleConfig}.
 * Generated using representer {@link com.thoughtworks.go.config.representers.GoCDRoleConfigRepresenter}.
 */
public class GoCDRoleConfigMapper {
  public static Map<String, Object> toJSON(RoleConfig value, RequestContext requestContext) {
    Map<String, Object> jsonObject = new LinkedHashMap<String, Object>();
    jsonObject.put("users", (value.getUsers()).stream().map(Constants.Serializers.ROLE_USER::apply).collect(Collectors.toList()));
    return jsonObject;
  }

  public static List toJSON(List<RoleConfig> values, RequestContext requestContext) {
    return values.stream().map(eachItem -> GoCDRoleConfigMapper.toJSON(eachItem, requestContext)).collect(Collectors.toList());
  }

  public static RoleConfig fromJSON(Map jsonObject) {
    RoleConfig model = new RoleConfig();
    if (jsonObject == null) {
      return model;
    }
    if (jsonObject.containsKey("users")) {
      Object jsonAttribute = jsonObject.get("users");
      if (!(jsonAttribute instanceof List)) {
        JsonParseException.throwBadJsonType("users", List.class, jsonObject);
      }
      List deserializedJsonAttribute = ((List<String>) (jsonAttribute)).stream().map(Constants.Deserializers.ROLE_USER::apply).collect(Collectors.toList());
      List<RoleUser> modelAttribute = (List<RoleUser>) deserializedJsonAttribute;
      model.setUsers(modelAttribute);
    }
    return model;
  }

  public static List<RoleConfig> fromJSON(List<Map> jsonArray) {
    if (jsonArray == null) {
      return Collections.emptyList();
    }
    return jsonArray.stream().map(eachItem -> GoCDRoleConfigMapper.fromJSON(eachItem)).collect(Collectors.toList());
  }
}
