//
// This file was automatically generated by jrepresenter
// Any changes may be lost!
//
package gen.com.thoughtworks.go.config.representers;

import cd.go.jrepresenter.JsonParseException;
import cd.go.jrepresenter.RequestContext;
import com.thoughtworks.go.config.PluginRoleConfig;
import com.thoughtworks.go.config.representers.PluginRoleConfigRepresenter;
import com.thoughtworks.go.domain.config.ConfigurationProperty;
import gen.cd.go.jrepresenter.Constants;
import java.lang.Object;
import java.lang.String;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Representer for {@link PluginRoleConfig}.
 * Generated using representer {@link PluginRoleConfigRepresenter}.
 */
public class PluginRoleConfigMapper {
  public static Map<String, Object> toJSON(PluginRoleConfig value, RequestContext requestContext) {
    Map<String, Object> jsonObject = new LinkedHashMap<String, Object>();
    jsonObject.put("auth_config_id", value.getAuthConfigId());
    jsonObject.put("properties", ConfigurationPropertyMapper.toJSON(Constants.Getters.CONFIGURATION_PROPERTY.apply(value), requestContext));
    return jsonObject;
  }

  public static List toJSON(List<PluginRoleConfig> values, RequestContext requestContext) {
    return values.stream().map(eachItem -> PluginRoleConfigMapper.toJSON(eachItem, requestContext)).collect(Collectors.toList());
  }

  public static PluginRoleConfig fromJSON(Map jsonObject) {
    PluginRoleConfig model = new PluginRoleConfig();
    if (jsonObject == null) {
      return model;
    }
    if (jsonObject.containsKey("auth_config_id")) {
      Object jsonAttribute = jsonObject.get("auth_config_id");
      if (!(jsonAttribute instanceof String)) {
        JsonParseException.throwBadJsonType("auth_config_id", String.class, jsonObject);
      }
      String deserializedJsonAttribute = (String) jsonAttribute;
      String modelAttribute = (String) deserializedJsonAttribute;
      model.setAuthConfigId(modelAttribute);
    }
    if (jsonObject.containsKey("properties")) {
      Object jsonAttribute = jsonObject.get("properties");
      if (!(jsonAttribute instanceof List)) {
        JsonParseException.throwBadJsonType("properties", List.class, jsonObject);
      }
      List deserializedJsonAttribute = (List) jsonAttribute;
      List<ConfigurationProperty> modelAttribute = ConfigurationPropertyMapper.fromJSON((List) deserializedJsonAttribute);
      new PluginRoleConfigRepresenter.ConfigurationPropertySetter().accept(model, modelAttribute);
    }
    return model;
  }

  public static List<PluginRoleConfig> fromJSON(List<Map> jsonArray) {
    if (jsonArray == null) {
      return Collections.emptyList();
    }
    return jsonArray.stream().map(eachItem -> PluginRoleConfigMapper.fromJSON(eachItem)).collect(Collectors.toList());
  }
}
