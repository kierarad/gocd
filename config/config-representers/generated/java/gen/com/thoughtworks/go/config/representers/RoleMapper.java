//
// This file was automatically generated by jrepresenter
// Any changes may be lost!
//
package gen.com.thoughtworks.go.config.representers;

import cd.go.jrepresenter.JsonParseException;
import cd.go.jrepresenter.LinksMapper;
import cd.go.jrepresenter.RequestContext;
import com.thoughtworks.go.config.CaseInsensitiveString;
import com.thoughtworks.go.config.PluginRoleConfig;
import com.thoughtworks.go.config.Role;
import com.thoughtworks.go.config.RoleConfig;
import com.thoughtworks.go.config.representers.GoCDRoleConfigRepresenter;
import com.thoughtworks.go.config.representers.PluginRoleConfigRepresenter;
import gen.cd.go.jrepresenter.Constants;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Representer for {@link Role}.
 * Generated using representer {@link com.thoughtworks.go.config.representers.RoleRepresenter}.
 */
public class RoleMapper {
  public static Map<String, Object> toJSON(Role value, RequestContext requestContext) {
    Map<String, Object> jsonObject = new LinkedHashMap<String, Object>();
    jsonObject.put("name", Constants.Serializers.CASE_INSENSITIVE_STRING.apply(value.getName()));
    jsonObject.put("type", Constants.Getters.ROLE_TYPE.apply(value));
    if (!Constants.SkipRenderers.IF_NO_ERRORS.apply(value)) {
      jsonObject.put("errors", Constants.Getters.ERROR.apply(value));
    }
    Map subClassProperties = null;
    if (value instanceof RoleConfig) {
      jsonObject.putAll(LinksMapper.toJSON(new GoCDRoleConfigRepresenter.RoleConfigLinksProvider(), (RoleConfig) value, requestContext));
      subClassProperties = GoCDRoleConfigMapper.toJSON((RoleConfig) value, requestContext);
    }
    else if (value instanceof PluginRoleConfig) {
      jsonObject.putAll(LinksMapper.toJSON(new PluginRoleConfigRepresenter.RoleConfigLinksProvider(), (PluginRoleConfig) value, requestContext));
      subClassProperties = PluginRoleConfigMapper.toJSON((PluginRoleConfig) value, requestContext);
    }
    jsonObject.put("attributes", subClassProperties);
    return jsonObject;
  }

  public static List toJSON(List<Role> values, RequestContext requestContext) {
    return values.stream().map(eachItem -> RoleMapper.toJSON(eachItem, requestContext)).collect(Collectors.toList());
  }

  public static Role fromJSON(Map jsonObject) {
    Role model = null;
    String type = (String) jsonObject.get("type");
    if ("gocd".equals(type)) {
      model = GoCDRoleConfigMapper.fromJSON((Map) jsonObject.get("attributes"));
    }
    else if ("plugin".equals(type)) {
      model = PluginRoleConfigMapper.fromJSON((Map) jsonObject.get("attributes"));
    }
    else {
      throw new RuntimeException("Could not find any subclass for specified type. Possible values are: gocd,plugin");
    }
    if (jsonObject == null) {
      return model;
    }
    if (jsonObject.containsKey("name")) {
      Object jsonAttribute = jsonObject.get("name");
      if (!(jsonAttribute instanceof String)) {
        JsonParseException.throwBadJsonType("name", String.class, jsonObject);
      }
      CaseInsensitiveString deserializedJsonAttribute = Constants.Deserializers.CASE_INSENSITIVE_STRING.apply((String) jsonAttribute);
      CaseInsensitiveString modelAttribute = (CaseInsensitiveString) deserializedJsonAttribute;
      model.setName(modelAttribute);
    }
    return model;
  }

  public static List<Role> fromJSON(List<Map> jsonArray) {
    if (jsonArray == null) {
      return Collections.emptyList();
    }
    return jsonArray.stream().map(eachItem -> RoleMapper.fromJSON(eachItem)).collect(Collectors.toList());
  }
}
